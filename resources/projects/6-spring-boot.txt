87: Phillip Webb, warn, CatchClause, logger.warn("Image banner not printable: " + this.image + " (" + ex.getClass() + ": '" + ex.getMessage() + "')");
89: Phillip Webb, debug, CatchClause, logger.debug("Image banner printing failure", ex);
75: Andy Wilkinson, warn, CatchClause, logger.warn("Banner not printable: " + this.resource + " (" + ex.getClass() + ": '" + ex.getMessage() + "')", ex);
663: Phillip Webb, info, IfStmt, log.info("The following profiles are active: " + StringUtils.arrayToCommaDelimitedString(activeProfiles));
659: Stephane Nicoll, info, IfStmt, log.info("No active profile set, falling back to default profiles: " + StringUtils.arrayToCommaDelimitedString(defaultProfiles));
687: Andy Wilkinson, debug, IfStmt, logger.debug("Loading source " + StringUtils.arrayToCommaDelimitedString(sources));
823: Andy Wilkinson, warn, CatchClause, logger.warn("Unable to close ApplicationContext", ex);
842: Andy Wilkinson, error, IfStmt, logger.error("Application run failed", failure);
64: Phillip Webb, warn, CatchClause, logger.warn("Failed to create String for banner", ex);
61: Phillip Webb, info, TryStmt, logger.info(createStringFromBanner(banner, environment, sourceClass));
103: Phillip Webb, Error, IfStmt, this.log.warn("Error handling failed (" + message + ")");
98: Phillip Webb, Error, IfStmt, this.log.error("Error handling failed", ex);
50: Phillip Webb, info, IfStmt, log.info(getStartupMessage());
53: Phillip Webb, debug, IfStmt, log.debug(getRunningMessage());
59: Phillip Webb, info, IfStmt, log.info(getStartedMessage(stopWatch));
102: Stephane Nicoll, debug, IfStmt, logger.debug("Application Admin MBean registered with name '" + this.objectName + "'");
132: Stephane Nicoll, info, MethodDeclaration, logger.info("Application shutdown requested.");
153: Phillip Webb, error, CatchClause, logger.error("Could not parse VCAP_APPLICATION", ex);
166: Phillip Webb, error, CatchClause, logger.error("Could not parse VCAP_SERVICES", ex);
149: igor-suhorukov, warn, CatchClause, logger.warn(message, ex);
108: Stephane Nicoll, warn, IfStmt, logger.warn(String.format("%n%n** WARNING ** : %s%n%n", message));
67: Madhura Bhave, error, IfStmt, logger.error("System property 'file.encoding' is currently '" + encoding + "'. It should be '" + desired + "' (as defined in 'spring.mandatoryFileEncoding').");
70: Madhura Bhave, error, IfStmt, logger.error("Environment variable LANG is '" + System.getenv("LANG") + "'. You could use a locale setting that matches encoding='" + desired + "'.");
73: Madhura Bhave, error, IfStmt, logger.error("Environment variable LC_ALL is '" + System.getenv("LC_ALL") + "'. You could use a locale setting that matches encoding='" + desired + "'.");
386: Madhura Bhave, debug, MethodDeclaration, this.logger.debug("Activated activeProfiles " + StringUtils.collectionToCommaDelimitedString(profiles));
505: Phillip Webb, trace, IfStmt, this.logger.trace("Skipped missing config " + description);
510: Phillip Webb, trace, IfStmt, this.logger.trace("Skipped empty config extension " + description);
516: Phillip Webb, trace, IfStmt, this.logger.trace("Skipped unloaded config " + description);
530: Phillip Webb, debug, IfStmt, this.logger.debug("Loaded config file " + description);
136: Phillip Webb, Error, MethodDeclaration, logger.warn("Error calling ApplicationEventListener", throwable);
56: Phillip Webb, debug, IfStmt, logger.debug("Application failed to start with classpath: " + getClasspath());
53: Phillip Webb, debug, IfStmt, logger.debug("Application started with classpath: " + getClasspath());
120: Phillip Webb, DEBUG, InitializerDeclaration, LOG_LEVEL_LOGGERS.add(LogLevel.DEBUG, "org.springframework.boot");
121: Phillip Webb, TRACE, InitializerDeclaration, LOG_LEVEL_LOGGERS.add(LogLevel.TRACE, "org.springframework");
122: Phillip Webb, TRACE, InitializerDeclaration, LOG_LEVEL_LOGGERS.add(LogLevel.TRACE, "org.apache.tomcat");
123: Dave Syer, TRACE, InitializerDeclaration, LOG_LEVEL_LOGGERS.add(LogLevel.TRACE, "org.apache.catalina");
124: Phillip Webb, TRACE, InitializerDeclaration, LOG_LEVEL_LOGGERS.add(LogLevel.TRACE, "org.eclipse.jetty");
125: Phillip Webb, TRACE, InitializerDeclaration, LOG_LEVEL_LOGGERS.add(LogLevel.TRACE, "org.hibernate.tool.hbm2ddl");
126: Dave Syer, DEBUG, InitializerDeclaration, LOG_LEVEL_LOGGERS.add(LogLevel.DEBUG, "org.hibernate.SQL");
245: Dave Syer, DEBUG, IfStmt, this.springBootLogging = LogLevel.DEBUG;
248: Dave Syer, TRACE, IfStmt, this.springBootLogging = LogLevel.TRACE;
317: Phillip Webb, error, CatchClause, this.logger.error("Cannot set level: " + level + " for '" + name + "'");
80: Phillip Webb, warn, IfStmt, logger.warn("Multiple PropertySourcesPlaceholderConfigurer " + "beans registered " + beans.keySet() + ", falling back to Environment");
81: Phillip Webb, trace, CatchClause, logger.trace("Failed to load " + analyzerName, ex);
120: Andy Wilkinson, debug, CatchClause, logger.debug("FailureAnalyzer " + analyzer + " failed", ex);
38: Andy Wilkinson, debug, IfStmt, logger.debug("Application failed to start due to an exception", failureAnalysis.getCause());
42: Andy Wilkinson, error, IfStmt, logger.error(buildMessage(failureAnalysis));
78: Phillip Webb, trace, IfStmt, logger.trace("Generating random property for '" + name + "'");
143: Phillip Webb, trace, MethodDeclaration, logger.trace("RandomValuePropertySource add to Environment");
111: Phillip Webb, warn, CatchClause, logger.warn("Cannot parse JSON for spring.application.json: " + propertyValue.getJson(), ex);
100: Phillip Webb, warn, CatchClause, logger.warn("Failed to create connection", ex);
131: Phillip Webb, warn, CatchClause, logger.warn("Failed to close connection", e);
64: Michael Cramer, error, IfStmt, this.logger.error(buildMessage(message));
71: Michael Cramer, error, IfStmt, this.logger.error(buildMessage(message), e);
78: Michael Cramer, warn, IfStmt, this.logger.warn(buildMessage(message));
85: Michael Cramer, warn, IfStmt, this.logger.warn(buildMessage(message), e);
92: Michael Cramer, info, IfStmt, this.logger.info(buildMessage(message));
99: Michael Cramer, info, IfStmt, this.logger.info(buildMessage(message), e);
106: Michael Cramer, debug, IfStmt, this.logger.debug(buildMessage(message));
113: Michael Cramer, debug, IfStmt, this.logger.debug(buildMessage(message), e);
86: Phillip Webb, warn, IfStmt, this.logger.warn("Unexpected failure when loading class resource " + resource, ex);
95: Phillip Webb, debug, IfStmt, this.logger.debug("Ignoring candidate class resource " + resource + " due to " + ex);
68: Phillip Webb, TRACE, MethodDeclaration, log(LogLevel.TRACE, message, null);
73: Phillip Webb, TRACE, MethodDeclaration, log(LogLevel.TRACE, message, t);
78: Phillip Webb, DEBUG, MethodDeclaration, log(LogLevel.DEBUG, message, null);
83: Phillip Webb, DEBUG, MethodDeclaration, log(LogLevel.DEBUG, message, t);
88: Phillip Webb, INFO, MethodDeclaration, log(LogLevel.INFO, message, null);
93: Phillip Webb, INFO, MethodDeclaration, log(LogLevel.INFO, message, t);
98: Phillip Webb, WARN, MethodDeclaration, log(LogLevel.WARN, message, null);
103: Phillip Webb, WARN, MethodDeclaration, log(LogLevel.WARN, message, t);
108: Phillip Webb, ERROR, MethodDeclaration, log(LogLevel.ERROR, message, null);
113: Phillip Webb, ERROR, MethodDeclaration, log(LogLevel.ERROR, message, t);
118: Phillip Webb, FATAL, MethodDeclaration, log(LogLevel.FATAL, message, null);
123: Phillip Webb, FATAL, MethodDeclaration, log(LogLevel.FATAL, message, t);
169: Phillip Webb, trace, SwitchStmt, log.trace(this.message, this.throwable);
172: Phillip Webb, debug, SwitchStmt, log.debug(this.message, this.throwable);
175: Phillip Webb, info, SwitchStmt, log.info(this.message, this.throwable);
178: Phillip Webb, warn, SwitchStmt, log.warn(this.message, this.throwable);
181: Phillip Webb, error, SwitchStmt, log.error(this.message, this.throwable);
184: Phillip Webb, fatal, SwitchStmt, log.fatal(this.message, this.throwable);
54: Phillip Webb, TRACE, InitializerDeclaration, LEVELS.map(LogLevel.TRACE, Level.FINEST);
55: Phillip Webb, DEBUG, InitializerDeclaration, LEVELS.map(LogLevel.DEBUG, Level.FINE);
56: Phillip Webb, INFO, InitializerDeclaration, LEVELS.map(LogLevel.INFO, Level.INFO);
57: Phillip Webb, WARN, InitializerDeclaration, LEVELS.map(LogLevel.WARN, Level.WARNING);
58: Phillip Webb, ERROR, InitializerDeclaration, LEVELS.map(LogLevel.ERROR, Level.SEVERE);
59: Phillip Webb, FATAL, InitializerDeclaration, LEVELS.map(LogLevel.FATAL, Level.SEVERE);
94: Phillip Webb, error, IfStmt, LOGGER.error("Incorrect number of options on style. " + "Expected at least 1, received {}", options.length);
99: Vladimir Tsanev, error, IfStmt, LOGGER.error("No pattern supplied on style");
68: Phillip Webb, TRACE, InitializerDeclaration, LEVELS.map(LogLevel.TRACE, Level.TRACE);
69: Phillip Webb, DEBUG, InitializerDeclaration, LEVELS.map(LogLevel.DEBUG, Level.DEBUG);
70: Phillip Webb, INFO, InitializerDeclaration, LEVELS.map(LogLevel.INFO, Level.INFO);
71: Phillip Webb, WARN, InitializerDeclaration, LEVELS.map(LogLevel.WARN, Level.WARN);
72: Phillip Webb, ERROR, InitializerDeclaration, LEVELS.map(LogLevel.ERROR, Level.ERROR);
73: Phillip Webb, FATAL, InitializerDeclaration, LEVELS.map(LogLevel.FATAL, Level.FATAL);
67: Phillip Webb, TRACE, InitializerDeclaration, LEVELS.map(LogLevel.TRACE, Level.TRACE);
68: Madhura Bhave, TRACE, InitializerDeclaration, LEVELS.map(LogLevel.TRACE, Level.ALL);
69: Phillip Webb, DEBUG, InitializerDeclaration, LEVELS.map(LogLevel.DEBUG, Level.DEBUG);
70: Phillip Webb, INFO, InitializerDeclaration, LEVELS.map(LogLevel.INFO, Level.INFO);
71: Phillip Webb, WARN, InitializerDeclaration, LEVELS.map(LogLevel.WARN, Level.WARN);
72: Phillip Webb, ERROR, InitializerDeclaration, LEVELS.map(LogLevel.ERROR, Level.ERROR);
73: Phillip Webb, FATAL, InitializerDeclaration, LEVELS.map(LogLevel.FATAL, Level.ERROR);
213: Phillip Webb, debug, IfStmt, this.logger.debug(message, ex);
95: Phillip Webb, warn, CatchClause, logger.warn(String.format("Cannot create port file %s", this.file));
148: Phillip Webb, info, MethodDeclaration, JettyReactiveWebServerFactory.logger.info("Server initialized with port: " + port);
143: Andrey Hihlovskiy, info, MethodDeclaration, this.logger.info("Server initialized with port: " + port);
157: Brian Clozel, info, TryStmt, JettyWebServer.logger.info("Jetty started on port(s) " + getActualPortsDescription() + " with context path '" + getContextPath() + "'");
189: Brian Clozel, info, CatchClause, JettyWebServer.logger.info("could not determine port ( " + ex.getMessage() + ")");
83: Madhura Bhave, info, IfStmt, NettyWebServer.logger.info("Netty started on port(s): " + getPort());
103: Phillip Webb, trace, IfStmt, logger.trace("Ignoring request to add " + url + " to the tomcat classloader");
62: Andy Wilkinson, Error, IfStmt, logger.error("Error starting Tomcat context. Exception: " + ex.getClass().getName() + ". Message: " + ex.getMessage());
90: Brian Clozel, info, MethodDeclaration, TomcatWebServer.logger.info("Tomcat initialized with port(s): " + getPortsDescription(false));
205: Brian Clozel, info, TryStmt, TomcatWebServer.logger.info("Tomcat started on port(s): " + getPortsDescription(true) + " with context path '" + getContextPath() + "'");
271: Brian Clozel, error, CatchClause, TomcatWebServer.logger.error("Cannot pause connector: ", ex);
284: Brian Clozel, error, CatchClause, TomcatWebServer.logger.error("Cannot start connector: ", ex);
147: Phillip Webb, info, TryStmt, UndertowServletWebServer.logger.info("Undertow started on port(s) " + getPortsDescription() + " with context path '" + this.contextPath + "'");
88: Brian Clozel, info, TryStmt, UndertowWebServer.logger.info("Undertow started on port(s) " + getPortsDescription());
232: Phillip Webb, info, IfStmt, this.logger.info("Registering annotated classes: [" + StringUtils.collectionToCommaDelimitedString(this.annotatedClasses) + "]");
241: Phillip Webb, info, IfStmt, this.logger.info("Scanning base packages: [" + StringUtils.collectionToCommaDelimitedString(this.basePackages) + "]");
257: Phillip Webb, debug, IfStmt, this.logger.debug("Could not load class for config location [" + configLocation + "] - trying package scan. " + ex);
272: Phillip Webb, info, IfStmt, this.logger.info("Successfully resolved class for [" + configLocation + "]");
283: Phillip Webb, info, IfStmt, this.logger.info("Found " + count + " annotated classes in package [" + configLocation + "]");
279: Phillip Webb, info, IfStmt, this.logger.info("No annotated classes found for specified class/package [" + configLocation + "]");
251: Phillip Webb, info, IfStmt, this.logger.info("Mapping filter: '" + registration.getName() + "' to servlets: " + servletNames);
257: Phillip Webb, info, IfStmt, this.logger.info("Mapping filter: '" + registration.getName() + "' to urls: " + this.urlPatterns);
244: Phillip Webb, info, IfStmt, this.logger.info("Mapping filter: '" + registration.getName() + "' to: " + Arrays.asList(DEFAULT_URL_MAPPINGS));
111: Phillip Webb, info, IfStmt, logger.info(StringUtils.capitalize(description) + " was not registered " + "(possibly already registered?)");
50: Phillip Webb, info, IfStmt, logger.info(StringUtils.capitalize(description) + " was not registered (disabled)");
138: Andy Wilkinson, debug, IfStmt, ServletContextInitializerBeans.logger.debug("Added existing " + type.getSimpleName() + " initializer bean '" + beanName + "'; order=" + order + ", resource=" + resourceDescription);
193: Andy Wilkinson, debug, IfStmt, ServletContextInitializerBeans.logger.debug("Created " + type.getSimpleName() + " initializer for bean '" + beanName + "'; order=" + order + ", resource=" + getResourceDescription(beanName, beanFactory));
185: Phillip Webb, info, MethodDeclaration, logger.info("Servlet " + name + " mapped to " + this.urlMappings);
290: Phillip Webb, error, CatchClause, logger.error("Context initialization failed", ex);
277: Phillip Webb, debug, IfStmt, logger.debug("Published root WebApplicationContext as ServletContext attribute with name [" + WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE + "]");
285: Dave Syer, info, IfStmt, logger.info("Root WebApplicationContext: initialization completed in " + elapsedTime + " ms");
389: igor-suhorukov, info, IfStmt, logger.info("Restoring user defined scope " + key);
70: Phillip Webb, debug, IfStmt, this.logger.debug("Document root: " + file);
82: Phillip Webb, debug, IfStmt, this.logger.debug("Code archive: " + file);
126: Phillip Webb, debug, IfStmt, this.logger.debug("Code archive: " + codeSourceFile);
151: Phillip Webb, debug, MethodDeclaration, this.logger.debug("None of the document roots " + Arrays.asList(COMMON_DOC_ROOTS) + " point to a directory and will be ignored.");
178: Phillip Webb, error, IfStmt, logger.error(message, ex);
210: Phillip Webb, error, IfStmt, logger.error(message);
98: Phillip Webb, debug, IfStmt, this.logger.debug("No ContextLoaderListener registered, as " + "createRootApplicationContext() did not " + "return an application context");
113: Phillip Webb, info, IfStmt, this.logger.info("Root context already created (using as parent).");
39: Andy Wilkinson, Info, MethodDeclaration, given(this.log.isInfoEnabled()).willReturn(true);
41: Andy Wilkinson, info, MethodDeclaration, verify(this.log).info(startsWith("Starting " + getClass().getSimpleName()));
64: Madhura Bhave, info, MethodDeclaration, this.logger.info("Child application starting");
114: Madhura Bhave, INFO, MethodDeclaration, loggingSystem.setLogLevel("ROOT", LogLevel.INFO);
147: Andy Wilkinson, info, MethodDeclaration, this.logger.info("Hello world", new RuntimeException("Expected"));
157: Phillip Webb, info, MethodDeclaration, this.logger.info("Hello world");
180: Andy Wilkinson, info, MethodDeclaration, this.logger.info("Hello world");
192: Chaouki Dhib, info, MethodDeclaration, this.logger.info("Hello world");
219: Dave Syer, info, MethodDeclaration, logger.info("Hello world");
233: Dave Syer, info, MethodDeclaration, logger.info("Hello world");
246: Dave Syer, info, MethodDeclaration, logger.info("Hello world");
257: Phillip Webb, debug, MethodDeclaration, this.logger.debug("testatdebug");
258: Phillip Webb, trace, MethodDeclaration, this.logger.trace("testattrace");
268: Phillip Webb, debug, MethodDeclaration, this.logger.debug("testatdebug");
269: Phillip Webb, trace, MethodDeclaration, this.logger.trace("testattrace");
289: Stephane Nicoll, debug, MethodDeclaration, this.logger.debug("testatdebug");
290: Stephane Nicoll, trace, MethodDeclaration, this.logger.trace("testattrace");
301: Dave Syer, debug, MethodDeclaration, this.logger.debug("testatdebug");
302: Dave Syer, trace, MethodDeclaration, this.logger.trace("testattrace");
313: Phillip Webb, debug, MethodDeclaration, this.logger.debug("testatdebug");
314: Phillip Webb, trace, MethodDeclaration, this.logger.trace("testattrace");
325: Dave Syer, debug, MethodDeclaration, this.logger.debug("testatdebug");
326: Dave Syer, trace, MethodDeclaration, this.logger.trace("testattrace");
337: Dave Syer, debug, MethodDeclaration, this.logger.debug("testatdebug");
348: Dave Syer, debug, MethodDeclaration, this.logger.debug("testatdebug");
349: Dave Syer, fatal, MethodDeclaration, this.logger.fatal("testatfatal");
360: Andy Wilkinson, debug, MethodDeclaration, this.logger.debug("testatdebug");
361: Andy Wilkinson, fatal, MethodDeclaration, this.logger.fatal("testatfatal");
372: Phillip Webb, debug, MethodDeclaration, this.logger.debug("testatdebug");
378: Phillip Webb, ERROR, MethodDeclaration, this.initializer.setSpringBootLogging(LogLevel.ERROR);
384: Phillip Webb, debug, MethodDeclaration, this.logger.debug("testatdebug");
402: Andy Wilkinson, info, MethodDeclaration, this.logger.info("Hello world", new RuntimeException("Wrapper", new RuntimeException("Expected")));
415: Andy Wilkinson, info, MethodDeclaration, this.logger.info("Hello world", new RuntimeException("Wrapper", new RuntimeException("Expected")));
545: Madhura Bhave, debug, MethodDeclaration, this.logger.debug("testatdebug");
51: Michael Cramer, DEBUG, MethodDeclaration, this.logger.setLogLevel(LogLevel.DEBUG);
53: Michael Cramer, debug, MethodDeclaration, this.logger.debug("debug");
59: Michael Cramer, DEBUG, MethodDeclaration, this.logger.setLogLevel(LogLevel.DEBUG);
61: Michael Cramer, debug, MethodDeclaration, this.logger.debug("debug", this.ex);
67: Michael Cramer, DEBUG, MethodDeclaration, this.logger.setLogLevel(LogLevel.DEBUG);
69: Michael Cramer, debug, MethodDeclaration, this.logger.debug("debug");
75: Michael Cramer, INFO, MethodDeclaration, this.logger.setLogLevel(LogLevel.INFO);
77: Michael Cramer, info, MethodDeclaration, this.logger.info("info");
83: Michael Cramer, INFO, MethodDeclaration, this.logger.setLogLevel(LogLevel.INFO);
85: Michael Cramer, info, MethodDeclaration, this.logger.info("info", this.ex);
91: Michael Cramer, INFO, MethodDeclaration, this.logger.setLogLevel(LogLevel.INFO);
93: Michael Cramer, info, MethodDeclaration, this.logger.info("info");
99: Michael Cramer, WARN, MethodDeclaration, this.logger.setLogLevel(LogLevel.WARNING);
101: Michael Cramer, warn, MethodDeclaration, this.logger.warning("warning");
107: Michael Cramer, WARN, MethodDeclaration, this.logger.setLogLevel(LogLevel.WARNING);
109: Michael Cramer, warn, MethodDeclaration, this.logger.warning("warning", this.ex);
115: Michael Cramer, WARN, MethodDeclaration, this.logger.setLogLevel(LogLevel.WARNING);
117: Michael Cramer, warn, MethodDeclaration, this.logger.warning("warning");
45: Phillip Webb, Trace, MethodDeclaration, assertThat(this.deferredLog.isTraceEnabled()).isTrue();
50: Phillip Webb, Debug, MethodDeclaration, assertThat(this.deferredLog.isDebugEnabled()).isTrue();
55: Phillip Webb, Info, MethodDeclaration, assertThat(this.deferredLog.isInfoEnabled()).isTrue();
60: Phillip Webb, Warn, MethodDeclaration, assertThat(this.deferredLog.isWarnEnabled()).isTrue();
65: Phillip Webb, Error, MethodDeclaration, assertThat(this.deferredLog.isErrorEnabled()).isTrue();
70: Phillip Webb, Fatal, MethodDeclaration, assertThat(this.deferredLog.isFatalEnabled()).isTrue();
75: Phillip Webb, trace, MethodDeclaration, this.deferredLog.trace(this.message);
77: Phillip Webb, trace, MethodDeclaration, verify(this.log).trace(this.message, null);
82: Phillip Webb, trace, MethodDeclaration, this.deferredLog.trace(this.message, this.throwable);
84: Phillip Webb, trace, MethodDeclaration, verify(this.log).trace(this.message, this.throwable);
89: Phillip Webb, debug, MethodDeclaration, this.deferredLog.debug(this.message);
91: Phillip Webb, debug, MethodDeclaration, verify(this.log).debug(this.message, null);
96: Phillip Webb, debug, MethodDeclaration, this.deferredLog.debug(this.message, this.throwable);
98: Phillip Webb, debug, MethodDeclaration, verify(this.log).debug(this.message, this.throwable);
103: Phillip Webb, info, MethodDeclaration, this.deferredLog.info(this.message);
105: Phillip Webb, info, MethodDeclaration, verify(this.log).info(this.message, null);
110: Phillip Webb, info, MethodDeclaration, this.deferredLog.info(this.message, this.throwable);
112: Phillip Webb, info, MethodDeclaration, verify(this.log).info(this.message, this.throwable);
117: Phillip Webb, warn, MethodDeclaration, this.deferredLog.warn(this.message);
119: Phillip Webb, warn, MethodDeclaration, verify(this.log).warn(this.message, null);
124: Phillip Webb, warn, MethodDeclaration, this.deferredLog.warn(this.message, this.throwable);
126: Phillip Webb, warn, MethodDeclaration, verify(this.log).warn(this.message, this.throwable);
131: Phillip Webb, error, MethodDeclaration, this.deferredLog.error(this.message);
133: Phillip Webb, error, MethodDeclaration, verify(this.log).error(this.message, null);
138: Phillip Webb, error, MethodDeclaration, this.deferredLog.error(this.message, this.throwable);
140: Phillip Webb, error, MethodDeclaration, verify(this.log).error(this.message, this.throwable);
145: Phillip Webb, fatal, MethodDeclaration, this.deferredLog.fatal(this.message);
147: Phillip Webb, fatal, MethodDeclaration, verify(this.log).fatal(this.message, null);
152: Phillip Webb, fatal, MethodDeclaration, this.deferredLog.fatal(this.message, this.throwable);
154: Phillip Webb, fatal, MethodDeclaration, verify(this.log).fatal(this.message, this.throwable);
159: Phillip Webb, info, MethodDeclaration, this.deferredLog.info("1");
160: Phillip Webb, fatal, MethodDeclaration, this.deferredLog.fatal("2");
164: Phillip Webb, info, MethodDeclaration, verify(this.log).info("1", null);
165: Phillip Webb, fatal, MethodDeclaration, verify(this.log).fatal("2", null);
85: Phillip Webb, info, MethodDeclaration, this.logger.info("Hidden");
87: Phillip Webb, info, MethodDeclaration, this.logger.info("Hello world");
101: Phillip Webb, info, MethodDeclaration, this.logger.info("Hidden");
103: Phillip Webb, info, MethodDeclaration, this.logger.info("Hello world");
113: Phillip Webb, info, MethodDeclaration, this.logger.info("Hello world");
124: Dave Syer, info, MethodDeclaration, this.logger.info("Hello world");
125: Dave Syer, info, MethodDeclaration, this.logger.info("Hello world");
135: Dave Syer, info, MethodDeclaration, this.logger.info("Hello world");
149: Madhura Bhave, TRACE, MethodDeclaration, assertThat(this.loggingSystem.getSupportedLogLevels()).isEqualTo(EnumSet.of(LogLevel.TRACE, LogLevel.DEBUG, LogLevel.INFO, LogLevel.WARN, LogLevel.ERROR, LogLevel.OFF));
159: Phillip Webb, DEBUG, MethodDeclaration, this.loggingSystem.setLogLevel("org.springframework.boot", LogLevel.DEBUG);
170: Stephane Nicoll, DEBUG, MethodDeclaration, this.loggingSystem.setLogLevel("org.springframework.boot", LogLevel.DEBUG);
182: Ben Hale, DEBUG, MethodDeclaration, this.loggingSystem.setLogLevel(getClass().getName(), LogLevel.DEBUG);
194: Phillip Webb, DEBUG, MethodDeclaration, this.loggingSystem.setLogLevel(getClass().getName(), LogLevel.DEBUG);
197: Phillip Webb, DEBUG, MethodDeclaration, assertThat(configuration).isEqualTo(new LoggerConfiguration(getClass().getName(), LogLevel.DEBUG, LogLevel.DEBUG));
83: Phillip Webb, info, MethodDeclaration, this.logger.info("Hidden");
85: Phillip Webb, info, MethodDeclaration, this.logger.info("Hello world");
96: Phillip Webb, info, MethodDeclaration, this.logger.info("Hidden");
98: Daniel Fullarton, info, MethodDeclaration, this.logger.info("Hello world");
111: Phillip Webb, info, MethodDeclaration, this.logger.info("Hello world");
137: Phillip Webb, debug, MethodDeclaration, this.logger.debug("Hello");
138: Phillip Webb, DEBUG, MethodDeclaration, this.loggingSystem.setLogLevel("org.springframework.boot", LogLevel.DEBUG);
139: Phillip Webb, debug, MethodDeclaration, this.logger.debug("Hello");
148: Stephane Nicoll, debug, MethodDeclaration, this.logger.debug("Hello");
149: Stephane Nicoll, DEBUG, MethodDeclaration, this.loggingSystem.setLogLevel("org.springframework.boot", LogLevel.DEBUG);
150: Stephane Nicoll, debug, MethodDeclaration, this.logger.debug("Hello");
152: Stephane Nicoll, debug, MethodDeclaration, this.logger.debug("Hello");
161: Ben Hale, DEBUG, MethodDeclaration, this.loggingSystem.setLogLevel(getClass().getName(), LogLevel.DEBUG);
173: Phillip Webb, DEBUG, MethodDeclaration, this.loggingSystem.setLogLevel(getClass().getName(), LogLevel.DEBUG);
176: Phillip Webb, DEBUG, MethodDeclaration, assertThat(configuration).isEqualTo(new LoggerConfiguration(getClass().getName(), LogLevel.DEBUG, LogLevel.DEBUG));
184: Andy Wilkinson, debug, MethodDeclaration, LogManager.getRootLogger().debug("Hello");
185: Andy Wilkinson, DEBUG, MethodDeclaration, this.loggingSystem.setLogLevel("foo.bar.baz", LogLevel.DEBUG);
186: Andy Wilkinson, debug, MethodDeclaration, LogManager.getRootLogger().debug("Hello");
243: Andy Wilkinson, warn, MethodDeclaration, this.logger.warn("Expected exception", new RuntimeException("Expected"));
252: Phillip Webb, Error, MethodDeclaration, assertThat(this.logger.isErrorEnabled()).isFalse();
261: Andy Wilkinson, info, TryStmt, this.logger.info("Hidden");
267: Phillip Webb, warn, TryStmt, this.logger.warn("Expected exception", new RuntimeException("Expected", new RuntimeException("Cause")));
113: Phillip Webb, info, MethodDeclaration, this.logger.info("Hidden");
115: Phillip Webb, info, MethodDeclaration, this.logger.info("Hello world");
125: Phillip Webb, info, MethodDeclaration, this.logger.info("Hidden");
128: Phillip Webb, info, MethodDeclaration, this.logger.info("Hello world");
154: Phillip Webb, info, MethodDeclaration, this.logger.info("Hello world");
186: Madhura Bhave, TRACE, MethodDeclaration, assertThat(this.loggingSystem.getSupportedLogLevels()).isEqualTo(EnumSet.of(LogLevel.TRACE, LogLevel.DEBUG, LogLevel.INFO, LogLevel.WARN, LogLevel.ERROR, LogLevel.OFF));
195: Phillip Webb, debug, MethodDeclaration, this.logger.debug("Hello");
196: Phillip Webb, DEBUG, MethodDeclaration, this.loggingSystem.setLogLevel("org.springframework.boot", LogLevel.DEBUG);
197: Phillip Webb, debug, MethodDeclaration, this.logger.debug("Hello");
206: Stephane Nicoll, debug, MethodDeclaration, this.logger.debug("Hello");
207: Stephane Nicoll, DEBUG, MethodDeclaration, this.loggingSystem.setLogLevel("org.springframework.boot", LogLevel.DEBUG);
208: Stephane Nicoll, debug, MethodDeclaration, this.logger.debug("Hello");
210: Stephane Nicoll, debug, MethodDeclaration, this.logger.debug("Hello");
219: Ben Hale, DEBUG, MethodDeclaration, this.loggingSystem.setLogLevel(getClass().getName(), LogLevel.DEBUG);
231: Phillip Webb, DEBUG, MethodDeclaration, this.loggingSystem.setLogLevel(getClass().getName(), LogLevel.DEBUG);
234: Phillip Webb, DEBUG, MethodDeclaration, assertThat(configuration).isEqualTo(new LoggerConfiguration(getClass().getName(), LogLevel.DEBUG, LogLevel.DEBUG));
247: Madhura Bhave, TRACE, MethodDeclaration, assertThat(configuration).isEqualTo(new LoggerConfiguration(getClass().getName(), LogLevel.TRACE, LogLevel.TRACE));
255: Madhura Bhave, TRACE, MethodDeclaration, this.loggingSystem.setLogLevel(getClass().getName(), LogLevel.TRACE);
267: Andy Wilkinson, info, MethodDeclaration, julLogger.info("Hello world");
276: Thomas Recloux, DEBUG, MethodDeclaration, this.loggingSystem.setLogLevel(getClass().getName(), LogLevel.DEBUG);
325: Rob Baily, info, MethodDeclaration, this.logger.info("Hello world");
337: Dave Syer, info, MethodDeclaration, this.logger.info("Hello world");
351: Rob Baily, info, MethodDeclaration, this.logger.info("Hello world");
366: Vedran Pavic, info, MethodDeclaration, this.logger.info("Hello world");
382: Andy Wilkinson, info, MethodDeclaration, this.logger.info("Hello world");
397: Vedran Pavic, info, MethodDeclaration, this.logger.info("Hello world");
412: Andy Wilkinson, info, MethodDeclaration, this.logger.info("Hello world");
424: Andy Wilkinson, warn, MethodDeclaration, this.logger.warn("Expected exception", new RuntimeException("Expected"));
435: Andy Wilkinson, info, TryStmt, this.logger.info("Hidden");
442: Phillip Webb, warn, TryStmt, this.logger.warn("Expected exception", new RuntimeException("Expected", new RuntimeException("Cause")));
457: Phillip Webb, info, MethodDeclaration, this.logger.info("Hidden");
491: Henrik, info, MethodDeclaration, this.logger.info("Hello world");
84: Phillip Webb, trace, MethodDeclaration, this.logger.trace("Hello");
92: Eddú Meléndez, trace, MethodDeclaration, this.logger.trace("Hello");
100: Eddú Meléndez, trace, MethodDeclaration, this.logger.trace("Hello");
107: Phillip Webb, trace, MethodDeclaration, this.logger.trace("Hello");
176: Phillip Webb, trace, MethodDeclaration, this.logger.trace("Hello");
408: Phillip Webb, Debug, MethodDeclaration, given(logger.isDebugEnabled()).willReturn(true);
414: Phillip Webb, debug, MethodDeclaration, verify(logger).debug(contains("Non-matching CharSequence type for callback " + "LambdaSafeTests.GenericCallback"), any(Throwable.class));
46: Vedran Pavic, debug, IfStmt, logger.debug(event);
329: Andy Wilkinson, debug, IfStmt, logger.debug("Skipping '" + writer.getFullName() + "' on '" + pojo.getClass().getName() + "' as an exception " + "was thrown when retrieving its value", ex);
320: Andy Wilkinson, debug, IfStmt, logger.debug("Skipping '" + writer.getFullName() + "' on '" + pojo.getClass().getName() + "' as it is self-referential");
113: Phillip Webb, debug, IfStmt, logger.debug("Unregister endpoint with ObjectName '" + objectName + "' " + "from the JMX domain");
59: Andy Wilkinson, info, IfStmt, logger.info("Exposing " + endpoints.size() + " endpoint(s) beneath base path '" + basePath + "'");
69: Phillip Webb, info, MethodDeclaration, logger.info("Registered '" + path + "' to " + name);
89: Phillip Webb, warn, IfStmt, this.logger.warn(StringUtils.hasText(message) ? message : DEFAULT_MESSAGE, ex);
73: Andy Wilkinson, debug, IfStmt, logger.debug("Missing 'logging.file' or 'logging.path' properties");
248: Andy Wilkinson, warn, CatchClause, TemporaryFileSystemResource.this.logger.warn("Failed to delete temporary heap dump file '" + getFile() + "'", ex);
122: Phillip Webb, debug, CatchClause, logger.debug("Unable to time request", ex);
63: Phillip Webb, warn, IfStmt, logger.warn(String.format("Free disk space below threshold. " + "Available: %d bytes (threshold: %d bytes)", diskFreeInBytes, this.threshold));
49: Andy Wilkinson, DEBUG, MethodDeclaration, given(this.loggingSystem.getLoggerConfigurations()).willReturn(Collections.singletonList(new LoggerConfiguration("ROOT", null, LogLevel.DEBUG)));
60: Madhura Bhave, FATAL, MethodDeclaration, assertThat(levels).containsExactly(LogLevel.OFF, LogLevel.FATAL, LogLevel.ERROR, LogLevel.WARN, LogLevel.INFO, LogLevel.DEBUG, LogLevel.TRACE);
66: Andy Wilkinson, DEBUG, MethodDeclaration, given(this.loggingSystem.getLoggerConfiguration("ROOT")).willReturn(new LoggerConfiguration("ROOT", null, LogLevel.DEBUG));
76: Andy Wilkinson, DEBUG, MethodDeclaration, new LoggersEndpoint(this.loggingSystem).configureLogLevel("ROOT", LogLevel.DEBUG);
77: Andy Wilkinson, DEBUG, MethodDeclaration, verify(this.loggingSystem).setLogLevel("ROOT", LogLevel.DEBUG);
76: Andy Wilkinson, DEBUG, MethodDeclaration, given(this.loggingSystem.getLoggerConfigurations()).willReturn(Collections.singletonList(new LoggerConfiguration("ROOT", null, LogLevel.DEBUG)));
90: Andy Wilkinson, DEBUG, MethodDeclaration, given(this.loggingSystem.getLoggerConfiguration("ROOT")).willReturn(new LoggerConfiguration("ROOT", null, LogLevel.DEBUG));
110: Andy Wilkinson, DEBUG, MethodDeclaration, verify(this.loggingSystem).setLogLevel("ROOT", LogLevel.DEBUG);
119: Andy Wilkinson, DEBUG, MethodDeclaration, verify(this.loggingSystem).setLogLevel("ROOT", LogLevel.DEBUG);
150: Andy Wilkinson, DEBUG, MethodDeclaration, given(this.loggingSystem.getLoggerConfiguration("com.png")).willReturn(new LoggerConfiguration("com.png", null, LogLevel.DEBUG));
80: Phillip Webb, error, MethodDeclaration, logger.error(ex.getMessage(), ex);
81: Madhura Bhave, error, CatchClause, logger.error(ex);
105: Phillip Webb, debug, CatchClause, this.logger.debug("Failed to send error response", ex);
67: Andy Wilkinson, warn, CatchClause, logger.warn("Failed to bind Hikari metrics: " + ex.getMessage());
110: Jon Schneider, warn, IfStmt, this.logger.warn("Reached the maximum number of URI tags for '" + this.metricName + "'. Are you using uriVariables on HTTP client calls?");
66: Andy Wilkinson, INFO, MethodDeclaration, given(this.loggingSystem.getLoggerConfigurations()).willReturn(Arrays.asList(new LoggerConfiguration("ROOT", LogLevel.INFO, LogLevel.INFO), new LoggerConfiguration("com.example", LogLevel.DEBUG, LogLevel.DEBUG)));
79: Andy Wilkinson, INFO, MethodDeclaration, given(this.loggingSystem.getLoggerConfiguration("com.example")).willReturn(new LoggerConfiguration("com.example", LogLevel.INFO, LogLevel.INFO));
98: Andy Wilkinson, DEBUG, MethodDeclaration, verify(this.loggingSystem).setLogLevel("com.example", LogLevel.DEBUG);
258: Phillip Webb, trace, IfStmt, logger.trace("Filtered " + numberFiltered + " auto configuration class in " + TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - startTime) + " ms");
206: Phillip Webb, debug, IfStmt, logger.debug("@EnableAutoConfiguration was declared on a class " + "in the package '" + packageNames + "'. Automatic @Repository and @Entity scanning is " + "enabled.");
197: Phillip Webb, warn, IfStmt, logger.warn("@EnableAutoConfiguration was declared on a class " + "in the default package. Automatic @Repository and " + "@Entity scanning is not enabled.");
127: Dave Syer, info, MethodDeclaration, logger.info("Running default command line with: " + Arrays.asList(args));
151: hoserdude, debug, CatchClause, logger.debug("No job found in registry for job name: " + jobName);
175: Dave Syer, debug, IfStmt, logger.debug("Skipped job: " + job.getName());
57: Stephane Nicoll, warn, MethodDeclaration, logger.warn("JPA does not support custom isolation levels, so locks may not be taken when launching Jobs");
188: Johnny Lim, debug, IfStmt, logger.debug("Ignoring " + message + " '" + name + "'", ex);
92: Phillip Webb, trace, IfStmt, this.logger.trace(getLogMessage(classOrMethodName, outcome));
133: Andy Wilkinson, warn, IfStmt, logger.warn("spring.data.neo4j.open-in-view is enabled by default." + "Therefore, database queries may be performed during view " + "rendering. Explicitly configure " + "spring.data.neo4j.open-in-view to disable this warning");
79: Phillip Webb, warn, IfStmt, logger.warn("Cannot find template location(s): " + locations + " (please add some templates, " + "check your FreeMarker configuration, or set " + "spring.freemarker.checkTemplateLocation=false)");
93: Phillip Webb, warn, IfStmt, logger.warn("Cannot find template location: " + location + " (please add some templates, check your Groovy " + "configuration, or set spring.groovy.template." + "check-template-location=false)");
147: Andy Wilkinson, warn, IfStmt, logger.warn("spring.jackson.date-format could not be used to " + "configure formatting of Joda's DateTime. You may want " + "to configure spring.jackson.joda-date-time-format as " + "well.");
99: Stephane Nicoll, debug, IfStmt, logger.debug("Initialization disabled (not running DDL scripts)");
118: Stephane Nicoll, debug, IfStmt, logger.debug("Initialization disabled (not running data scripts)");
143: Stephane Nicoll, debug, CatchClause, logger.debug("Could not determine if datasource is embedded", ex);
82: Phillip Webb, warn, CatchClause, logger.warn("Could not send event to complete DataSource initialization (" + ex.getMessage() + ")");
97: Stephane Nicoll, warn, CatchClause, logger.warn("Cannot expose DataSource to JMX (could not connect)");
208: Andy Wilkinson, info, IfStmt, logger.info("Configuring existing registration for Jersey servlet '" + servletRegistrationName + "'");
69: Andy Wilkinson, debug, IfStmt, logger.debug("Using default Artemis cluster password: " + this.properties.getClusterPassword());
87: Andreas Ahlenstorf, error, IfStmt, logger.error("Execution of SQL statement failed.", translated);
59: Michael J. Simons, warn, CatchClause, logger.warn("Unable to determine jdbc url from datasource", ex);
91: Stephane Nicoll, info, IfStmt, this.logger.info("Unable to provide the conditions report " + "due to missing ApplicationContext");
101: Phillip Webb, info, IfStmt, this.logger.info(String.format("%n%nError starting ApplicationContext. To display the " + "conditions report re-run your application with " + "'debug' enabled."));
107: Johnny Lim, debug, IfStmt, this.logger.debug(new ConditionEvaluationReportMessage(this.report));
71: Phillip Webb, warn, IfStmt, logger.warn("Cannot find template location: " + location + " (please add some templates, check your Mustache " + "configuration, or set spring.mustache." + "check-template-location=false)");
80: Phillip Webb, warn, CatchClause, logger.warn("Unable to determine jdbc url from datasource", ex);
205: Stephane Nicoll, debug, IfStmt, logger.debug("Unable to set Hibernate JTA platform : " + ex.getMessage());
235: Andy Wilkinson, warn, IfStmt, logger.warn("spring.jpa.open-in-view is enabled by default. " + "Therefore, database queries may be performed during view " + "rendering. Explicitly configure " + "spring.jpa.open-in-view to disable this warning");
83: Phillip Webb, info, IfStmt, logger.info(String.format("%n%nUsing default security password: %s%n", user.getPassword()));
84: Phillip Webb, info, IfStmt, logger.info(String.format("%n%nUsing generated security password: %s%n", user.getPassword()));
104: Andy Wilkinson, warn, IfStmt, logger.warn("Cannot find template location: " + location + " (please add some templates or check " + "your Thymeleaf configuration)");
149: Brian Clozel, debug, IfStmt, logger.debug("Default resource handling disabled");
316: Phillip Webb, debug, IfStmt, logger.debug("Default resource handling disabled");
61: Bruce Brouwer, info, IfStmt, logger.info("Adding welcome page template: index");
56: Andy Wilkinson, info, IfStmt, logger.info("Adding welcome page: " + welcomePage.get());
235: Brian Clozel, error, IfStmt, logger.error(message);
58: Stephane Nicoll, info, CatchClause, logger.info("No couchbase server available");
115: Phillip Webb, warn, CatchClause, logger.warn("Exception while trying to cleanup couchbase resource", ex);
562: Phillip Webb, Warn, MethodDeclaration, this.contextRunner.withPropertyValues("spring.mvc.log-resolved-exception:true").run(assertExceptionResolverWarnLoggers((logger) -> assertThat(logger).isNotNull()));
263: Phillip Webb, error, MethodDeclaration, Log.error(message == null ? "Unexpected error" : message);
268: Phillip Webb, info, MethodDeclaration, Log.infoPrint("usage: " + this.name);
271: Phillip Webb, info, IfStmt, Log.infoPrint("[--" + command.getName() + "] ");
274: Phillip Webb, info, MethodDeclaration, Log.info("");
275: Phillip Webb, info, MethodDeclaration, Log.info("       <command> [<args>]");
276: Phillip Webb, info, MethodDeclaration, Log.info("");
277: Phillip Webb, info, MethodDeclaration, Log.info("Available commands are:");
282: mnhock, info, IfStmt, Log.info(String.format("%n  %1$s %2$-15s%n    %3$s", command.getName(), (usageHelp == null ? "" : usageHelp), (description == null ? "" : description)));
287: Phillip Webb, info, MethodDeclaration, Log.info("");
288: Phillip Webb, info, MethodDeclaration, Log.info("Common options:");
289: mnhock, info, MethodDeclaration, Log.info(String.format("%n  %1$s %2$-15s%n    %3$s", "-d, --debug", "Verbose mode", "Print additional status information for the command you are running"));
292: Phillip Webb, info, MethodDeclaration, Log.info("");
293: Phillip Webb, info, MethodDeclaration, Log.info("");
294: Phillip Webb, info, MethodDeclaration, Log.info("See '" + this.name + "help <command>' for more information on a specific command.");
299: Phillip Webb, error, MethodDeclaration, Log.error("");
300: Phillip Webb, error, MethodDeclaration, Log.error(ex);
301: Phillip Webb, error, MethodDeclaration, Log.error("");
97: Phillip Webb, info, IfStmt, Log.info(this.commandRunner.getName() + command.getName() + " - " + command.getDescription());
99: Phillip Webb, info, IfStmt, Log.info("");
101: Phillip Webb, info, IfStmt, Log.info("usage: " + this.commandRunner.getName() + command.getName() + " " + command.getUsageHelp());
103: Phillip Webb, info, IfStmt, Log.info("");
106: Phillip Webb, info, IfStmt, Log.info(command.getHelp());
110: Phillip Webb, info, IfStmt, Log.info(examples.size() == 1 ? "example:" : "examples:");
111: Phillip Webb, info, IfStmt, Log.info("");
113: Phillip Webb, info, ForeachStmt, Log.info("    " + example.getDescription() + ":");
114: Phillip Webb, info, ForeachStmt, Log.info("        $ " + example.getExample());
115: Phillip Webb, info, ForeachStmt, Log.info("");
117: Phillip Webb, info, IfStmt, Log.info("");
76: Phillip Webb, info, IfStmt, Log.info(command.getName() + " " + command.getDescription());
98: Phillip Webb, info, IfStmt, Log.info(option + " " + help.getUsageHelp());
37: Phillip Webb, info, MethodDeclaration, Log.info("Spring CLI v" + getClass().getPackage().getImplementationVersion());
95: Phillip Webb, error, IfStmt, Log.error("A single password option must be provided");
102: Phillip Webb, error, IfStmt, Log.error("Unknown algorithm, valid options are: " + StringUtils.collectionToCommaDelimitedString(ENCODERS.keySet()));
106: Phillip Webb, info, MethodDeclaration, Log.info(encoder.get().encode(password));
194: Phillip Webb, error, CatchClause, Log.error(ex.getMessage());
198: Phillip Webb, error, CatchClause, Log.error(ex);
204: Phillip Webb, info, MethodDeclaration, Log.info(this.serviceCapabilitiesReport.generate(options.valueOf(this.target)));
91: Phillip Webb, info, MethodDeclaration, Log.info("Using service at " + request.getServiceUrl());
56: Phillip Webb, info, IfStmt, Log.info("Could not extract '" + response.getContentType() + "'");
113: Phillip Webb, info, TryStmt, Log.info("Project extracted to '" + outputFolder.getAbsolutePath() + "'");
155: Phillip Webb, info, MethodDeclaration, Log.info("Content saved to '" + output + "'");
62: Phillip Webb, error, CatchClause, Log.error(message != null ? message : ex.getClass().toString());
92: Johnny Lim, info, MethodDeclaration, Log.info("Installing into: " + extDirectory);
124: Andy Wilkinson, info, MethodDeclaration, Log.info("Uninstalling from: " + extDirectory);
138: Andy Wilkinson, info, MethodDeclaration, Log.info("Uninstalling from: " + extDirectory);
78: Phillip Webb, error, CatchClause, Log.error(message != null ? message : ex.getClass().toString());
116: Phillip Webb, error, CatchClause, Log.error(ex.getMessage() + " (" + ex.getClass().getName() + ")");
60: Phillip Webb, error, IfStmt, Log.error("Maven settings decryption failed. Some Maven repositories may be inaccessible");
62: Phillip Webb, info, MethodDeclaration, verify(this.log).info(this.message.capture());
73: Phillip Webb, info, MethodDeclaration, verify(this.log).info(this.message.capture());
84: Phillip Webb, info, MethodDeclaration, verify(this.log).info(this.message.capture());
95: Phillip Webb, error, MethodDeclaration, verify(this.log).error("Unknown algorithm, valid options are: default,bcrypt,pbkdf2");
56: Andy Wilkinson, info, IfStmt, this.logger.info("Condition evaluation unchanged");
50: Johnny Lim, info, IfStmt, this.logger.info("Condition evaluation delta:" + new ConditionEvaluationReportMessage(delta, "CONDITION EVALUATION DELTA"));
82: Andy Wilkinson, warn, CatchClause, logger.warn("Failed to disable Spring HATEOAS's Objenesis cache. ClassCastExceptions may occur", ex);
61: Phillip Webb, warn, CatchClause, logger.warn("Unable to start LiveReload server");
62: Phillip Webb, debug, CatchClause, logger.debug("Live reload start error", ex);
57: Phillip Webb, info, TryStmt, logger.info("LiveReload server is running on port " + this.server.getPort());
133: Phillip Webb, warn, MethodDeclaration, logger.warn("Listening for remote restart updates on " + url);
61: Phillip Webb, warn, CatchClause, logger.warn("Unable to get classpath URL " + url);
62: Phillip Webb, trace, CatchClause, logger.trace("Unable to get classpath URL " + url, ex);
73: Phillip Webb, debug, ConstructorDeclaration, logger.debug("Established livereload connection [" + this.header + "]");
116: Johnny Lim, debug, IfStmt, logger.debug("Received LiveReload text frame " + frame);
137: Phillip Webb, debug, IfStmt, logger.debug("Triggering LiveReload");
114: Andy Wilkinson, debug, SynchronizedStmt, logger.debug("Starting live reload server on port " + this.port);
155: Phillip Webb, debug, IfStmt, logger.debug("LiveReload server error", ex);
209: Phillip Webb, debug, CatchClause, logger.debug("Unable to send reload message", ex);
263: Phillip Webb, debug, CatchClause, logger.debug("LiveReload connection closed");
267: Phillip Webb, debug, IfStmt, logger.debug("LiveReload error", ex);
121: Andy Wilkinson, warn, CatchClause, logger.warn("Failed to connect when uploading to " + this.uri + ". Upload will be retried in 2 seconds");
135: Phillip Webb, info, MethodDeclaration, logger.info("Uploaded " + size + " class " + (size == 1 ? "resource" : "resources"));
95: Phillip Webb, info, TryStmt, logger.info("Remote server has changed, triggering LiveReload");
121: Stephane Nicoll, warn, IfStmt, logger.warn("Remote restart is disabled.");
124: Rob Winch, warn, IfStmt, logger.warn("The connection to " + this.remoteUrl + " is insecure. You should use a URL starting with 'https://'.");
63: Hrishikesh Joshi, debug, IfStmt, logger.debug("Matching URLs for reloading : " + reloadableUrls);
137: Phillip Webb, debug, ConstructorDeclaration, this.logger.debug("Creating new Restarter for thread " + thread);
162: Phillip Webb, debug, IfStmt, this.logger.debug("Immediately restarting application");
177: Phillip Webb, warn, CatchClause, this.logger.warn("Unable to initialize restarter", ex);
194: Phillip Webb, warn, CatchClause, this.logger.warn("Unable to pre-initialize classes", ex);
245: Phillip Webb, debug, IfStmt, this.logger.debug("Application restart is disabled");
248: Phillip Webb, debug, MethodDeclaration, this.logger.debug("Restarting application");
281: Phillip Webb, debug, IfStmt, this.logger.debug("Starting application " + this.mainClassName + " with URLs " + Arrays.asList(urls));
306: Phillip Webb, debug, MethodDeclaration, this.logger.debug("Stopping application");
363: Phillip Webb, debug, CatchClause, this.logger.debug("Unable to clear field " + className + " " + fieldName, ex);
380: Phillip Webb, debug, CatchClause, this.logger.debug("Unable to clear field " + type + " " + fieldName, ex);
86: Andy Clement, debug, IfStmt, logger.debug("Created RestartClassLoader " + toString());
187: Andy Clement, debug, IfStmt, this.logger.debug("Finalized classloader " + toString());
82: Phillip Webb, warn, CatchClause, logger.warn("Unable to handler restart server HTTP request", ex);
131: Phillip Webb, debug, IfStmt, logger.debug("URL " + url + " matched against source folder " + sourceFolder);
114: Hrishikesh Joshi, debug, IfStmt, logger.debug("Included patterns for restart : " + settings.restartIncludePatterns);
116: Hrishikesh Joshi, debug, IfStmt, logger.debug("Excluded patterns for restart : " + settings.restartExcludePatterns);
98: Phillip Webb, trace, MethodDeclaration, logger.trace("Opening HTTP tunnel to " + this.uri);
164: Andy Wilkinson, trace, IfStmt, logger.trace("Unexpected connection error", ex);
160: Andy Wilkinson, warn, IfStmt, logger.warn("Failed to connect to remote application at " + HttpTunnelConnection.this.uri);
91: Andy Wilkinson, trace, SynchronizedStmt, logger.trace("Listening for TCP traffic to tunnel on port " + port);
147: Andy Wilkinson, trace, MethodDeclaration, logger.trace("Closing tunnel client on port " + this.serverSocketChannel.socket().getLocalPort());
167: Phillip Webb, trace, CatchClause, logger.trace("Unexpected exception from tunnel client", ex);
176: Phillip Webb, trace, TryStmt, logger.trace("Accepted connection to tunnel client from " + socketChannel.socket().getRemoteSocketAddress());
167: Phillip Webb, trace, IfStmt, logger.trace(prefix + toHexString());
237: Phillip Webb, trace, CatchClause, logger.trace("Unexpected exception from tunnel server", ex);
312: Phillip Webb, trace, CatchClause, logger.trace("Unable to close remote HTTP connection");
323: Phillip Webb, trace, CatchClause, logger.trace("Unable to target server connection");
58: Phillip Webb, trace, MethodDeclaration, logger.trace("Opening tunnel connection to target server on " + address);
99: Phillip Webb, warn, IfStmt, logger.warn(warningReport);
103: Phillip Webb, error, IfStmt, logger.error(errorReport);
244: Phillip Webb, info, MethodDeclaration, logger.info("Found @SpringBootConfiguration " + found.getName() + " for test " + mergedConfig.getTestClass());
86: Andy Wilkinson, warn, MethodDeclaration, this.logger.warn(message);
106: Greg Potter, info, IfStmt, logger.info("Replacing '" + beanName + "' DataSource bean with " + (primary ? "primary " : "") + "embedded version");
124: Phillip Webb, warn, IfStmt, logger.warn("No DataSource beans found, " + "embedded version will not be used");
139: Phillip Webb, warn, MethodDeclaration, logger.warn("No primary DataSource found, " + "embedded version will not be used");
288: Phillip Webb, debug, IfStmt, logger.debug("MvcResult details:\n" + stringWriter);
578: Stephane Nicoll, WARN, MethodDeclaration, log(Kind.WARNING, msg);
60: Andy Wilkinson, warn, IfStmt, logger.warn(message.toString());
195: Stephane Nicoll, debug, IfStmt, getLog().debug("skipping run as per configuration.");
258: Stephane Nicoll, warn, IfStmt, getLog().warn("Fork mode disabled, ignoring agent");
262: Stephane Nicoll, warn, IfStmt, getLog().warn("Fork mode disabled, ignoring JVM argument(s) [" + Arrays.stream(runArguments.asArray()).collect(Collectors.joining(" ")) + "]");
267: Plamen Totev, warn, IfStmt, getLog().warn("Fork mode disabled, ignoring working directory configuration");
361: Stephane Nicoll, info, IfStmt, getLog().info("Attaching agents: " + Arrays.asList(this.agent));
393: Stephane Nicoll, debug, TryStmt, getLog().debug("Classpath for forked process: " + classpath);
475: Stephane Nicoll, debug, MethodDeclaration, getLog().debug(sb.toString().trim());
510: Stephane Nicoll, warn, IfStmt, getLog().warn(ex);
77: Stephane Nicoll, debug, IfStmt, this.log.debug("Duplicate found: " + name);
79: Stephane Nicoll, debug, IfStmt, this.log.debug("Renamed to: " + name);
200: Stephane Nicoll, debug, IfStmt, getLog().debug("repackage goal could not be applied to pom project.");
204: Stephane Nicoll, debug, IfStmt, getLog().debug("skipping repackaging as per configuration.");
246: Phillip Webb, info, IfStmt, getLog().info("Layout: " + this.layout);
311: Phillip Webb, info, IfStmt, getLog().info("Updating main artifact " + source + " to " + original);
324: Phillip Webb, info, IfStmt, getLog().info("Replacing main artifact " + source + " to " + repackaged);
317: Phillip Webb, info, IfStmt, getLog().info("Attaching archive: " + repackaged + ", with classifier: " + this.classifier);
333: Phillip Webb, warn, MethodDeclaration, getLog().warn("Searching for the main-class is taking some time, " + "consider using the mainClass configuration " + "parameter");
64: Stephane Nicoll, warn, IfStmt, getLog().warn("Fork mode disabled, devtools will be disabled");
159: Stephane Nicoll, debug, MethodDeclaration, getLog().debug("Waiting for spring application to start...");
166: Phillip Webb, debug, ForStmt, getLog().debug(message);
206: Stephane Nicoll, debug, TryStmt, getLog().debug("Connecting to local MBeanServer at port " + this.jmxPort);
215: Andy Wilkinson, debug, TryStmt, getLog().debug("Connected to local MBeanServer at port " + this.jmxPort);
257: Stephane Nicoll, debug, MethodDeclaration, getLog().debug("Waiting for spring application to start...");
265: Phillip Webb, debug, ForStmt, getLog().debug(message);
299: Phillip Webb, debug, IfStmt, getLog().debug(message);
84: Stephane Nicoll, debug, IfStmt, getLog().debug("skipping stop as per configuration.");
87: Stephane Nicoll, info, MethodDeclaration, getLog().info("Stopping application...");
98: Phillip Webb, debug, CatchClause, getLog().debug("Service is not reachable anymore (" + ex.getMessage() + ")");
62: Stephane Nicoll, info, MethodDeclaration, logger.info("Hello World");
39: Phillip Webb, info, MethodDeclaration, this.logger.info("Connected", resource.uuid());
44: Phillip Webb, info, MethodDeclaration, this.logger.info("Client {} disconnected [{}]", event.getResource().uuid(), (event.isCancelled() ? "cancelled" : "closed"));
50: Phillip Webb, info, MethodDeclaration, this.logger.info("Author {} sent message {}", message.getAuthor(), message.getMessage());
84: Phillip Webb, info, MethodDeclaration, logger.info("Waiting for response: latch=" + this.latch.getCount());
89: Phillip Webb, info, IfStmt, logger.info("Response not received: latch=" + this.latch.getCount());
86: Phillip Webb, info, IfStmt, logger.info("Got response: " + this.messagePayload.get());
120: Phillip Webb, info, MethodDeclaration, logger.info("Received: " + message + " (" + ClientConfiguration.this.latch.getCount() + ")");
39: Phillip Webb, info, MethodDeclaration, logger.info("\n\n" + "=========================================================\n" + "Using cache manager: " + this.cacheManager.getClass().getName() + "\n" + "=========================================================\n\n");
42: Andy Wilkinson, warn, CatchClause, logger.warn("Failure during server cleanup", ex);
35: Phillip Webb, debug, MethodDeclaration, logger.debug("Sample Debug Message");
36: Phillip Webb, trace, MethodDeclaration, logger.trace("Sample Trace Message");
53: Phillip Webb, debug, MethodDeclaration, logger.debug("Retrieving vehicle data for: " + vin);
40: Phillip Webb, info, MethodDeclaration, logger.info("ServletContext initialized");
45: Phillip Webb, info, MethodDeclaration, logger.info("ServletContext destroyed");
40: Dave Syer, info, MethodDeclaration, logger.info("ServletContext initialized");
45: Dave Syer, info, MethodDeclaration, logger.info("ServletContext destroyed");
91: Phillip Webb, error, MethodDeclaration, http.authorizeRequests().antMatchers("/login").permitAll().anyRequest().fullyAuthenticated().and().formLogin().loginPage("/login").failureUrl("/login?error").and().logout().logoutRequestMatcher(new AntPathRequestMatcher("/logout")).and().exceptionHandling().accessDeniedPage("/access?error");
66: Phillip Webb, error, MethodDeclaration, http.authorizeRequests().requestMatchers(PathRequest.toStaticResources().atCommonLocations()).permitAll().anyRequest().fullyAuthenticated().and().formLogin().loginPage("/login").failureUrl("/login?error").permitAll().and().logout().permitAll();
64: Dave Syer, error, MethodDeclaration, http.authorizeRequests().antMatchers("/css/**").permitAll().anyRequest().fullyAuthenticated().and().formLogin().loginPage("/login").failureUrl("/login?error").permitAll().and().logout().permitAll();
68: Dave Syer, error, MethodDeclaration, http.authorizeRequests().antMatchers("/css/**").permitAll().anyRequest().fullyAuthenticated().and().formLogin().loginPage("/login").failureUrl("/login?error").permitAll().and().logout().permitAll();
33: Andy Wilkinson, info, MethodDeclaration, this.logger.info("Booking holiday for [{} - {}] for [{}] ", startDate, endDate, name);
55: Andy Wilkinson, info, MethodDeclaration, this.logger.info("Received: " + message + " (" + this.latch.getCount() + ")");
43: Phillip Webb, debug, MethodDeclaration, logger.debug("Opened new session in instance " + this);
50: Phillip Webb, debug, MethodDeclaration, logger.debug(echoMessage);
104: Phillip Webb, error, CatchClause, log.error("Caught to prevent timer from shutting down", ex);
99: Andy Wilkinson, info, MethodDeclaration, logger.info("Waiting for response: latch=" + this.latch.getCount());
104: Andy Wilkinson, info, IfStmt, logger.info("Response not received: latch=" + this.latch.getCount());
101: Andy Wilkinson, info, IfStmt, logger.info("Got response: " + this.messagePayload.get());
115: Andy Wilkinson, info, MethodDeclaration, logger.info("Waiting for response: latch=" + this.latch.getCount());
120: Andy Wilkinson, info, IfStmt, logger.info("Response not received: latch=" + this.latch.getCount());
117: Andy Wilkinson, info, IfStmt, logger.info("Got response: " + this.messagePayload.get());
55: Phillip Webb, info, MethodDeclaration, this.logger.info("Received: " + message + " (" + this.latch.getCount() + ")");
43: Dave Syer, debug, MethodDeclaration, logger.debug("Opened new session in instance " + this);
50: Dave Syer, debug, MethodDeclaration, logger.debug(echoMessage);
104: Phillip Webb, error, CatchClause, log.error("Caught to prevent timer from shutting down", ex);
99: Phillip Webb, info, MethodDeclaration, logger.info("Waiting for response: latch=" + this.latch.getCount());
104: Andy Wilkinson, info, IfStmt, logger.info("Response not received: latch=" + this.latch.getCount());
101: Andy Wilkinson, info, IfStmt, logger.info("Got response: " + this.messagePayload.get());
115: Dave Syer, info, MethodDeclaration, logger.info("Waiting for response: latch=" + this.latch.getCount());
120: Andy Wilkinson, info, IfStmt, logger.info("Response not received: latch=" + this.latch.getCount());
117: Andy Wilkinson, info, IfStmt, logger.info("Got response: " + this.messagePayload.get());
55: Andy Wilkinson, info, MethodDeclaration, this.logger.info("Received: " + message + " (" + this.latch.getCount() + ")");
43: Phillip Webb, debug, MethodDeclaration, logger.debug("Opened new session in instance " + this);
50: Phillip Webb, debug, MethodDeclaration, logger.debug(echoMessage);
104: Phillip Webb, error, CatchClause, log.error("Caught to prevent timer from shutting down", ex);
99: Phillip Webb, info, MethodDeclaration, logger.info("Waiting for response: latch=" + this.latch.getCount());
104: Phillip Webb, info, IfStmt, logger.info("Response not received: latch=" + this.latch.getCount());
101: Phillip Webb, info, IfStmt, logger.info("Got response: " + this.messagePayload.get());
115: Phillip Webb, info, MethodDeclaration, logger.info("Waiting for response: latch=" + this.latch.getCount());
120: Phillip Webb, info, IfStmt, logger.info("Response not received: latch=" + this.latch.getCount());
117: Phillip Webb, info, IfStmt, logger.info("Got response: " + this.messagePayload.get());
