71: Simon Irving, debug, MethodDeclaration, LOGGER.debug("Does metric [{}] match filter? [{}]", s, matchesFilter);
80: Simon Irving, debug, MethodDeclaration, LOGGER.debug("Is filter enabled? [{}]", filterEnabled);
249: Dave Brosius, error, CatchClause, logger.error("While publishing CodaHale metrics, error looking up eventType for : {}.  Please check that all Hystrix versions are the same!", name);
272: Dave Brosius, error, CatchClause, logger.error("While publishing CodaHale metrics, error looking up eventType for : {}.  Please check that all Hystrix versions are the same!", name);
530: Dave Brosius, error, CatchClause, logger.error("While publishing CodaHale metrics, error looking up eventType for : {}.  Please check that all Hystrix versions are the same!", name);
553: Dave Brosius, error, CatchClause, logger.error("While publishing CodaHale metrics, error looking up eventType for : {}.  Please check that all Hystrix versions are the same!", name);
130: Matt Jacobs, error, CatchClause, logger.error("While publishing CodaHale metrics, error looking up eventType for : rollingCountCommandsRejected.  Please check that all Hystrix versions are the same!");
81: dmgcodevil, Error, CatchClause, LOGGER.error(FallbackErrorMessageBuilder.create().append(commandAction, e).build());
44: dmgcodevil, debug, MethodDeclaration, LOGGER.debug("execute command: {}", getCommandKey().name());
80: dmgcodevil, Error, CatchClause, LOGGER.error(FallbackErrorMessageBuilder.create().append(commandAction, e).build());
119: dmgcodevil, error, CatchClause, LOGGER.error(AbstractHystrixCommand.FallbackErrorMessageBuilder.create().append(commandActions.getFallbackAction(), e).build());
267: Zsolt Mészárovics, debug, MethodDeclaration, log.debug("executing on thread id: {}", Thread.currentThread().getId());
99: Matt Jacobs, debug, IfStmt, logger.debug("Starting HystrixMetricsPoller");
103: Matt Jacobs, error, CatchClause, logger.error("Exception while creating the MetricsPoller task");
119: Matt Jacobs, debug, IfStmt, logger.debug("Attempted to pause a stopped poller");
116: Matt Jacobs, debug, IfStmt, logger.debug("Stopping the HystrixMetricsPoller");
144: Dave Brosius, warn, IfStmt, logger.warn("{} was not shutdown. Caught in Finalize Guardian and shutting down.", HystrixMetricsPoller.class.getSimpleName());
148: Dave Brosius, error, CatchClause, logger.error("Failed to shutdown {}", HystrixMetricsPoller.class.getSimpleName(), e);
188: Ben Christensen, warn, CatchClause, logger.warn("Failed to output metrics as JSON", e);
199: Dave Brosius, error, CatchClause, logger.error("While publishing Hystrix metrics stream, error looking up eventType for : {}.  Please check that all Hystrix versions are the same!", name);
140: Dave Brosius, error, MethodDeclaration, logger.error("HystrixSampleSseServlet: ({}) received unexpected OnCompleted from sample stream", getClass().getSimpleName());
68: Justin Jose, error, MethodDeclaration, LOGGER.error("HystrixSampleSseServlet: ({}) received unexpected OnCompleted from sample stream", getClass().getSimpleName());
86: Ben Christensen, warn, CatchClause, logger.warn("Unable to append HystrixRequestLog", e);
83: Dave Brosius, info, IfStmt, logger.info("Hystrix Executions [{}] => {}", requestURL.toString(), log.getExecutedCommandsAsString());
73: Ben Christensen, warn, CatchClause, logger.warn("Unable to append HystrixRequestLog", e);
136: Dave Brosius, error, CatchClause, logger.error("While publishing Servo metrics, error looking up eventType for : {}.  Please check that all Hystrix versions are the same!", name);
159: Dave Brosius, error, CatchClause, logger.error("While publishing Servo metrics, error looking up eventType for : {}.  Please check that all Hystrix versions are the same!", name);
190: Dave Brosius, error, CatchClause, logger.error("While publishing Servo metrics, error looking up eventType for : {}.  Please check that all Hystrix versions are the same!", name);
214: Dave Brosius, error, CatchClause, logger.error("While publishing Servo metrics, error looking up eventType for : {}.  Please check that all Hystrix versions are the same!", name);
127: Dave Brosius, error, CatchClause, logger.error("While publishing Servo metrics, error looking up eventType for : {}.  Please check that all Hystrix versions are the same!", name);
142: Dave Brosius, error, CatchClause, logger.error("While publishing Servo metrics, error looking up eventType for : {}.  Please check that all Hystrix versions are the same!", name);
244: Dave Brosius, error, CatchClause, logger.error("While publishing Yammer metrics, error looking up eventType for : {}.  Please check that all Hystrix versions are the same!", name);
267: Dave Brosius, error, CatchClause, logger.error("While publishing Yammer metrics, error looking up eventType for : {}.  Please check that all Hystrix versions are the same!", name);
419: Dave Brosius, error, CatchClause, logger.error("While publishing Yammer metrics, error looking up eventType for : {}.  Please check that all Hystrix versions are the same!", name);
453: Dave Brosius, error, CatchClause, logger.error("While publishing Yammer metrics, error looking up eventType for : {}.  Please check that all Hystrix versions are the same!", name);
124: Matt Jacobs, error, CatchClause, logger.error("While publishing Yammer metrics, error looking up eventType for : rollingCountCommandsRejected.  Please check that all Hystrix versions are the same!");
404: Matt Jacobs, Error, CatchClause, logger.warn("Error calling HystrixCommandExecutionHook.onUnsubscribe", hookEx);
392: Matt Jacobs, Error, CatchClause, logger.warn("Error calling HystrixCommandExecutionHook.onUnsubscribe", hookEx);
432: Matt Jacobs, Error, CatchClause, logger.warn("Error calling HystrixCommandExecutionHook.onComplete", hookEx);
438: Matt Jacobs, Error, CatchClause, logger.warn("Error calling HystrixCommandExecutionHook.onEmit", hookEx);
450: Matt Jacobs, Error, CatchClause, logger.warn("Error calling HystrixCommandExecutionHook.onSuccess", hookEx);
773: Matt Jacobs, warn, IfStmt, logger.warn("Recovered from java.lang.Error by serving Hystrix fallback", originalException);
822: Matt Jacobs, debug, IfStmt, logger.debug("HystrixCommand execution " + failureType.name() + " and fallback failed.", fe);
816: Matt Jacobs, debug, IfStmt, logger.debug("No fallback for HystrixCommand. ", fe);
766: Tim van Heugten, error, IfStmt, logger.error("Unrecoverable Error for HystrixCommand so will throw HystrixRuntimeException and not apply fallback. ", originalException);
904: Matt Jacobs, Error, CatchClause, logger.warn("Error calling HystrixCommandExecutionHook.onCacheHit", hookEx);
970: Matt Jacobs, debug, MethodDeclaration, logger.debug("HystrixCommand Execution Rejection by Semaphore.");
1016: Matt Jacobs, Error, CatchClause, logger.warn("Error calling HystrixCommandExecutionHook.onError", hookEx);
1013: Matt Jacobs, warn, IfStmt, logger.warn("ExecutionHook.onError returned an exception that was not an instance of HystrixBadRequestException so will be ignored.", decorated);
1028: Matt Jacobs, Error, MethodDeclaration, logger.debug("Error executing HystrixCommand.run(). Proceeding to fallback logic ...", underlying);
1042: Matt Jacobs, debug, MethodDeclaration, logger.debug("HystrixCommand Fallback Rejection.");
1109: Matt Jacobs, Error, CatchClause, logger.warn("Error calling HystrixCommandExecutionHook.onThreadComplete", hookEx);
1356: Matt Jacobs, Error, CatchClause, logger.warn("Error calling HystrixCommandExecutionHook.onExecutionSuccess", hookEx);
1391: Matt Jacobs, Error, CatchClause, logger.warn("Error calling HystrixCommandExecutionHook.onFallbackSuccess", hookEx);
1435: Matt Jacobs, Error, CatchClause, logger.warn("Error calling HystrixCommandExecutionHook.onRunError", hookEx);
1446: Matt Jacobs, Error, CatchClause, logger.warn("Error calling HystrixCommandExecutionHook.onRunSuccess", hookEx);
1483: Matt Jacobs, Error, CatchClause, logger.warn("Error calling HystrixCommandExecutionHook.onFallbackSuccess", hookEx);
1496: Matt Jacobs, Error, CatchClause, logger.warn("Error calling HystrixCommandExecutionHook.onExecutionError", hookEx);
1510: Matt Jacobs, Error, CatchClause, logger.warn("Error calling HystrixCommandExecutionHook.onFallbackError", hookEx);
1520: Matt Jacobs, Error, CatchClause, logger.warn("Error calling HystrixCommandExecutionHook.onError", hookEx);
1529: Matt Jacobs, Error, CatchClause, logger.warn("Error calling HystrixCommandExecutionHook.onExecutionEmit", hookEx);
1538: Matt Jacobs, Error, CatchClause, logger.warn("Error calling HystrixCommandExecutionHook.onFallbackEmit", hookEx);
1547: Matt Jacobs, Error, CatchClause, logger.warn("Error calling HystrixCommandExecutionHook.onEmit", hookEx);
1592: Neeraj Joshi, debug, MethodDeclaration, logger.debug(message, e);
115: Ben Christensen, warn, CatchClause, logger.warn("Unable to record command starting", e);
138: Ben Christensen, debug, CatchClause, logger.debug("No command found to end.", e);
140: Ben Christensen, warn, CatchClause, logger.warn("Unable to end command.", e);
439: Ben Christensen, debug, CatchClause, logger.debug(message, e);
499: Ben Christensen, error, CatchClause, logger.error("Unable to derive ExecutionIsolationStrategy from property value: " + property.get(), e);
198: Matt Jacobs, warn, CatchClause, logger.warn("Uncaught error during demultiplexing of BatchResponse", ex);
195: Dave Brosius, warn, IfStmt, logger.warn("Batch Response contained a response key not in request batch : {}", responseKey);
128: Neeraj Joshi, warn, IfStmt, logger.warn("RequestLog ignoring command after reaching limit of " + MAX_STORAGE + ". See https://github.com/Netflix/Hystrix/issues/53 for more information.");
137: Ben Christensen, warn, IfStmt, logger.warn("RequestLog ignoring command after reaching limit of " + MAX_STORAGE + ". See https://github.com/Netflix/Hystrix/issues/53 for more information.");
261: Ben Christensen, error, CatchClause, logger.error("Failed to create HystrixRequestLog response header string.", e);
226: Matt Jacobs, error, IfStmt, logger.error("Hystrix ThreadPool configuration for : " + metrics.getThreadPoolKey().name() + " is trying to set coreSize = " + dynamicCoreSize + " and maximumSize = " + configuredMaximumSize + ".  Maximum size will be set to " + dynamicMaximumSize + ", the coreSize value, since it must be equal to or greater than the coreSize value");
236: Ben Christensen, error, CatchClause, logger.error("Exception while sharding requests.", e);
242: Ben Christensen, debug, CatchClause, logger.debug("Failed trying to setException on CollapsedRequest", e2);
223: Ben Christensen, error, CatchClause, logger.error("Exception while creating and queueing command with batch.", e);
229: Ben Christensen, debug, CatchClause, logger.debug("Failed trying to setException on CollapsedRequest", e2);
215: Ben Christensen, debug, CatchClause, logger.debug("Partial success of 'mapResponseToRequests' resulted in IllegalStateException while setting 'No response set' Exception. Continuing ... ", e2);
188: Matt Jacobs, debug, MethodDeclaration, logger.debug("Exception mapping responses to requests.", e);
259: Matt Jacobs, warn, IfStmt, logger.warn("Requests still exist in queue but will not be executed due to RequestCollapser shutdown: " + argumentMap.size(), new IllegalStateException());
271: Ben Christensen, debug, CatchClause, logger.debug("Failed to setException on CollapsedRequestFutureImpl instances.", e);
276: Ben Christensen, warn, ForeachStmt, logger.warn("Request still in queue but not be executed due to RequestCollapser shutdown. Argument => " + request.getArgument() + "   Request Object => " + request, new IllegalStateException());
159: Matt Jacobs, Error, CatchClause, logger.error("Error occurred trying to execute the batch.", t);
174: Ben Christensen, Error, CatchClause, logger.error("Error occurred trying to execute callable inside CollapsedTask from Timer.", e);
90: Dave Brosius, warn, IfStmt, logger.warn("Invalid Scope: {}  Defaulting to REQUEST scope.", getScope());
371: Adam Gent, debug, IfStmt, logSupplier.getLogger().debug("Created HystrixDynamicProperties instance from System property named " + "\"hystrix.plugin.HystrixDynamicProperties.implementation\". Using class: {}", hp.getClass().getCanonicalName());
379: Adam Gent, debug, IfStmt, logSupplier.getLogger().debug("Created HystrixDynamicProperties instance by loading from ServiceLoader. Using class: {}", hp.getClass().getCanonicalName());
386: Adam Gent, debug, IfStmt, logSupplier.getLogger().debug("Created HystrixDynamicProperties. Using class : {}", hp.getClass().getCanonicalName());
391: Adam Gent, info, MethodDeclaration, logSupplier.getLogger().info("Using System Properties for HystrixDynamicProperties! Using class: {}", hp.getClass().getCanonicalName());
85: Matt Jacobs, error, IfStmt, logger.error("Hystrix ThreadPool configuration at startup for : " + threadPoolKey.name() + " is trying to set coreSize = " + dynamicCoreSize + " and maximumSize = " + dynamicMaximumSize + ".  Maximum size will be set to " + dynamicCoreSize + ", the coreSize value, since it must be equal to or greater than the coreSize value");
106: Matt Jacobs, error, IfStmt, logger.error("Hystrix ThreadPool configuration at startup for : " + threadPoolKey.name() + " is trying to set coreSize = " + dynamicCoreSize + " and maximumSize = " + dynamicMaximumSize + ".  Maximum size will be set to " + dynamicCoreSize + ", the coreSize value, since it must be equal to or greater than the coreSize value");
138: Ben Christensen, Error, CatchClause, HystrixRequestVariableDefault.logger.error("Error in shutdown, will continue with shutdown of other variables", t);
64: Ben Christensen, warn, IfStmt, logger.warn("Over 100 instances of HystrixRequestVariable are being stored. This is likely the sign of a memory leak caused by using unique instances of HystrixConcurrencyStrategy instead of a single instance.");
92: Dave Brosius, debug, IfStmt, logger.debug("Flipping property: {} to use NEXT property: {}", getName(), next);
89: Zach A. Thomas, debug, IfStmt, logger.debug("Flipping property: {} to use its current value: {}", getName(), getValue());
158: Dave Brosius, debug, MethodDeclaration, logger.debug("Property changed: '{} = {}'", getName(), getValue());
212: Dave Brosius, debug, MethodDeclaration, logger.debug("Property changed: '{} = {}'", getName(), getValue());
266: Dave Brosius, debug, MethodDeclaration, logger.debug("Property changed: '{} = {}'", getName(), getValue());
93: Dave Brosius, debug, IfStmt, logger.debug("Flipping property: {} to use NEXT property: {}", getName(), next);
90: Zach A. Thomas, debug, IfStmt, logger.debug("Flipping property: {} to use its current value: {}", getName(), getValue());
236: Dave Brosius, debug, MethodDeclaration, logger.debug("Property changed: '{} = {}'", getName(), getValue());
148: Ben Christensen, error, CatchClause, logger.error("Failed to add value: " + v, e);
101: Ben Christensen, error, CatchClause, logger.error("Failed while ticking TimerListener", e);
437: Matt Jacobs, error, CatchClause, logger.error("While publishing Hystrix metrics stream, error looking up eventType for : " + name + ".  Please check that all Hystrix versions are the same!");
