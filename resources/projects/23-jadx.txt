19: Skylot, error, CatchClause, LOG.error("jadx error: {}", e.getMessage(), e);
29: Skylot, error, CatchClause, LOG.error("Incorrect arguments: {}", e.getMessage());
37: Skylot, info, IfStmt, LOG.info("done");
35: Skylot, error, IfStmt, LOG.error("finished with errors");
37: Skylot, info, MethodDeclaration, LOG.info("Jadx args: {}", jadxArgs.toJadxArgs());
21: Skylot, debug, IfStmt, LOG.debug("Effective jadx args: {}", args);
77: Skylot, info, MethodDeclaration, LOG.info("output directory: {}", outDirName);
85: Skylot, info, MethodDeclaration, LOG.info("loading ...");
149: Skylot, error, CatchClause, LOG.error("Save interrupted", e);
163: Skylot, debug, MethodDeclaration, LOG.debug("processing threads count: {}", threadsCount);
165: Skylot, info, MethodDeclaration, LOG.info("processing ...");
276: Skylot, error, CatchClause, LOG.error("Visitor init failed: {}", pass.getClass().getSimpleName(), e);
85: Skylot, error, CatchClause, LOG.error("Decode error", e);
129: Skylot, debug, CatchClause, LOG.debug("Not a zip file: {}", file.getAbsolutePath());
53: Skylot, debug, IfStmt, LOG.info("debug enabled");
130: Skylot, error, CatchClause, LOG.error("Can't get manifest file", e);
134: Skylot, warn, MethodDeclaration, LOG.warn("Found {} references to unknown classes", count);
139: Skylot, debug, ForeachStmt, LOG.debug("  {}", cls);
102: Skylot, debug, IfStmt, LOG.debug("Class not found: {}", fullName);
132: Skylot, info, TryStmt, LOG.info("Classes count: {}", classes.length);
23: Skylot, info, MethodDeclaration, LOG.info("<output .jcst or .jar file> <several input dex or jar files> ");
43: Skylot, info, ForeachStmt, LOG.info("Loaded: {}", inputFile.getFile());
52: Skylot, info, MethodDeclaration, LOG.info("Output: {}", output);
53: Skylot, info, MethodDeclaration, LOG.info("done");
68: Skylot, warn, CatchClause, LOG.warn("Skip file: {}, load error: {}", file, e.getMessage());
174: Skylot, warn, IfStmt, LOG.warn("Indent < 0");
298: Skylot, error, CatchClause, LOG.error("Save file error", e);
771: Skylot, warn, IfStmt, LOG.warn("Not passed register {} in method call: {} from {}", r, callMthNode, mth);
767: Skylot, warn, IfStmt, LOG.warn("Unknown register number {} in method call: {} from {}", r, callMthNode, mth);
111: Skylot, Error, IfStmt, LOG.warn(ErrorsCounter.formatErrorMsg(mth, "Incorrect number of args for enum constructor: " + args.size() + " (expected >= 2)"));
146: Skylot, Error, IfStmt, LOG.warn(ErrorsCounter.formatErrorMsg(mth, "Last argument in varargs method not array"));
201: Skylot, Error, CatchClause, LOG.error("Error reload instructions in fallback mode:", e);
237: Skylot, Error, CatchClause, LOG.debug("Error generate fallback instruction: ", e.getCause());
286: Skylot, warn, IfStmt, LOG.warn("Several 'all' handlers in try/catch block in {}", mth);
77: Skylot, warn, IfStmt, LOG.warn("Wrong object literal: {} for type: {}", lit, type);
43: Skylot, info, MethodDeclaration, LOG.info("Loading obfuscation map from: {}", deobfMapFile.getAbsoluteFile());
68: Skylot, error, CatchClause, LOG.error("Failed to load deobfuscation map file '{}'", deobfMapFile.getAbsolutePath(), e);
93: Skylot, error, CatchClause, LOG.error("Failed to load deobfuscation map file '{}'", deobfMapFile.getAbsolutePath(), e);
86: Skylot, warn, IfStmt, LOG.warn("Deobfuscation map file '{}' exists. Use command line option '--deobf-rewrite-cfg' to rewrite it", deobfMapFile.getAbsolutePath());
166: NeoSpb, warn, IfStmt, LOG.warn(String.format("Multiple overriding '%s' from '%s' and '%s' in '%s'", signature, result.getFullName(), clsWithMth.getFullName(), rootClass.getFullName()));
185: NeoSpb, warn, IfStmt, LOG.warn(String.format("Multiple overriding '%s' from '%s' and '%s' in '%s'", signature, result.getFullName(), clsWithMth.getFullName(), rootClass.getFullName()));
506: Skylot, error, IfStmt, LOG.error("Can't find package node for '{}'", cls.getPackage());
503: Skylot, info, IfStmt, LOG.info("Alias name for class '{}' is '{}'", cls.getFullName(), getClassFullName(cls));
63: Skylot, warn, CatchClause, LOG.warn("Ignore decode error: '{}', replace with NOP instruction", e.getMessage());
89: Skylot, debug, IfStmt, LOG.debug("Can't wrap instruction info itself: {}", insn);
151: Skylot, Error, CatchClause, LOG.error("Error parsing annotations in {}", this, e);
194: Skylot, error, CatchClause, LOG.error("Class signature parse error: {}", this, e);
208: Skylot, error, CatchClause, LOG.error("Field signature parse error: {}", field, e);
241: Skylot, debug, MethodDeclaration, LOG.debug("Class '{}' compiled from '{}'", this, fileName);
250: Skylot, error, CatchClause, LOG.error("Method load error: {}", mth, e);
191: Skylot, error, CatchClause, LOG.error("Method signature parse error: {}", this, e);
175: Skylot, warn, IfStmt, LOG.warn("Wrong signature parse result: {} -> {}, not generic version: {}", sp, argsTypes, mthArgs);
59: Skylot, debug, TryStmt, LOG.debug("Load: {}", dexFile);
82: Skylot, debug, IfStmt, LOG.debug("'.arsc' file not found");
95: Skylot, error, CatchClause, LOG.error("Failed to parse '.arsc' file", e);
44: Skylot, error, CatchClause, LOG.error("Can't parse signature for local variable: {}", sign, e);
56: Skylot, warn, IfStmt, LOG.warn("Generic type in debug info not equals: {} != {}", type, gType);
231: Skylot, error, IfStmt, LOG.error("Can't parse generic map: {}", sign);
30: Skylot, warn, MethodDeclaration, LOG.warn("Replace sub block not supported for class \"{}\"", this.getClass());
29: Skylot, Error, CatchClause, LOG.error("Error in debug info parser: {}", ErrorsCounter.formatErrorMsg(mth, e.getMessage()), e);
375: Skylot, warn, IfStmt, LOG.warn("Unknown array element type: {} in mth: {}", elType, mth);
106: Skylot, debug, IfStmt, LOG.debug("Not a APUT in expected new filled array: {}, method: {}", put, mth);
133: Skylot, warn, IfStmt, LOG.warn("TODO: cmp {}", insn);
212: Skylot, debug, CatchClause, LOG.debug("Can't convert string concatenation: {} insn: {}", mth, insn, e);
295: Skylot, debug, CatchClause, LOG.debug("Can't convert field arith insn: {}, mth: {}", insn, mth, e);
65: Skylot, warn, CatchClause, LOG.warn("Undo finally extract visitor, mth: {}", mth, e);
79: Skylot, error, CatchClause, LOG.error("Undo finally extract failed, mth: {}", mth, e);
328: Skylot, debug, MethodDeclaration, LOG.debug("Unexpected finally block outs count: {}", outs);
517: Skylot, warn, IfStmt, LOG.warn("Finally extract failed: remBlock pred: {}, {}, method: {}", remBlock, remBlock.getPredecessors(), mth);
79: Skylot, warn, IfStmt, LOG.warn("Unknown top splitter block from list: {}", splitters);
399: Skylot, error, IfStmt, LOG.error("Block {} not deleted, method: {}", block, mth);
59: Skylot, debug, IfStmt, LOG.debug(" Missing block: {} in {}", block, mth);
39: Skylot, warn, CatchClause, LOG.warn("Can't remove block: {} from: {}, mth: {}", block, region, mth);
63: Skylot, debug, IfStmt, LOG.debug("Stop processing blocks after 'if': {}, method: {}", info.getIfBlock(), mth);
202: Skylot, debug, IfStmt, LOG.debug(" checkArrayForEach: Wrapped insn not found: {}, mth: {}", arrGetInsn, mth);
261: Skylot, warn, IfStmt, LOG.warn(" checkIterableForEach: Wrapped insn not found: {}, mth: {}", nextCall, mth);
301: Skylot, warn, IfStmt, LOG.warn("Generic type differs: '{}' and '{}' in {}", gType, varType, mth);
365: Skylot, debug, IfStmt, LOG.debug(" LoopRegionVisitor: instruction not found: {}, mth: {}", parentInsn, mth);
70: Skylot, warn, IfStmt, LOG.warn("No exception handlers in catch block, method: {}", mth);
342: Skylot, debug, IfStmt, LOG.debug("TODO: Not found order for region {} for {}", region, u);
365: Skylot, debug, IfStmt, LOG.debug("TODO: Not found order for region {} in {}", r, regionsOrder);
81: Skylot, debug, IfStmt, LOG.debug(" Block already processed: {}, mth: {}", startBlock, mth);
730: Skylot, debug, IfStmt, LOG.debug("Unexpected case pattern, block: {}, mth: {}", s, mth);
758: Skylot, debug, IfStmt, LOG.debug("Fixing incorrect switch cases order, method: {}", mth);
761: Skylot, error, IfStmt, LOG.error("Can't fix incorrect switch cases order, method: {}", mth);
811: Skylot, warn, IfStmt, LOG.warn("Can't detect out node for switch block: {} in {}", block, mth);
917: Skylot, Error, IfStmt, LOG.debug(ErrorsCounter.formatErrorMsg(mth, "No exception handler block: " + handler));
925: Skylot, Error, IfStmt, LOG.debug(ErrorsCounter.formatErrorMsg(mth, "No successors for splitter: " + splitter));
1005: Skylot, warn, IfStmt, LOG.warn("Missing exception handler attribute for start block");
146: Skylot, warn, IfStmt, LOG.warn("Can't insert break, container: {}, block: {}, mth: {}", blockContainer, bn, mth);
166: Skylot, warn, IfStmt, LOG.warn("In synchronized method {}, top region not synchronized by 'this' {}", mth, synchInsn);
25: Skylot, Debug, IfStmt, LOG.debug("Debug enabled for {}", RegionStack.class);
56: Skylot, debug, IfStmt, LOG.debug("New RegionStack: {}", mth);
70: Skylot, debug, IfStmt, LOG.debug("Stack push: {}: {}", size(), curState);
77: Skylot, debug, IfStmt, LOG.debug("Stack  pop: {}: {}", size(), curState);
57: Skylot, warn, MethodDeclaration, LOG.warn("Phi node not removed: {}, mth: {}", phiInsn, mth);
46: Skylot, warn, IfStmt, LOG.warn("LiveVarAnalysis: out of bounds block: {}, max: {}", blockId, liveIn.length);
72: Skylot, debug, IfStmt, LOG.debug("Skip class: {}", cls);
62: Skylot, debug, MethodDeclaration, LOG.debug(" Found block: {} in regions: {}", block, regions);
74: Skylot, debug, MethodDeclaration, LOG.debug("|{}", mth);
79: Skylot, debug, MethodDeclaration, LOG.debug("{}{}", indent, region);
85: Skylot, debug, IfStmt, LOG.debug("{}{} {}", indent, container, container.getAttributesString());
104: Skylot, debug, CatchClause, LOG.debug("{} - {}", indent, insn);
102: Skylot, debug, TryStmt, LOG.debug("{} - {}", indent, insnStr);
45: Skylot, error, IfStmt, LOG.error(msg);
40: Skylot, error, IfStmt, LOG.error(msg, e);
38: Skylot, error, IfStmt, LOG.error("{}, message: {}", msg, e.getMessage());
71: Skylot, error, IfStmt, LOG.error("{} errors occurred in following nodes:", getErrorCount());
79: Skylot, error, ForeachStmt, LOG.error("  {}", err);
83: Skylot, warn, IfStmt, LOG.warn("Field {} not found in dex {}", f, dex);
36: Skylot, info, IfStmt, LOG.info("Found several 'R' class candidates: {}", candidates);
38: Skylot, warn, MethodDeclaration, LOG.warn("Unknown 'R' class, create references to '{}'", fullName);
106: Skylot, error, CatchClause, LOG.error("Close exception for {}", c, e);
157: Skylot, error, CatchClause, LOG.error("Failed read zip file: {}", file.getAbsolutePath(), e);
171: Skylot, Error, CatchClause, LOG.error("Error read zip file '{}'", file.getAbsolutePath(), e);
216: Skylot, debug, CatchClause, LOG.debug("Failed to detect filesystem case-sensitivity by file creation", e);
213: Skylot, debug, IfStmt, LOG.debug("Failed to create file: {}", caseCheckUpper.getAbsolutePath());
209: Skylot, debug, IfStmt, LOG.debug("Filesystem at {} is {}case-sensitive", testDir.getAbsolutePath(), (caseSensitive ? "" : "NOT "));
152: Skylot, error, CatchClause, LOG.error("Failed to load file: {}, error: {}", entryName, e.getMessage(), e);
170: Skylot, warn, IfStmt, LOG.warn("dx message: {}", j2d.getDxErrors());
160: Skylot, info, TryStmt, LOG.info("converting to dex: {} ...", jarFile.getName());
39: Sergey Toshin, error, CatchClause, LOG.error("Path traversal attack detected, invalid name: {}", entryName);
36: Sergey Toshin, error, TryStmt, LOG.error("Path traversal attack detected, invalid name: {}", entryName);
48: Sergey Toshin, error, IfStmt, LOG.error("Zip bomp attack detected, invalid sizes: compressed {}, uncompressed {}, name {}", compressedSize, uncompressedSize, entry.getName());
53: Skylot, error, IfStmt, LOG.error("Zip bomb attack detected, invalid sizes: compressed {}, uncompressed {}, name {}", compressedSize, uncompressedSize, entry.getName());
83: Skylot, error, CatchClause, LOG.error("Android R class loading failed", th);
59: Skylot, error, CatchClause, LOG.error("Failed to create ManifestAttributes", e);
72: Skylot, debug, MethodDeclaration, LOG.debug("Loaded android attributes count: {}", attrMap.size());
157: Skylot, debug, CatchClause, LOG.debug("Failed parse manifest number", e);
54: Skylot, error, CatchClause, LOG.error("Failed to decode 9-patch png image, path: {}", name, e);
64: Skylot, error, CatchClause, LOG.error("Failed to save image: {}", rc.getName(), e);
73: Skylot, warn, MethodDeclaration, LOG.warn("Resource '{}' not saved, unknown type", rc.getName());
368: Skylot, warn, IfStmt, LOG.warn("TODO: parse locale: 0x{}{}", Integer.toHexString(b1), Integer.toHexString(b2));
36: Skylot, error, CatchClause, LOG.error("Failed to decode Android Resource file", e);
134: Skylot, warn, SwitchStmt, LOG.warn("Unknown data type: 0x{} {}", Integer.toHexString(dataType), data);
56: Skylot, debug, MethodDeclaration, LOG.debug("Set dirs: out={}, src={}, res={}", outDir, srcDir, resDir);
61: Skylot, debug, MethodDeclaration, LOG.debug("Got dirs: out={}, src={}, res={}", args.getOutDir(), args.getOutDirSrc(), args.getOutDirRes());
30: Skylot, error, ForeachStmt, LOG.error(str);
47: Skylot, warn, IfStmt, LOG.warn("No JadxVisitor annotation for visitor: {}", pass.getClass().getName());
29: Skylot, error, CatchClause, LOG.error("Class process exception: {}", cls, e);
44: Skylot, error, MethodDeclaration, assertThat(code, containsOne("LOG.error(\"Class process exception: {}\", cls, e);"));
32: Skylot, error, CatchClause, LOG.error("Decode exception: {}", cls, e);
30: Skylot, Error, CatchClause, LOG.error("Error: {}", e.getMessage(), e);
36: Skylot, Error, CatchClause, LOG.error("Error load file: {}", file, e);
57: Skylot, error, CatchClause, LOG.error("Save interrupted", e);
55: Skylot, info, TryStmt, LOG.info("done");
71: Skylot, error, CatchClause, LOG.error("BackgroundJob.processAndWait failed", e);
79: Skylot, error, CatchClause, LOG.error("BackgroundJob.isComplete failed", e);
43: Skylot, debug, MethodDeclaration, LOG.debug("Canceling background jobs ...");
67: Skylot, error, CatchClause, LOG.error("Exception in background worker", e);
51: Skylot, debug, TryStmt, LOG.debug("Memory usage: Before decompile: {}", Utils.memoryInfo());
54: Skylot, debug, TryStmt, LOG.debug("Memory usage: Before index: {}", Utils.memoryInfo());
56: Skylot, debug, TryStmt, LOG.debug("Memory usage: After index: {}", Utils.memoryInfo());
59: Skylot, debug, TryStmt, LOG.debug("Memory usage: After gc: {}", Utils.memoryInfo());
63: Skylot, warn, IfStmt, LOG.warn("Indexing of some classes skipped, count: {}, low memory: {}", searchIndex.getSkippedCount(), Utils.memoryInfo());
86: Skylot, error, CatchClause, LOG.error("Background worker error", e);
53: Skylot, error, CatchClause, LOG.error("Index error in class: {}", cls.getFullName(), e);
55: Skylot, Error, CatchClause, LOG.error("Error load settings", e);
51: Skylot, debug, TryStmt, LOG.debug("Loaded settings: {}", makeString(settings));
67: Skylot, Error, CatchClause, LOG.error("Error store settings", e);
63: Skylot, debug, TryStmt, LOG.debug("Saving settings: {}", jsonSettings);
176: Skylot, info, IfStmt, LOG.info("Selected Font : {}", font);
165: Skylot, error, CatchClause, LOG.error("Can't get java node by offset", e);
210: Skylot, debug, CatchClause, LOG.debug("Can't center current line", e);
218: Skylot, debug, CatchClause, LOG.debug("Can't scroll to {}", line, e);
301: Skylot, error, CatchClause, LOG.error("isLinkAtOffset error", e);
218: Jan Peter Stotz, info, MethodDeclaration, String statusText = String.format(NLS.str("search_dialog.info_label"), resultsModel.getDisplayedResultsStart(), resultsModel.getDisplayedResultsEnd(), resultsModel.getResultCount());
458: Skylot, error, CatchClause, LOG.error("Waiting background tasks failed", e);
468: Skylot, error, CatchClause, LOG.error("Load task failed", e);
68: Jan Peter Stotz, error, CatchClause, LOG.error("File drop operation failed", e);
295: Skylot, error, CatchClause, LOG.error("Content loading error", e);
309: Skylot, error, IfStmt, LOG.error("Class not found in tree");
171: Skylot, error, CatchClause, LOG.error("Caret move error", e);
83: Skylot, error, CatchClause, LOG.error("Can't get line for: {}", pos, e);
59: Skylot, debug, CatchClause, LOG.debug("Jadx update error", e);
72: Skylot, debug, IfStmt, LOG.debug("Ignore check for update: development version");
95: Skylot, info, MethodDeclaration, LOG.info("Found new jadx version: {}", latest);
62: Skylot, debug, CatchClause, LOG.debug("Open url error", e);
88: Skylot, debug, CatchClause, LOG.debug("Open url error", e);
72: Skylot, warn, CatchClause, LOG.warn("Failed to index class: {}", cls, e);
