134: Alex Black, Info, IfStmt, log.warn("Info posted to RemoteUIStatsStorageRouter but router is shut down.");
137: Alex Black, warn, IfStmt, log.warn("RemoteUIStatsStorageRouter: Reached max shutdown warnings. No further warnings will be produced.");
156: Alex Black, Info, IfStmt, log.warn("Info posted to RemoteUIStatsStorageRouter but router is shut down.");
159: Alex Black, warn, IfStmt, log.warn("RemoteUIStatsStorageRouter: Reached max shutdown warnings. No further warnings will be produced.");
178: Alex Black, Info, IfStmt, log.warn("Info posted to RemoteUIStatsStorageRouter but router is shut down.");
181: Alex Black, warn, IfStmt, log.warn("RemoteUIStatsStorageRouter: Reached max shutdown warnings. No further warnings will be produced.");
210: Alex Black, error, CatchClause, log.error("Exception encountered in remote UI posting thread. Shutting down.", e);
237: Alex Black, Error, CatchClause, log.warn("Error posting to remote UI at {}, consecutive failure count = {}. Waiting {} ms before retrying", url, failureCount, nextDelayMs, e);
349: Alex Black, Error, IfStmt, log.warn("Error posting to remote UI at {}", url, e);
345: François Garillot, Error, IfStmt, log.warn("Error posting to remote UI at {} (Response code: 403)." + " Remote listener support is not enabled? use UIServer.getInstance().enableRemoteListener()", url, e);
337: François Garillot, Error, IfStmt, log.warn("Error posting to remote UI - received response code {}\tContent: {}", response, response.toString());
51: raver119, error, CatchClause, log.error("Premature end of loop!");
525: Alex Black, info, MethodDeclaration, log.info("MQAD_THREAD started on device [{}/{}]", device, Nd4j.getAffinityManager().getDeviceForCurrentThread());
600: raver119, warn, CatchClause, log.warn("Got InterruptedException...");
58: François Garillot, warn, CatchClause, log.warn("Tried multi layer config from json", e);
62: François Garillot, warn, CatchClause, log.warn("Tried keras model config", e);
66: François Garillot, warn, CatchClause, log.warn("Tried keras sequence config", e);
70: Adam Gibson, warn, CatchClause, log.warn("Tried computation graph from json");
74: Adam Gibson, warn, CatchClause, log.warn("Tried multi layer configuration from yaml");
119: Adam Gibson, warn, CatchClause, log.warn("Tried multi layer network");
123: Adam Gibson, warn, CatchClause, log.warn("Tried computation graph");
133: Adam Gibson, warn, CatchClause, log.warn("Tried multi layer network keras");
170: raver119, info, ForStmt, log.info("Epoch {} finished...", e);
203: raver119, info, ForStmt, log.info("Epoch {} finished...", e);
61: raver119, info, ForStmt, log.info("Epoch {} finished...", e);
43: Alex Black, info, ForeachStmt, log.info("Starting test: {}, {}", s, (train ? "train" : "test"));
56: raver119, info, BlockStmt, log.info("Local maxima: {}", localMaxima);
57: raver119, info, BlockStmt, log.info("Local maxima: {}", localMaxima);
428: Alex Black, info, MethodDeclaration, log.info("EarlyStopping: onStart called");
434: François Garillot, info, MethodDeclaration, log.info("EarlyStopping: onEpoch called (epochNum={}, score={}}", epochNum, score);
440: François Garillot, info, MethodDeclaration, log.info("EarlyStopping: onCompletion called (result: {})", esResult);
451: Alex Black, info, ForeachStmt, log.info("Metric: " + metric);
494: Alex Black, info, ForeachStmt, log.info("Metric: " + metric);
537: Alex Black, info, ForeachStmt, log.info("Metric: " + metric);
629: Alex Black, info, ForeachStmt, log.info("Metric: " + metric);
261: Alex Black, info, MethodDeclaration, log.info("EarlyStopping: onStart called");
267: François Garillot, info, MethodDeclaration, log.info("EarlyStopping: onEpoch called (epochNum={}, score={}}", epochNum, score);
273: François Garillot, info, MethodDeclaration, log.info("EarlyStopping: onCompletion called (result: {})", esResult);
286: Alex Black, info, ForeachStmt, log.info("Metric: " + metric);
331: Alex Black, info, ForeachStmt, log.info("Metric: " + metric);
376: Alex Black, info, ForeachStmt, log.info("Metric: " + metric);
473: Alex Black, info, ForeachStmt, log.info("Metric: " + metric);
121: maxpumperla, info, IfStmt, log.info(msg);
123: maxpumperla, info, ForStmt, log.info("Layer " + j + " # params: " + net.getLayer(j).numParams());
455: Alex Black, info, ForeachStmt, log.info("params before learning: " + netGraph.getLayer(1).paramTable());
482: Alex Black, info, ForeachStmt, log.info("params after learning: " + netGraph.getLayer(1).paramTable());
161: Alex Black, info, ForStmt, log.info(" ***** Starting test: {} *****", testName);
323: Alex Black, info, ForStmt, log.info(" ***** Starting test: {} *****", testName);
553: Alex Black, info, ForStmt, log.info(" ***** Starting test: {} *****", testName);
659: Alex Black, info, ForeachStmt, log.info("Workspace mode: " + ws);
345: Alex Black, info, ForeachStmt, log.info("*** Testing workspace: " + ws);
434: Alex Black, info, ForeachStmt, log.info("*** Testing workspace: " + ws);
45: Alex Black, info, ForeachStmt, log.info("*** Starting workspace mode: " + wsm);
140: Alex Black, info, ForeachStmt, log.info("*** Starting workspace mode: " + wsm);
240: Alex Black, info, ForeachStmt, log.info("*** Starting workspace mode: " + wsm);
301: Alex Black, info, ForeachStmt, log.info("*** Starting workspace mode: " + wsm);
363: Alex Black, info, ForeachStmt, log.info("*** Starting workspace mode: " + wsm);
486: Alex Black, info, ForeachStmt, log.info("*** Starting workspace mode: " + wsm);
100: Alex Black, info, ForeachStmt, log.info("Starting test: " + msg);
73: Alex Black, info, ForeachStmt, log.info("Starting test - " + a);
137: Alex Black, info, ForeachStmt, log.info("Starting test - " + a);
212: Alex Black, info, ForeachStmt, log.info("Starting test - " + a);
336: François Garillot, info, IfStmt, log.info("Input (" + j + "," + i + ") passed: grad= " + backpropGrad + ", numericalGrad= " + numericalGrad + ", relError= " + relError);
330: François Garillot, info, IfStmt, log.info("Input (" + j + "," + i + ") FAILED: grad= " + backpropGrad + ", numericalGrad= " + numericalGrad + ", relError= " + relError + ", scorePlus=" + scorePlus + ", scoreMinus= " + scoreMinus);
325: François Garillot, info, IfStmt, log.info("Input (" + j + "," + i + ") passed: grad= " + backpropGrad + ", numericalGrad= " + numericalGrad + ", relError= " + relError + "; absolute error = " + absError + " < minAbsoluteError = " + minAbsoluteError);
50: Alex Black, info, ForeachStmt, log.info("Starting test: {}", wm);
375: Alex Black, info, ForeachStmt, log.info("WorkspaceMode = " + ws);
90: kirill, info, MethodDeclaration, log.info(ev.stats());
191: Adam Gibson, info, MethodDeclaration, log.info("Score " + eval.stats());
235: fartovii, info, MethodDeclaration, log.info("Load data....");
244: fartovii, info, MethodDeclaration, log.info("Build model....");
265: fartovii, info, MethodDeclaration, log.info("Train model....");
280: fartovii, info, MethodDeclaration, log.info("Compare feedForward results with selectedActivation");
287: fartovii, info, MethodDeclaration, log.info("Decode results: " + decodeResults.columns() + " " + decodeResults);
288: fartovii, info, MethodDeclaration, log.info("Comparable  results: " + comparableResult.get(10).columns() + " " + comparableResult.get(10));
1092: Alex Black, info, ForeachStmt, log.info("Workspace mode: " + ws);
59: eraly, info, ForStmt, log.info(i + "\t" + v.getVertexName());
72: eraly, info, ForeachStmt, log.info(name + "\t frozen: " + (l instanceof FrozenLayer));
258: eraly, info, MethodDeclaration, log.info(modelNow.summary());
259: eraly, info, MethodDeclaration, log.info(modelNow.summary(InputType.feedForward(2), InputType.feedForward(2)));
182: eraly, info, MethodDeclaration, log.info(modelIdentical.summary());
183: eraly, info, MethodDeclaration, log.info(helper.unfrozenGraph().summary());
72: Adam Gibson, info, BlockStmt, logger.info("Passed {} datasets...", count.get());
153: raver119, info, MethodDeclaration, log.info("Checking first device...");
161: raver119, info, IfStmt, log.info("Checking second device...");
172: raver119, info, IfStmt, log.info("Checking first device...");
169: raver119, info, IfStmt, log.info("Checking third device...");
187: raver119, info, IfStmt, log.info("Checking first device...");
184: raver119, info, IfStmt, log.info("Checking second device...");
180: raver119, info, IfStmt, log.info("Checking fourth device...");
69: raver119, info, ForeachStmt, log.info("Parallel: {} ns; Simple: {} ns", times.getFirst(), times.getSecond());
118: Samuel Audet, warn, IfStmt, log.warn("Cannot allocate " + size + " bytes of device memory (CUDA error = " + error + "), proceeding with host memory");
197: Samuel Audet, warn, IfStmt, log.warn("Not supported: DataBuffer.Type.HALF");
107: Samuel Audet, warn, IfStmt, log.warn("Not supported: eps < CUDNN_BN_MIN_EPSILON (" + eps + " < " + CUDNN_BN_MIN_EPSILON + ")");
104: Samuel Audet, warn, IfStmt, log.warn("Not supported: n < CUDNN_LRN_MIN_N (" + n + " < " + CUDNN_LRN_MIN_N + ")");
108: Samuel Audet, warn, IfStmt, log.warn("Not supported: n > CUDNN_LRN_MAX_N (" + n + " > " + CUDNN_LRN_MAX_N + ")");
112: Samuel Audet, warn, IfStmt, log.warn("Not supported: k < CUDNN_LRN_MIN_K (" + k + " < " + CUDNN_LRN_MIN_K + ")");
116: Samuel Audet, warn, IfStmt, log.warn("Not supported: beta < CUDNN_LRN_MIN_BETA (" + beta + " < " + CUDNN_LRN_MIN_BETA + ")");
181: Samuel Audet, warn, IfStmt, log.warn("Not supported: Gate activation functions != ActivationSigmoid");
185: Samuel Audet, warn, IfStmt, log.warn("Not supported: Layer activation functions != ActivationTanH");
189: Samuel Audet, warn, IfStmt, log.warn("Not supported: LSTM layers with peephole connections");
151: Alex Black, info, MethodDeclaration, log.info("Downloading {}...", getName());
189: Alex Black, Error, CatchClause, log.warn("Error extracting MNIST files from file {} - retrying...", f.getAbsolutePath(), t);
209: François Garillot, info, MethodDeclaration, log.info("gunzip'ing File: " + gzFile.toString());
212: François Garillot, info, MethodDeclaration, log.info("Here is the standard error of the command (if any):\n");
215: François Garillot, info, WhileStmt, log.info(s);
51: crockpotveggies, info, IfStmt, log.info("Using cached dataset at " + cachedFile.toString());
48: crockpotveggies, info, IfStmt, log.info("Downloading dataset to " + tmpFile.getAbsolutePath());
55: crockpotveggies, info, IfStmt, log.info("Verifying download...");
59: Samuel Audet, info, IfStmt, log.info("Checksum local is " + localChecksum + ", expecting " + expectedChecksum(set));
62: crockpotveggies, error, IfStmt, log.error("Checksums do not match. Cleaning up files and failing...");
338: raver119, error, CatchClause, log.error("Premature end of loop!");
472: raver119, debug, IfStmt, log.debug("Manually destroying ADSI workspace");
260: raver119, error, CatchClause, log.error("Premature end of loop!");
402: raver119, debug, IfStmt, log.debug("Manually destroying AMDSI workspace");
54: raver119, warn, ConstructorDeclaration, log.warn("IteratorSplitter is used: please ensure you don't use randomization/shuffle in underlying iterator!");
59: raver119, warn, ConstructorDeclaration, log.warn("IteratorSplitter is used: please ensure you don't use randomization/shuffle in underlying iterator!");
257: Adam Gibson, info, IfStmt, log.info("Epoch " + epochs + ", number of batches completed " + lastBatch);
67: raver119, debug, ConstructorDeclaration, log.debug("Files found: {}; Producers: {}", files.size(), numProducers);
46: raver119, WARN, BlockStmt, log.error("WARNING: number of splits doesn't match number of devices!");
83: Alex Black, info, MethodDeclaration, log.info("Initializing: Creating Huffman tree and lookup table...");
88: Alex Black, info, MethodDeclaration, log.info("Initialization complete");
166: François Garillot, info, IfStmt, log.info("Processed {} random walks on graph", iter);
46: François Garillot, info, MethodDeclaration, log.info("Wrote {} vectors of length {} to: {}", nVertices, vectorSize, path);
221: Adam Gibson, info, TryStmt, log.info("Calculating probabilities of data similarities...");
224: Adam Gibson, info, BlockStmt, log.info("Handled " + i + " records");
509: Adam Gibson, debug, IfStmt, log.debug("theta == 0, using decomposed version, might be slow");
102: raver119, debug, MethodDeclaration, logger.debug("Y:Shape is = " + Arrays.toString(Y.shape()));
124: raver119, debug, ForStmt, logger.debug("PQ shape is: " + Arrays.toString(PQ.shape()));
125: raver119, debug, ForStmt, logger.debug("PQ.sum(1) shape is: " + Arrays.toString(PQ.sum(1).shape()));
151: François Garillot, info, ForStmt, logger.info("Iteration [" + i + "] error is: [" + cost + "]");
253: raver119, debug, MethodDeclaration, logger.debug("sumX shape: " + Arrays.toString(sumX.shape()));
257: raver119, debug, MethodDeclaration, logger.debug("times shape: " + Arrays.toString(times.shape()));
261: raver119, debug, MethodDeclaration, logger.debug("prodSum shape: " + Arrays.toString(prodSum.shape()));
267: raver119, info, MethodDeclaration, logger.info("Calculating probabilities of data similarities...");
268: raver119, debug, MethodDeclaration, logger.debug("Tolerance: " + tolerance);
271: François Garillot, info, BlockStmt, logger.info("Handled [" + i + "] records out of [" + n + "]");
310: raver119, info, MethodDeclaration, logger.info("Mean value of sigma " + sqrt(beta.rdiv(1)).mean(Integer.MAX_VALUE));
318: maxpumperla, info, CatchClause, log.info(e.getMessage());
334: François Garillot, warn, BlockStmt, log.warn("Model cannot be trained: output vertex " + layer.getLayerName() + " is not an IOutputLayer (no loss function specified)");
326: François Garillot, warn, BlockStmt, log.warn("Model cannot be trained: output layer " + layer.getLayerName() + " is not an IOutputLayer (no loss function specified)");
345: François Garillot, warn, BlockStmt, log.warn("Model cannot be trained: output " + layer.getLayerName() + " is not an IOutputLayer (no loss function specified)");
101: turambar, warn, BlockStmt, log.warn("Keras Input layer does not accept inputs (received " + inputType.length + "). Ignoring.");
126: maxpumperla, warn, SwitchStmt, log.warn("Couldn't determine dim ordering / data format from model file. Older Keras " + "versions may come without specified backend, in which case we assume the model was " + "built with theano.");
67: turambar, warn, CatchClause, log.warn("Unsupported Keras loss function. Replacing with MSE.");
154: François Garillot, warn, IfStmt, log.warn("Attemping to set weights for unknown parameters: " + unknownParamNames.substring(1, unknownParamNames.length() - 1));
227: Max Pumperla, warn, IfStmt, log.warn("Attemping to set weights for unknown parameters: " + unknownParamNames.substring(1, unknownParamNames.length() - 1));
93: Max Pumperla, warn, IfStmt, log.warn("Specifying different initialization for depth- and point-wise  weights not supported.");
165: François Garillot, warn, IfStmt, log.warn("Attemping to set weights for unknown parameters: " + unknownParamNames.substring(1, unknownParamNames.length() - 1));
85: Martin Boyanov, warn, BlockStmt, log.warn("Masking in keras and DL4J work differently. We do not completely support mask_zero flag " + "on Embedding layers. Zero Masking for the Embedding layer only works with unidirectional LSTM for now." + " If you want to have this behaviour for your imported model " + "in DL4J, apply masking as a pre-processing step to your input." + "See https://deeplearning4j.org/usingrnns#masking for more on this.");
173: François Garillot, warn, IfStmt, log.warn("Attemping to set weights for unknown parameters: " + unknownParamNames.substring(1, unknownParamNames.length() - 1));
98: Max Pumperla, Warn, BlockStmt, log.warn("Warning: batch normalization axis " + batchNormAxis + "DL4J currently picks batch norm dimensions for you, according to industry" + "standard conventions. If your results do not match, please file an issue.");
190: maxpumperla, warn, IfStmt, log.warn("Attempting to set weights for unknown parameters: " + unknownParamNames.substring(1, unknownParamNames.length() - 1));
240: turambar, warn, BlockStmt, log.warn("Regularization for BatchNormalization gamma parameter not supported...ignoring.");
269: turambar, warn, BlockStmt, log.warn("Regularization for BatchNormalization beta parameter not supported...ignoring.");
451: François Garillot, warn, IfStmt, log.warn("Attemping to set weights for unknown parameters: " + unknownParamNames.substring(1, unknownParamNames.length() - 1));
513: François Garillot, warn, IfStmt, log.warn("Unsupported LSTM forget gate bias initialization: " + kerasForgetBiasInit + " (using 1 instead)");
238: Max Pumperla, warn, IfStmt, log.warn("Attemping to set weights for unknown parameters: " + unknownParamNames.substring(1, unknownParamNames.length() - 1));
154: Max Pumperla, warn, BlockStmt, log.warn("Scaled identity weight init not supported, setting scale=1");
143: Max Pumperla, warn, BlockStmt, log.warn("Scaled identity weight init not supported, setting scale=1");
137: Max Pumperla, warn, BlockStmt, log.warn("Scaled identity weight init not supported, setting gain=1");
230: Max Pumperla, warn, IfStmt, log.warn("Unknown weight initializer " + kerasInit + " (Using XAVIER instead).");
140: Max Pumperla, warn, BlockStmt, log.warn("Ignoring unknown regularization field " + field);
412: Max Pumperla, warn, IfStmt, log.warn("Keras layer has unknown Keras dimension order: " + dimOrder);
100: Max Pumperla, warn, IfStmt, log.warn("Could not read keras version used (no " + config.getFieldKerasVersion() + " field found) \n" + "assuming keras version is 1.0.7 or earlier.");
131: Max Pumperla, warn, IfStmt, log.warn("Could not read keras backend used (no " + config.getFieldBackend() + " field found) \n");
250: maxpumperla, Warn, CatchClause, log.warn(emptyWeightsWarning);
58: crockpotveggies, info, IfStmt, log.info("Downloading model to " + cachedKerasFile.toString());
68: Max Pumperla, info, MethodDeclaration, log.info(serializedModel.summary());
513: turambar, info, MethodDeclaration, log.info(label + ": " + a.equalsWithEps(b, eps) + ", " + min + ", " + max);
569: Max Pumperla, info, MethodDeclaration, log.info("Num params: " + net.numParams());
31: maxpumperla, info, ForeachStmt, log.info("***** Successfully imported " + densePath);
35: maxpumperla, info, ForeachStmt, log.info("***** Successfully imported " + conv2dPath);
40: maxpumperla, info, IfStmt, log.info("***** Successfully imported " + conv1dFlattenPath);
45: maxpumperla, info, ForeachStmt, log.info("***** Successfully imported " + lstmPath);
49: maxpumperla, info, ForeachStmt, log.info("***** Successfully imported " + embeddingLstmPath);
55: maxpumperla, info, IfStmt, log.info("***** Successfully imported " + embeddingConv1dExtendedPath);
61: maxpumperla, info, IfStmt, log.info("***** Successfully imported " + embeddingConv1dPath);
66: maxpumperla, info, ForeachStmt, log.info("***** Successfully imported " + simpleRnnPath);
74: maxpumperla, info, ForeachStmt, log.info("***** Successfully imported " + batchToConv2dPath);
79: maxpumperla, info, IfStmt, log.info("***** Successfully imported " + simpleSpaceToBatchPath);
85: maxpumperla, info, IfStmt, log.info("***** Successfully imported " + graphSpaceToBatchPath);
151: maxpumperla, info, MethodDeclaration, log.info(Arrays.toString(output[0].shape()));
62: Alex Black, Error, CatchClause, log.error("Error in NearestNeighboursServer parameters", e);
65: Alex Black, error, CatchClause, log.error("Usage: {}", sb.toString());
70: Alex Black, error, BlockStmt, log.error("Json path parameter is missing (null)");
81: Alex Black, Error, CatchClause, log.error("Error in NearestNeighboursServer run method", t);
95: Alex Black, info, ForStmt, log.info("Loading shape {} of {}; Shape: [{} x {}]", i + 1, pathArr.length, Shape.size(shape, 0), Shape.size(shape, 1));
124: Alex Black, info, ForStmt, log.info("Loading chunk {} of {}", i + 1, pathArr.length);
154: Alex Black, Error, CatchClause, log.error("Error in POST /knn", e);
199: Alex Black, Error, CatchClause, log.error("Error in POST /knnnew", e);
227: Alex Black, info, IfStmt, log.info("Attempting to stop server");
116: François Garillot, info, WhileStmt, log.info("Completed clustering iteration {}", ++iterationCount);
134: François Garillot, info, MethodDeclaration, log.info("Generating initial clusters");
400: Adam Gibson, warn, BlockStmt, log.warn("Called fill already");
396: Adam Gibson, trace, ForStmt, log.trace("Inserted " + i);
58: Adam Gibson, info, CatchClause, log.info("Unchecked exception thrown by task", e);
146: raver119, info, IfStmt, log.info("Initializing syn1...");
263: Alex Black, Error, CatchClause, log.warn("Error posting to remote UI at {}", uri, e);
259: François Garillot, Error, IfStmt, log.warn("Error posting to remote UI - received response code {}\tContent: {}", response, response.toString());
737: François Garillot, info, IfStmt, log.info("Skipping syn1 merge");
742: François Garillot, info, IfStmt, log.info("Skipping syn1Neg merge");
75: raver119, info, IfStmt, logger.info("Initializing syn1Neg...");
70: raver119, info, MethodDeclaration, log.info("GloVe finalizer...");
163: François Garillot, info, ForStmt, log.info("Processed [" + pairsCount.get() + "] pairs, Error was [" + errorCounter.getCount(i) + "]");
288: Adam Gibson, info, IfStmt, log.info("Processed [" + pairsCounter.get() + "] word pairs so far...");
86: raver119, info, IfStmt, log.info("Initializing syn1Neg...");
193: Adam Gibson, trace, ForStmt, log.trace("Loading " + word + " with word " + i);
346: Alex Black, debug, TryStmt, log.debug("Saving header: {}", str);
1358: Adam Gibson, info, MethodDeclaration, log.info("Word2Vec conf. JSON: " + confJson);
1523: François Garillot, debug, MethodDeclaration, log.debug("Saving header: {}", str);
1549: Adam Gibson, info, MethodDeclaration, log.info("Wrote " + words + " with size of " + vec.lookupTable().layerSize());
1621: raver119, debug, IfStmt, log.debug("Skipping first line");
1809: Alex Black, info, TryStmt, log.info("Wrote " + words + " with size of " + vec.lookupTable().layerSize());
1849: Alex Black, info, TryStmt, log.info("Wrote " + words + " with size of " + vec.lookupTable().layerSize());
2343: raver119, debug, TryStmt, log.debug("Trying binary model restoration...");
2335: raver119, debug, TryStmt, log.debug("Trying CSV model restoration...");
2228: raver119, debug, IfStmt, log.debug("Trying simplified model restoration...");
2314: raver119, error, IfStmt, log.error("Can't build syn0 table");
2218: raver119, debug, IfStmt, log.debug("Trying full model restoration...");
2407: raver119, error, CatchClause, log.error("Can't instantiate saved TokenizerFactory: {}", configuration.getTokenizerFactory());
2512: raver119, debug, CatchClause, log.debug("Trying BinaryReader...");
2489: raver119, debug, TryStmt, log.debug("Trying CSVReader...");
2447: raver119, debug, TryStmt, log.debug("Trying DL4j format...");
2702: Alex Black, info, MethodDeclaration, OneTimeLogger.info(log, "Projected memory use for model: [{} {}]", String.format("%.2f", value), sfx);
66: François Garillot, debug, IfStmt, log.debug("LABELS: " + label1 + ": " + (label1 == null ? "null" : EXISTS) + ";" + label2 + " vec2:" + (label2 == null ? "null" : EXISTS));
72: raver119, debug, IfStmt, log.debug("Unknown token 1 requested: [{}]", label1);
77: raver119, debug, IfStmt, log.debug("Unknown token 2 requested: [{}]", label2);
86: François Garillot, debug, IfStmt, log.debug(label1 + ": " + (vec1 == null ? "null" : EXISTS) + ";" + label2 + " vec2:" + (vec2 == null ? "null" : EXISTS));
126: Adam Gibson, info, MethodDeclaration, logger.info("CoOccurrences map was built.");
145: Adam Gibson, error, CatchClause, logger.error("Target file was not found on last stage!");
271: François Garillot, info, MethodDeclaration, logger.info("Actual memory limit: [" + this.maxmemory + "]");
347: Mike Jensen, debug, IfStmt, logger.debug("Memory consuimption > threshold: {footrpint: [" + getMemoryFootprint() + "], threshold: [" + getMemoryThreshold() + "] }");
463: Adam Gibson, debug, MethodDeclaration, logger.debug("Memory purge started.");
503: François Garillot, debug, TryStmt, logger.debug("Saving to: [" + counter.get() + "], Reading from: [" + counter.previous() + "]");
519: Adam Gibson, debug, TryStmt, logger.debug("Lines read: [" + linesRead + "]");
611: Adam Gibson, info, MethodDeclaration, logger.info("Number of word pairs saved so far: [" + numberOfLinesSaved + "]");
228: raver119, info, IfStmt, log.info("Creating new PV-DM learner...");
475: François Garillot, debug, ForeachStmt, log.debug("Similarity inside: [" + s + "] -> " + sim);
514: raver119, info, IfStmt, log.info("Document passed to nearestLabels() has no matches in model vocabulary");
551: raver119, warn, IfStmt, log.warn("Labels list is empty!");
133: Adam Gibson, info, IfStmt, log.info("Starting vocabulary building...");
152: Adam Gibson, warn, IfStmt, log.warn("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
153: Adam Gibson, warn, IfStmt, log.warn("!                                                                                       !");
154: Adam Gibson, warn, IfStmt, log.warn("! Your input looks malformed: number of sentences is too low, model accuracy may suffer !");
155: Adam Gibson, warn, IfStmt, log.warn("!                                                                                       !");
156: Adam Gibson, warn, IfStmt, log.warn("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!");
119: Adam Gibson, info, IfStmt, log.info("Merging existing vocabulary into the current one...");
166: raver119, info, IfStmt, log.info("Building learning algorithms:");
168: François Garillot, info, IfStmt, log.info("          building ElementsLearningAlgorithm: [" + elementsLearningAlgorithm.getCodeName() + "]");
174: François Garillot, info, IfStmt, log.info("          building SequenceLearningAlgorithm: [" + sequenceLearningAlgorithm.getCodeName() + "]");
182: François Garillot, info, IfStmt, log.info("          building ElementsLearningAlgorithm: [" + elementsLearningAlgorithm.getCodeName() + "]");
231: raver119, info, IfStmt, log.info("Using precise weights init...");
279: Adam Gibson, info, MethodDeclaration, log.info("Starting learning process...");
328: Alex Black, info, ForStmt, log.info("Epoch [" + currentEpoch + "] finished; Elements processed so far: [" + wordsCounter.get() + "];  Sequences processed: [" + linesCounter.get() + "]");
339: raver119, info, MethodDeclaration, log.info("Time spent on training: {} ms", System.currentTimeMillis() - timeSpent.get());
448: raver119, error, CatchClause, log.error("Got {} trying to instantiate ModelUtils, falling back to BasicModelUtils instead");
1206: François Garillot, info, IfStmt, log.info("Epoch: [{}]; Words vectorized so far: [{}];  Lines vectorized so far: [{}]; Seq/sec: [{}]; Words/sec: [{}]; learningRate: [{}]", this.epochNumber, this.wordsCounter.get(), this.totalLines.get(), String.format("%.2f", seqSec), String.format("%.2f", wordsSecTotal), alpha);
57: raver119, debug, IfStmt, log.debug("Calling shuffle() on entries...");
236: Adam Gibson, debug, IfStmt, logger.debug("Calling shuffle() on entries...");
48: Adam Gibson, info, BlockStmt, logger.info("Average score for last batch: {}", sequenceVectors.getElementsScore());
49: François Garillot, info, MethodDeclaration, logger.info("Invocation: {}, similarity: {}", cnt, similarity);
60: Adam Gibson, error, CatchClause, log.error("Direct serialization failed, falling back to jackson");
39: Adam Gibson, info, MethodDeclaration, log.info("Building Huffman tree for source graph...");
151: François Garillot, info, CatchClause, logger.info("Words size: [" + words.size() + "], a: [" + a + "], b: [" + b + "], i: [" + i + "], points size: [" + words.get(a).getPoints().size() + "]");
268: François Garillot, debug, IfStmt, log.debug("LABELS: " + label1 + ": " + (label1 == null ? "null" : "exists") + ";" + label2 + " vec2:" + (label2 == null ? "null" : "exists"));
277: François Garillot, debug, IfStmt, log.debug(label1 + ": " + (vec1 == null ? "null" : "exists") + ";" + label2 + " vec2:" + (vec2 == null ? "null" : "exists"));
69: François Garillot, error, BlockStmt, log.error("Please call setTokenizerFactory() prior to setSentenceIter() call.");
123: Adam Gibson, info, MethodDeclaration, log.info("Vocab size before labels: " + cache.numWords());
155: Adam Gibson, info, MethodDeclaration, log.info("Vocab size after labels: " + cache.numWords());
180: Adam Gibson, debug, MethodDeclaration, log.debug("Target vocab size before building: [" + cache.numWords() + "]");
196: François Garillot, debug, ForeachStmt, log.debug("Trying source iterator: [" + cnt + "]");
197: Adam Gibson, debug, ForeachStmt, log.debug("Target vocab size before building: [" + cache.numWords() + "]");
251: François Garillot, info, IfStmt, log.info("Sequences checked: [{}]; Current vocabulary size: [{}]; Sequences/sec: {}; Words/sec: {};", seqCount.get(), tempHolder.numWords(), String.format("%.2f", seqPerSec), String.format("%.2f", elPerSec));
266: raver119, info, IfStmt, log.info("Starting scavenger...");
282: raver119, debug, ForeachStmt, log.debug("Waiting till all processes stop...");
289: François Garillot, debug, ForeachStmt, log.debug("Vocab size before truncation: [" + tempHolder.numWords() + "],  NumWords: [" + tempHolder.totalWordOccurrences() + "], sequences parsed: [" + seqCount.get() + "], counter: [" + parsedCount.get() + "]");
296: François Garillot, debug, ForeachStmt, log.debug("Vocab size after truncation: [" + tempHolder.numWords() + "],  NumWords: [" + tempHolder.totalWordOccurrences() + "], sequences parsed: [" + seqCount.get() + "], counter: [" + parsedCount.get() + "]");
315: raver119, info, IfStmt, log.info("Adding UNK element to vocab...");
354: François Garillot, info, MethodDeclaration, log.info("Sequences checked: [{}], Current vocabulary size: [{}]; Sequences/sec: [{}];", seqCount.get(), cache.numWords(), String.format("%.2f", seqPerSec));
371: raver119, debug, MethodDeclaration, log.debug("Scavenger: Words before: {}; Words after: {};", numWords, cache.numWords());
86: Adam Gibson, info, ConstructorDeclaration, logger.info("Init from VocabCache is complete. " + numWords() + " word(s) were transferred.");
317: François Garillot, debug, ForeachStmt, logger.debug("Current state> Activation: [" + activation + "], retention info: " + Arrays.toString(word.getFrequencyShift()));
337: François Garillot, info, MethodDeclaration, logger.info("Scavenger was activated. Vocab size before: [" + initialSize + "],  after: [" + vocabulary.size() + "]");
373: François Garillot, debug, MethodDeclaration, logger.debug("Truncating vocabulary to minWordFrequency: [" + threshold + "]");
422: raver119, info, MethodDeclaration, log.info("Updated counter: [" + totalWordCount.get() + "]");
92: François Garillot, Error, CatchClause, log.warn("Error reading input stream...this is just a warning..Going to return", e);
72: François Garillot, info, MethodDeclaration, log.info("Tokens size: [" + tokens.size() + "], position: [" + position.get() + "]");
146: Adam Gibson, info, MethodDeclaration, log.info("Starting prebuffering...");
150: François Garillot, info, MethodDeclaration, log.info("Tokens prefetch finished. Tokens size: [" + tokens.size() + "]");
85: Adam Gibson, info, MethodDeclaration, log.info("Labels used: " + vectorizer.getLabelsSource().getLabels());
90: Adam Gibson, info, MethodDeclaration, log.info("Transformed array: " + array);
106: Adam Gibson, info, MethodDeclaration, log.info("Labels array: " + labelz);
85: Adam Gibson, info, MethodDeclaration, log.info("Labels used: " + vectorizer.getLabelsSource().getLabels());
93: Adam Gibson, info, MethodDeclaration, log.info("TF-IDF vector: " + Arrays.toString(vector.data().asDouble()));
158: raver119, info, MethodDeclaration, log.info("Fitting vectorizer...");
183: raver119, info, MethodDeclaration, log.info("Fitting vectorizer...");
45: Adam Gibson, info, MethodDeclaration, log.info("Flat model results:");
63: Adam Gibson, info, MethodDeclaration, log.info("Transpose model results:");
67: Adam Gibson, info, MethodDeclaration, log.info("Transpose model results 2:");
71: Adam Gibson, info, MethodDeclaration, log.info("Transpose model results 3:");
86: Adam Gibson, info, MethodDeclaration, log.info("Tree model results:");
79: Adam Gibson, info, MethodDeclaration, log.info("CoOccurrences: " + list);
106: Adam Gibson, info, MethodDeclaration, log.info("Day/night similarity: " + simD);
107: Adam Gibson, info, MethodDeclaration, log.info("Best/police similarity: " + simP);
110: Adam Gibson, info, MethodDeclaration, log.info("Nearest words to 'day': " + words);
70: Adam Gibson, info, MethodDeclaration, log.info("Object received: " + r1);
74: Adam Gibson, info, MethodDeclaration, log.info("Object received: " + r1);
127: Adam Gibson, info, MethodDeclaration, log.info("Object received: " + r1);
131: Adam Gibson, info, MethodDeclaration, log.info("Object received: " + r1);
135: Adam Gibson, info, MethodDeclaration, log.info("Object received: " + r1);
141: Adam Gibson, info, MethodDeclaration, log.info("Number of lines in corpus: " + numberOfLines);
220: Adam Gibson, info, MethodDeclaration, log.info("day/night similarity: " + similarityD);
223: Adam Gibson, info, IfStmt, log.info("Day: " + Arrays.toString(vec.getWordVectorMatrix("day").dup().data().asDouble()));
224: Adam Gibson, info, IfStmt, log.info("Night: " + Arrays.toString(vec.getWordVectorMatrix("night").dup().data().asDouble()));
231: Adam Gibson, info, MethodDeclaration, log.info("way/work similarity: " + similarityW);
234: Adam Gibson, info, MethodDeclaration, log.info("house/world similarity: " + similarityH);
237: Adam Gibson, info, MethodDeclaration, log.info("case/way similarity: " + similarityC);
240: Adam Gibson, info, MethodDeclaration, log.info("9835/12492 similarity: " + similarity1);
244: Adam Gibson, info, MethodDeclaration, log.info("3720/16392 similarity: " + similarity2);
248: Adam Gibson, info, MethodDeclaration, log.info("6347/3720 similarity: " + similarity3);
253: Adam Gibson, info, MethodDeclaration, log.info("3720/9852 similarity: " + similarityX);
305: raver119, info, MethodDeclaration, log.info("Cos O/A: {}", cosAO1);
306: raver119, info, MethodDeclaration, log.info("Cos A/B: {}", cosAB1);
332: raver119, info, MethodDeclaration, log.info("Cos A2/B2: {}", cosAB2);
333: raver119, info, MethodDeclaration, log.info("Cos A1/A2: {}", cosAAX);
334: raver119, info, MethodDeclaration, log.info("Cos O/A2: {}", cosAO2);
335: raver119, info, MethodDeclaration, log.info("Cos C2/A2: {}", cosAC2);
337: raver119, info, MethodDeclaration, log.info("Vector: {}", Arrays.toString(inferredA1.data().asFloat()));
339: raver119, info, MethodDeclaration, log.info("cosAO2: {}", cosAO2);
377: François Garillot, info, MethodDeclaration, log.info("day/night similariry: {}", simDN);
380: Adam Gibson, info, MethodDeclaration, log.info("9835/12492 similarity: " + similarity1);
384: Adam Gibson, info, MethodDeclaration, log.info("3720/16392 similarity: " + similarity2);
388: Adam Gibson, info, MethodDeclaration, log.info("6347/3720 similarity: " + similarity3);
392: Adam Gibson, info, MethodDeclaration, log.info("3720/9852 similarity: " + similarityX);
405: raver119, info, MethodDeclaration, log.info("Cos O/A: {}", cosAO1);
406: raver119, info, MethodDeclaration, log.info("Cos A/B: {}", cosAB1);
441: François Garillot, info, MethodDeclaration, log.info("day/night similariry: {}", simDN);
444: raver119, info, MethodDeclaration, log.info("9835/12492 similarity: " + similarity1);
448: raver119, info, MethodDeclaration, log.info("3720/16392 similarity: " + similarity2);
452: raver119, info, MethodDeclaration, log.info("6347/3720 similarity: " + similarity3);
456: raver119, info, MethodDeclaration, log.info("3720/9852 similarity: " + similarityX);
468: raver119, info, MethodDeclaration, log.info("A: {}", Arrays.toString(inferredA1.data().asFloat()));
469: raver119, info, MethodDeclaration, log.info("C: {}", Arrays.toString(inferredC1.data().asFloat()));
478: raver119, info, MethodDeclaration, log.info("Cos O/A: {}", cosAO1);
479: raver119, info, MethodDeclaration, log.info("Cos A/B: {}", cosAB1);
480: raver119, info, MethodDeclaration, log.info("Cos A/C: {}", cosAC1);
481: raver119, info, MethodDeclaration, log.info("Cos C/D: {}", cosCD1);
529: Adam Gibson, info, MethodDeclaration, log.info("day/night similarity: " + similarityD);
532: Adam Gibson, info, MethodDeclaration, log.info("way/work similarity: " + similarityW);
535: Adam Gibson, info, MethodDeclaration, log.info("house/world similarity: " + similarityH);
538: Adam Gibson, info, MethodDeclaration, log.info("case/way similarity: " + similarityC);
541: Adam Gibson, info, MethodDeclaration, log.info("9835/12492 similarity: " + similarity1);
545: Adam Gibson, info, MethodDeclaration, log.info("3720/16392 similarity: " + similarity2);
549: Adam Gibson, info, MethodDeclaration, log.info("6347/3720 similarity: " + similarity3);
555: Adam Gibson, info, MethodDeclaration, log.info("3720/9852 similarity: " + similarityX);
561: Adam Gibson, info, MethodDeclaration, log.info("1/2: " + sim119 + "/" + sim120);
607: Adam Gibson, info, MethodDeclaration, log.info("Mean" + Arrays.toString(mean.dup().data().asDouble()));
608: Adam Gibson, info, MethodDeclaration, log.info("Array" + Arrays.toString(vec.lookupTable().vector("negative").dup().data().asDouble()));
611: Adam Gibson, info, MethodDeclaration, log.info("Similarity negative: " + simN);
615: Adam Gibson, info, MethodDeclaration, log.info("Similarity neutral: " + simP);
618: Adam Gibson, info, MethodDeclaration, log.info("Similarity positive: " + simV);
684: Adam Gibson, info, MethodDeclaration, log.info("Day1: " + vector_day1);
685: Adam Gibson, info, MethodDeclaration, log.info("Day2: " + vector_day2);
686: Adam Gibson, info, MethodDeclaration, log.info("Cross-Day similarity: " + crossDay);
687: raver119, info, MethodDeclaration, log.info("Cross-Day similiarity 2: " + Transforms.cosineSim(Transforms.unitVec(vector_day1), Transforms.unitVec(vector_day2)));
717: Adam Gibson, info, MethodDeclaration, log.info("Zhealth: " + paragraphVectors.getWordVectorMatrix("Zhealth"));
718: Adam Gibson, info, MethodDeclaration, log.info("Zscience: " + paragraphVectors.getWordVectorMatrix("Zscience"));
722: Adam Gibson, info, MethodDeclaration, log.info("Results for document '" + document.getLabel() + "'");
727: François Garillot, info, ForeachStmt, log.info("Similarity to [" + result + "] is [" + sim + "]");
900: raver119, info, MethodDeclaration, log.info("SimilarityX: {}", simX);
901: raver119, info, MethodDeclaration, log.info("SimilarityC: {}", simC);
902: raver119, info, MethodDeclaration, log.info("SimilarityB: {}", simB);
930: raver119, info, MethodDeclaration, log.info("vec1/vec2: {}", Transforms.cosineSim(vec1, vec2));
949: raver119, info, MethodDeclaration, log.info("vec1/vec2: {}", Transforms.cosineSim(vec1, vec2));
959: raver119, info, MethodDeclaration, log.info("W1 > Short hash: {}; Long hash: {}", w1.getLabel().hashCode(), w1.getStorageId());
960: raver119, info, MethodDeclaration, log.info("W2 > Short hash: {}; Long hash: {}", w2.getLabel().hashCode(), w2.getStorageId());
72: raver119, info, MethodDeclaration, logger.info("dtype: {}", Nd4j.dataType());
115: Adam Gibson, info, MethodDeclaration, logger.info("Wordz: " + wordz);
175: raver119, info, MethodDeclaration, logger.info("Starting training...");
179: raver119, info, MethodDeclaration, logger.info("Model saved...");
187: Adam Gibson, info, MethodDeclaration, logger.info("Day/night similarity: " + sim);
191: Adam Gibson, info, MethodDeclaration, logger.info("Nearest labels to 'day': " + labels);
198: AllenWGX, info, MethodDeclaration, logger.info("day/night similarity: " + sim);
222: raver119, info, MethodDeclaration, logger.info("Fitting model...");
226: raver119, info, MethodDeclaration, logger.info("Model ready...");
229: Adam Gibson, info, MethodDeclaration, logger.info("Day/night similarity: " + sim);
233: Adam Gibson, info, MethodDeclaration, logger.info("Nearest labels to 'day': " + labels);
258: Adam Gibson, info, MethodDeclaration, logger.info("Max available memory: " + Runtime.getRuntime().maxMemory());
288: Adam Gibson, info, MethodDeclaration, logger.info("Day/night similarity: " + sim);
292: Adam Gibson, info, MethodDeclaration, logger.info("Day/another similarity: " + sim);
295: Adam Gibson, info, MethodDeclaration, logger.info("Night/year similarity: " + sim);
298: Adam Gibson, info, MethodDeclaration, logger.info("Night/me similarity: " + sim);
301: Adam Gibson, info, MethodDeclaration, logger.info("Day/know similarity: " + sim);
304: Adam Gibson, info, MethodDeclaration, logger.info("Best/police similarity: " + sim);
307: Adam Gibson, info, MethodDeclaration, logger.info("Nearest labels to 'day': " + labels);
345: Adam Gibson, info, MethodDeclaration, logger.info("Blogger: " + blogger);
416: Adam Gibson, info, MethodDeclaration, logger.info("12->72: " + sim);
468: François Garillot, info, MethodDeclaration, logger.info("Connected on 0: [" + graph.getConnectedVertices(0).size() + "]");
469: François Garillot, info, MethodDeclaration, logger.info("Connected on 1: [" + graph.getConnectedVertices(1).size() + "]");
470: François Garillot, info, MethodDeclaration, logger.info("Connected on 3: [" + graph.getConnectedVertices(3).size() + "]");
140: Adam Gibson, info, WhileStmt, logger.info("Sequence: " + sequence);
76: raver119, info, MethodDeclaration, log.info("Single-threaded time: {} ms", time2 - time1);
93: raver119, info, MethodDeclaration, log.info("Multi-threaded time: {} ms", time2 - time1);
117: raver119, info, MethodDeclaration, log.info("Prefetched Single-threaded time: {} ms", time2 - time1);
135: raver119, info, MethodDeclaration, log.info("Prefetched Multi-threaded time: {} ms", time2 - time1);
66: François Garillot, info, MethodDeclaration, log.info("Total number of tokens: [" + cnt + "], lines: [" + lines + "], set size: [" + set.size() + "]");
67: Adam Gibson, info, MethodDeclaration, log.info("Set:\n" + set);
253: Adam Gibson, info, MethodDeclaration, log.info("Source Vocab size: " + sourceSize);
287: Adam Gibson, info, MethodDeclaration, log.info("Source Vocab size: " + sourceSize);
41: Adam Gibson, info, MethodDeclaration, log.info(f.getAbsolutePath());
29: Adam Gibson, info, MethodDeclaration, log.info("Phase 1 starting");
41: Adam Gibson, info, MethodDeclaration, log.info("Phase 2 starting");
62: Adam Gibson, info, MethodDeclaration, log.info("Phase 1 starting");
75: François Garillot, info, BlockStmt, log.info("Line processed: " + cnt);
105: Adam Gibson, info, MethodDeclaration, log.info("Basic iterator: " + (time02 - time01));
107: Adam Gibson, info, MethodDeclaration, log.info("Prefetched iterator: " + (time12 - time11));
110: Adam Gibson, info, MethodDeclaration, log.info("Difference: " + difference);
34: Adam Gibson, info, WhileStmt, logger.info("Line: " + line);
48: François Garillot, info, WhileStmt, log.info("Position: [" + position + "], token1: '" + tok1 + "', token 2: '" + tok2 + "'");
82: François Garillot, info, MethodDeclaration, log.info("String tok: [" + stringCount + "], Stream tok: [" + stringCount2 + "], Difference: " + Math.abs(stringCount - stringCount2));
98: Adam Gibson, info, WhileStmt, log.info("Position: [" + position + "], token1: '" + tok1 + "', token 2: '" + tok2 + "'");
115: Adam Gibson, info, WhileStmt, log.info(tok1);
39: François Garillot, info, IfStmt, logger.info("org.ansj.app.crf.MakeTrainFile [inputPath] [outputPath]");
63: François Garillot, warn, CatchClause, logger.warn("文件没有找到", e);
65: François Garillot, warn, CatchClause, logger.warn("IO异常", e);
173: François Garillot, warn, CatchClause, logger.warn("文件没有找到", e);
175: François Garillot, warn, CatchClause, logger.warn("IO异常", e);
55: François Garillot, info, TryStmt, logger.info("load crf model ok ! use time :" + (System.currentTimeMillis() - start));
69: François Garillot, warn, CatchClause, logger.warn("解压异常", ze);
71: François Garillot, warn, CatchClause, logger.warn("文件没有找到", e);
73: François Garillot, warn, CatchClause, logger.warn("IO异常", e);
59: François Garillot, info, MethodDeclaration, logger.info("load template ok template : " + sb);
61: François Garillot, info, MethodDeclaration, logger.info("load feature ok feature size : " + featureNames.size());
63: François Garillot, info, MethodDeclaration, logger.info("load crfpp model ok ! use time : " + (System.currentTimeMillis() - start));
315: François Garillot, warn, CatchClause, logger.warn("IO异常", e);
39: François Garillot, info, MethodDeclaration, logger.info("load wapiti model begin!");
43: François Garillot, info, MethodDeclaration, logger.info(temp);
52: François Garillot, info, MethodDeclaration, logger.info("featureIndex is " + featureIndex);
53: François Garillot, info, MethodDeclaration, logger.info("load template ok template : " + sb);
59: François Garillot, info, MethodDeclaration, logger.info("load feature ok feature size : " + loadFeatureName.size());
65: François Garillot, info, MethodDeclaration, logger.info("load wapiti model ok ! use time :" + (System.currentTimeMillis() - start));
99: François Garillot, warn, IfStmt, logger.warn(pair.getValue0() + "\t" + pair.getValue1() + " not have any weight ,so skip it !");
343: François Garillot, warn, CatchClause, logger.warn("IO异常", e);
26: François Garillot, warn, CatchClause, logger.warn("不支持的编码", e);
23: François Garillot, info, MethodDeclaration, LOG.info("path to stream " + path);
64: François Garillot, warn, IfStmt, LOG.warn("crf " + key + " not found in config ");
117: François Garillot, error, CatchClause, LOG.error("Init ambiguity library error :" + e.getMessage() + ", path: " + kv.getK());
96: François Garillot, debug, TryStmt, LOG.debug("begin init ambiguity");
104: François Garillot, error, IfStmt, LOG.error("init ambiguity  error in line :" + temp + " format err !");
113: François Garillot, info, TryStmt, LOG.info("load dic use time:" + (System.currentTimeMillis() - start) + " path is : " + kv.getK());
134: François Garillot, error, IfStmt, LOG.error("init ambiguity  error in line :" + Arrays.toString(split) + " format err !");
54: François Garillot, warn, IfStmt, LOG.warn("crf " + key + " not found in config ");
86: François Garillot, error, CatchClause, LOG.error(kv + " load err " + e.getMessage());
78: François Garillot, debug, TryStmt, LOG.debug("begin init crf model!");
82: François Garillot, info, TryStmt, LOG.info("load crf use time:" + (System.currentTimeMillis() - start) + " path is : " + kv.getK());
131: François Garillot, warn, MethodDeclaration, LOG.warn("make sure ,this reload not use same obj , it to instance a new model");
57: François Garillot, warn, CatchClause, LOG.warn("无法实例化", e);
59: François Garillot, warn, CatchClause, LOG.warn("非法访问", e);
61: François Garillot, warn, CatchClause, LOG.warn("数字格式异常", e);
63: François Garillot, warn, CatchClause, LOG.warn("IO异常", e);
54: François Garillot, info, TryStmt, LOG.info("init core library ok use time : " + (System.currentTimeMillis() - start));
117: François Garillot, warn, IfStmt, LOG.warn("dic " + key + " not found in config ");
201: François Garillot, error, CatchClause, LOG.error("Init dic library error :" + e.getMessage() + ", path: " + kv.getK());
173: François Garillot, debug, TryStmt, LOG.debug("begin init dic !");
197: François Garillot, info, TryStmt, LOG.info("load dic use time:" + (System.currentTimeMillis() - start) + " path is : " + kv.getK());
65: François Garillot, warn, CatchClause, logger.warn("词性列表加载失败!", e);
81: François Garillot, warn, CatchClause, logger.warn("加载词性关系失败!", e);
99: François Garillot, warn, IfStmt, LOG.warn("STOP " + key + " not found in config ");
164: François Garillot, error, CatchClause, LOG.error("Init Stop library error :" + e.getMessage() + ", path: " + kv.getK());
131: François Garillot, debug, TryStmt, LOG.debug("begin init FILTER !");
160: François Garillot, info, TryStmt, LOG.info("load stop use time:" + (System.currentTimeMillis() - start) + " path is : " + kv.getK());
47: François Garillot, warn, IfStmt, LOG.warn("crf " + key + " not found in config ");
81: François Garillot, debug, MethodDeclaration, LOG.debug("begin init synonyms " + kv.getK());
113: François Garillot, error, CatchClause, LOG.error("Init synonyms library error :" + e.getMessage() + ", path: " + kv.getK());
101: François Garillot, warn, IfStmt, LOG.warn(temp + " in synonymsLibrary not in to library !");
110: François Garillot, info, TryStmt, LOG.info("load synonyms use time:" + (System.currentTimeMillis() - start) + " path is : " + kv.getK());
197: François Garillot, warn, IfStmt, LOG.warn(Arrays.toString(words) + " not have any change because it less than 2 word");
251: François Garillot, warn, IfStmt, LOG.warn(Arrays.toString(words) + " not have any change because it less than 2 word");
49: François Garillot, warn, CatchClause, logger.warn("IO异常", e);
74: François Garillot, warn, CatchClause, logger.warn("数字格式不正确", e);
76: François Garillot, warn, CatchClause, logger.warn("IO异常", e);
115: François Garillot, warn, CatchClause, logger.warn(str + "不是一个数字", e);
50: François Garillot, warn, CatchClause, logger.warn("IO异常", e);
79: François Garillot, error, CatchClause, LOG.error("regex err : " + regex, e);
132: François Garillot, warn, IfStmt, LOG.warn("not find any crf model, make sure your config right? ");
72: François Garillot, warn, CatchClause, LOG.warn("not find ansj_library.properties. reason: " + e1.getMessage());
68: François Garillot, info, IfStmt, LOG.info("load ansj_library not find in classPath ! i find it in " + find.getAbsolutePath() + " make sure it is your config!");
89: François Garillot, warn, CatchClause, LOG.warn("not find library.properties. reason: " + e1.getMessage());
85: François Garillot, info, IfStmt, LOG.info("load library not find in classPath ! i find it in " + find.getAbsolutePath() + " make sure it is your config!");
105: François Garillot, info, TryStmt, LOG.info("init " + key + " to env value is : " + value);
95: François Garillot, warn, IfStmt, LOG.warn("not find library.properties in classpath use it by default !");
217: François Garillot, warn, CatchClause, LOG.warn("IO异常", e);
219: François Garillot, warn, CatchClause, LOG.warn("找不到类", e);
265: François Garillot, warn, CatchClause, LOG.warn("数字格式异常", e);
267: François Garillot, warn, CatchClause, LOG.warn("不支持的编码", e);
269: François Garillot, warn, CatchClause, LOG.warn("IO异常", e);
45: wangfeng-skymind, info, MethodDeclaration, log.info("load is right!");
32: DH, info, IfStmt, log.info("Kuromoji bin folder not exist ");
37: DH, error, CatchClause, log.error("IOException : ", e);
56: DH, info, IfStmt, log.info("Downloading Kuromoji bin files...");
45: raver119, info, MethodDeclaration, log.info("Total execution time: {}", (time2 - time1));
100: François Garillot, INFO, IfStmt, this.logger.log(Level.INFO, "Initializing the OpenNLP " + "Part of Speech annotator.");
211: François Garillot, FINE, IfStmt, this.logger.log(Level.FINER, sentenceWithPos.toString());
263: Adam Gibson, warn, CatchClause, log.warn("Unable to parse " + sentence.getCoveredText());
248: Adam Gibson, warn, IfStmt, log.warn("More than one top level node for a treebank parse. Only accepting first input node.");
325: Adam Gibson, warn, IfStmt, log.warn("More than one top level node for a treebank parse. Only accepting first input node.");
337: Adam Gibson, warn, IfStmt, log.warn("Found invalid sentence. Skipping");
383: Adam Gibson, info, ForeachStmt, log.info("Tree bank parse " + node.getTreebankParse());
385: François Garillot, info, ForeachStmt, log.info("Node val " + node2.getNodeValue() + " and label " + node2.getNodeType() + " and tags was " + node2.getNodeTags());
107: Adam Gibson, warn, CatchClause, log.warn("Done iterating returning an empty string");
88: François Garillot, warn, CatchClause, log.warn("Unable to process text " + text, e);
379: Adam Gibson, info, MethodDeclaration, logger.info("Vec1 day: " + day1);
380: Adam Gibson, info, MethodDeclaration, logger.info("Vec2 day: " + day2);
382: Adam Gibson, info, MethodDeclaration, logger.info("Vec1 night: " + night1);
383: Adam Gibson, info, MethodDeclaration, logger.info("Vec2 night: " + night2);
385: François Garillot, info, MethodDeclaration, logger.info("Day/day cross-model similarity: " + simD);
386: François Garillot, info, MethodDeclaration, logger.info("Night/night cross-model similarity: " + simN);
390: Adam Gibson, info, MethodDeclaration, logger.info("Vec1 day/night similiraty: " + vec.similarity("day", "night"));
391: Adam Gibson, info, MethodDeclaration, logger.info("Vec2 day/night similiraty: " + vec2.similarity("day", "night"));
409: Adam Gibson, info, MethodDeclaration, logger.info("Rewinding: " + Arrays.toString(vec.getWordVector("rewinding")));
552: raver119, info, MethodDeclaration, logger.info("Executor name: {}", Nd4j.getExecutioner().getClass().getSimpleName());
559: raver119, info, MethodDeclaration, logger.info("Loading time: {} ms", (time2 - time1));
570: raver119, info, MethodDeclaration, logger.info("Executor name: {}", Nd4j.getExecutioner().getClass().getSimpleName());
589: raver119, info, MethodDeclaration, logger.info("Executor name: {}", Nd4j.getExecutioner().getClass().getSimpleName());
608: raver119, info, MethodDeclaration, logger.info("Executor name: {}", Nd4j.getExecutioner().getClass().getSimpleName());
624: raver119, info, MethodDeclaration, logger.info("Executor name: {}", Nd4j.getExecutioner().getClass().getSimpleName());
643: raver119, info, MethodDeclaration, logger.info("Executor name: {}", Nd4j.getExecutioner().getClass().getSimpleName());
666: raver119, info, MethodDeclaration, logger.info("Executor name: {}", Nd4j.getExecutioner().getClass().getSimpleName());
689: raver119, info, MethodDeclaration, logger.info("Executor name: {}", Nd4j.getExecutioner().getClass().getSimpleName());
41: Adam Gibson, info, MethodDeclaration, log.info("Conf. JSON: " + json);
132: Adam Gibson, info, MethodDeclaration, log.info(Arrays.toString(lst.toArray()));
137: Adam Gibson, info, MethodDeclaration, log.info("Day/night similarity: " + sim);
159: Adam Gibson, info, MethodDeclaration, log.info(Arrays.toString(lst.toArray()));
164: Adam Gibson, info, MethodDeclaration, log.info("Day/night similarity: " + sim);
188: raver119, info, MethodDeclaration, log.info(Arrays.toString(lst.toArray()));
193: raver119, info, MethodDeclaration, log.info("Day/night similarity: " + sim);
231: Adam Gibson, info, MethodDeclaration, log.info("Day/night similarity: " + sim);
278: Adam Gibson, info, MethodDeclaration, log.info("Arrays 1/2 cosineSim: " + sim12);
279: Adam Gibson, info, MethodDeclaration, log.info("Arrays 2/3 cosineSim: " + sim23);
280: Adam Gibson, info, MethodDeclaration, log.info("Arrays 1/2 dot: " + Nd4j.getBlasWrapper().dot(Nd4j.create(array1), Nd4j.create(array2)));
281: Adam Gibson, info, MethodDeclaration, log.info("Arrays 2/3 dot: " + Nd4j.getBlasWrapper().dot(Nd4j.create(array2), Nd4j.create(array3)));
306: raver119, info, MethodDeclaration, log.info("Model loaded in {} msec", time2 - time1);
339: raver119, info, MethodDeclaration, log.info("Fit 1");
357: raver119, info, MethodDeclaration, log.info("Fit 2");
369: raver119, info, MethodDeclaration, log.info("Fit 3");
401: raver119, info, MethodDeclaration, log.info("Original configuration: {}", vec.getConfiguration());
417: raver119, info, MethodDeclaration, log.info("Restored configuration: {}", restored.getConfiguration());
65: Adam Gibson, info, IfStmt, log.info("Epoch with score greater than threshold * * *");
81: Adam Gibson, info, MethodDeclaration, log.info("Starting early stopping training");
83: Adam Gibson, warn, BlockStmt, log.warn("No score calculator provided for early stopping. Score will be reported as 0.0 to epoch termination conditions");
118: Adam Gibson, warn, CatchClause, log.warn("Early stopping training terminated due to exception at epoch {}, iteration {}", epochCount, iterCount, e);
154: Adam Gibson, info, IfStmt, log.info("Hit per iteration epoch termination condition at epoch {}, iteration {}. Reason: {}", epochCount, iterCount, terminationReason);
189: Adam Gibson, info, WhileStmt, log.info("Completed training epoch {}", epochCount);
201: Alex Black, warn, IfStmt, log.warn("Score is not finite for epoch {}: score = {}", epochCount, score);
210: François Garillot, info, IfStmt, log.info("New best model: score = {}, epoch = {} (previous: score = {}, epoch = {})", score, epochCount, bestModelScore, bestModelEpoch);
208: Adam Gibson, info, IfStmt, log.info("Score at epoch {}: {}", epochCount, score);
247: François Garillot, info, IfStmt, log.info("Hit epoch termination condition at epoch {}. Details: {}", epochCount, termReason.toString());
264: Adam Gibson, Error, IfStmt, log.error("Error with earlystopping", e2);
259: Adam Gibson, error, CatchClause, log.error("Unable to save model.", e);
1541: François Garillot, warn, IfStmt, log.warn("Different topN values ({} vs {}) detected during Evaluation merging. Top N accuracy may not be accurate.", topN, other.topN);
89: Alex Black, info, IfStmt, log.info("Setting clipping epsilon to 0.0 for " + lfn.getClass() + " loss function to avoid spurious gradient check failures");
85: Alex Black, info, IfStmt, log.info("Setting softmax clipping epsilon to 0.0 for " + lfn.getClass() + " loss function to avoid spurious gradient check failures");
162: Alex Black, warn, IfStmt, log.warn("Layer " + layerCount + " is possibly using an unsuitable activation function: " + activation.getClass() + ". Activation functions for gradient checks must be smooth (like sigmoid, tanh, softmax) and not " + "contain discontinuities like ReLU or LeakyReLU (these may cause spurious failures)");
224: Alex Black, info, ForeachStmt, log.info("Layer " + i + ": " + l.getClass().getSimpleName() + " - params " + s);
290: François Garillot, info, IfStmt, log.info("Param " + i + " (" + paramName + ") passed: grad= " + backpropGradient + ", numericalGrad= " + numericalGradient + ", relError= " + relError);
282: François Garillot, info, BlockStmt, log.info("Param " + i + " (" + paramName + ") FAILED: grad= " + backpropGradient + ", numericalGrad= " + numericalGradient + ", relError= " + relError + ", scorePlus=" + scorePlus + ", scoreMinus= " + scoreMinus);
276: Alex Black, info, IfStmt, log.info("Param " + i + " (" + paramName + ") passed: grad= " + backpropGradient + ", numericalGrad= " + numericalGradient + ", relError= " + relError + "; absolute error = " + absError + " < minAbsoluteError = " + minAbsoluteError);
309: François Garillot, info, IfStmt, log.info("GradientCheckUtil.checkGradients(): " + nParams + " params checked, " + nPass + " passed, " + totalNFailures + " failed. Largest relative error = " + maxError);
386: Alex Black, warn, IfStmt, log.warn("Layer \"" + vertexName + "\" is possibly using an unsuitable activation function: " + activation.getClass() + ". Activation functions for gradient checks must be smooth (like sigmoid, tanh, softmax) and not " + "contain discontinuities like ReLU or LeakyReLU (these may cause spurious failures)");
491: François Garillot, info, IfStmt, log.info("Param " + i + " (" + paramName + ") passed: grad= " + backpropGradient + ", numericalGrad= " + numericalGradient + ", relError= " + relError);
483: François Garillot, info, BlockStmt, log.info("Param " + i + " (" + paramName + ") FAILED: grad= " + backpropGradient + ", numericalGrad= " + numericalGradient + ", relError= " + relError + ", scorePlus=" + scorePlus + ", scoreMinus= " + scoreMinus);
478: François Garillot, info, IfStmt, log.info("Param " + i + " (" + paramName + ") passed: grad= " + backpropGradient + ", numericalGrad= " + numericalGradient + ", relError= " + relError + "; absolute error = " + absError + " < minAbsoluteError = " + minAbsoluteError);
498: François Garillot, info, IfStmt, log.info("GradientCheckUtil.checkGradients(): " + nParams + " params checked, " + nPass + " passed, " + totalNFailures + " failed. Largest relative error = " + maxError);
616: François Garillot, info, IfStmt, log.info("Param " + i + " (" + paramName + ") passed: grad= " + backpropGradient + ", numericalGrad= " + numericalGradient + ", relError= " + relError);
608: François Garillot, info, BlockStmt, log.info("Param " + i + " (" + paramName + ") FAILED: grad= " + backpropGradient + ", numericalGrad= " + numericalGradient + ", relError= " + relError + ", scorePlus=" + scorePlus + ", scoreMinus= " + scoreMinus);
603: François Garillot, info, IfStmt, log.info("Param " + i + " (" + paramName + ") passed: grad= " + backpropGradient + ", numericalGrad= " + numericalGradient + ", relError= " + relError + "; absolute error = " + absError + " < minAbsoluteError = " + minAbsoluteError);
623: François Garillot, info, IfStmt, log.info("GradientCheckUtil.checkGradients(): " + nParams + " params checked, " + nPass + " passed, " + totalNFailures + " failed. Largest relative error = " + maxError);
220: François Garillot, warn, CatchClause, log.warn("Layer with null ActivationFn field or pre-0.7.2 activation function detected: could not parse JSON", e);
230: François Garillot, warn, CatchClause, log.warn("OutputLayer with null LossFunction or pre-0.6.0 loss function configuration detected: could not parse JSON", e);
226: Alex Black, warn, IfStmt, log.warn("OutputLayer with null LossFunction or pre-0.6.0 loss function configuration detected: could not parse JSON: layer 'confs' field is not an ArrayNode (is: {})", (confs != null ? confs.getClass() : null));
192: François Garillot, warn, CatchClause, log.warn("OutputLayer with null LossFunction or pre-0.6.0 loss function configuration detected: could not parse JSON", e);
218: François Garillot, warn, SwitchStmt, log.warn("OutputLayer with null LossFunction or pre-0.6.0 loss function configuration detected: could not set loss function for {}", lossFunction);
265: François Garillot, warn, CatchClause, log.warn("Layer with null ActivationFn field or pre-0.7.2 activation function detected: could not parse JSON", e);
208: Alex Black, info, IfStmt, log.info("Layer index {} already exists, layer of type {} will be replace by layer type {}", ind, layerwise.get(ind).getClass().getSimpleName(), layer.getClass().getSimpleName());
1167: Alex Black, warn, IfStmt, log.warn("*** No updater configuration is set for layer {} - defaulting to {} ***", layerName, u);
348: maxpumperla, info, SwitchStmt, log.info("Automatic addition of FF -> CNN3D preprocessors: not yet implemented (layer name: \"" + layerName + "\")");
352: maxpumperla, warn, SwitchStmt, log.warn("Automatic addition of RNN -> CNN3D preprocessors: not yet implemented (layer name: \"" + layerName + "\")");
153: Alex Black, warn, IfStmt, OneTimeLogger.warn(log, "Layer \"" + layerName + "\" distribution is set but will not be applied unless weight init is set to WeighInit.DISTRIBUTION.");
149: Alex Black, warn, IfStmt, OneTimeLogger.warn(log, "Layer \"" + layerName + "\" distribution is automatically set to normalize distribution with mean 0 and variance 1.");
50: Alex Black, warn, CatchClause, log.warn("***SameDiff layer {} does not have a zero argument (no-arg) constructor.***\nA no-arg constructor " + "is required for JSON deserialization, which is used for both model saving and distributed (Spark) " + "training.\nA no-arg constructor (private, protected or public) as well as setters (or simply a " + "Lombok @Data annotation) should be added to avoid JSON errors later.", getClass().getName());
61: Alex Black, warn, IfStmt, log.warn("Using BernoulliRecontructionDistribution with activation function \"" + activationFn + "\"." + " Using sigmoid/hard sigmoid is recommended to bound probabilities in range 0 to 1");
58: Alex Black, Error, CatchClause, log.warn("Error parsing {} system property: class \"{}\" could not be loaded", CUSTOM_REGISTRATION_PROPERTY, s, t);
66: Alex Black, Error, CatchClause, log.warn("Error registering custom classes for legacy JSON deserialization ({} system property)", CUSTOM_REGISTRATION_PROPERTY, t);
430: Alex Black, info, MethodDeclaration, OneTimeLogger.info(log, "Starting ComputationGraph with WorkspaceModes set to [training: {}; inference: {}], cacheMode set to [{}]", configuration.getTrainingWorkspaceMode(), configuration.getInferenceWorkspaceMode(), configuration.getCacheMode());
2710: raver119, warn, IfStmt, log.warn("Cannot calculate score: vertex \"" + s + "\" is not an output layer");
3247: Adam Gibson, warn, IfStmt, log.warn("Cannot do TBPTT with time series of different lengths");
3257: Adam Gibson, warn, IfStmt, log.warn("Cannot do TBPTT with time series of different lengths");
103: Alex Black, info, MethodDeclaration, OneTimeLogger.info(log, "Frozen layers are cloned as their original versions.");
130: Alex Black, info, IfStmt, OneTimeLogger.info(log, "Frozen layers cannot be fit. Warning will be issued only once per instance");
139: Alex Black, info, IfStmt, OneTimeLogger.info(log, "Frozen layers will not be updated. Warning will be issued only once per instance");
148: Alex Black, info, IfStmt, OneTimeLogger.info(log, "Frozen layers will not be updated. Warning will be issued only once per instance");
162: Alex Black, info, IfStmt, OneTimeLogger.info(log, "Gradients for the frozen layer are not set and will therefore will not be updated.Warning will be issued only once per instance");
208: Alex Black, info, IfStmt, OneTimeLogger.info(log, "Gradients for the frozen layer are not set and will therefore will not be updated.Warning will be issued only once per instance");
218: Alex Black, info, IfStmt, OneTimeLogger.info(log, "Frozen layers cannot be fit.Warning will be issued only once per instance");
232: Alex Black, info, IfStmt, OneTimeLogger.info(log, "Gradients for the frozen layer are not set and will therefore will not be updated.Warning will be issued only once per instance");
399: Alex Black, info, IfStmt, OneTimeLogger.info(log, "Frozen layer instance found! Frozen layers are treated as always in test mode. Warning will only be issued once per instance");
411: Alex Black, info, IfStmt, OneTimeLogger.info(log, "Frozen layer instance found! Frozen layers are treated as always in test mode. Warning will only be issued once per instance");
90: Samuel Audet, info, IfStmt, OneTimeLogger.info(log, "cuDNN not found: " + "use cuDNN for better GPU performance by including the deeplearning4j-cuda module. " + "For more information, please refer to: https://deeplearning4j.org/cudnn", t);
86: Samuel Audet, warn, IfStmt, log.warn("Could not initialize CudnnConvolutionHelper", t);
80: Samuel Audet, debug, TryStmt, log.debug("CudnnConvolutionHelper successfully initialized");
167: Alex Black, warn, IfStmt, log.warn("CuDNN execution failed - falling back on built-in implementation", e);
328: Alex Black, warn, IfStmt, log.warn("CuDNN execution failed - falling back on built-in implementation", e);
90: Samuel Audet, info, IfStmt, OneTimeLogger.info(log, "cuDNN not found: " + "use cuDNN for better GPU performance by including the deeplearning4j-cuda module. " + "For more information, please refer to: https://deeplearning4j.org/cudnn", t);
86: Samuel Audet, warn, IfStmt, log.warn("Could not initialize CudnnSubsamplingHelper", t);
80: Samuel Audet, debug, TryStmt, log.debug("CudnnSubsamplingHelper successfully initialized");
147: Alex Black, warn, IfStmt, log.warn("CuDNN execution failed - falling back on built-in implementation", e);
331: Alex Black, warn, IfStmt, log.warn("CuDNN execution failed - falling back on built-in implementation", e);
66: Samuel Audet, info, IfStmt, OneTimeLogger.info(log, "cuDNN not found: " + "use cuDNN for better GPU performance by including the deeplearning4j-cuda module. " + "For more information, please refer to: https://deeplearning4j.org/cudnn", t);
62: Samuel Audet, warn, IfStmt, log.warn("Could not initialize CudnnBatchNormalizationHelper", t);
56: Samuel Audet, debug, TryStmt, log.debug("CudnnBatchNormalizationHelper successfully initialized");
87: Samuel Audet, info, IfStmt, OneTimeLogger.info(log, "cuDNN not found: " + "use cuDNN for better GPU performance by including the deeplearning4j-cuda module. " + "For more information, please refer to: https://deeplearning4j.org/cudnn", t);
83: Samuel Audet, warn, IfStmt, log.warn("Could not initialize CudnnLocalResponseNormalizationHelper", t);
76: Samuel Audet, debug, TryStmt, log.debug("CudnnLocalResponseNormalizationHelper successfully initialized");
77: Samuel Audet, info, IfStmt, OneTimeLogger.info(log, "cuDNN not found: " + "use cuDNN for better GPU performance by including the deeplearning4j-cuda module. " + "For more information, please refer to: https://deeplearning4j.org/cudnn", t);
73: Samuel Audet, warn, IfStmt, log.warn("Could not initialize CudnnLSTMHelper", t);
67: Samuel Audet, debug, TryStmt, log.debug("CudnnLSTMHelper successfully initialized");
309: Alex Black, info, MethodDeclaration, log.info("Starting unsupervised training on layer " + layerIdx);
515: Alex Black, info, MethodDeclaration, OneTimeLogger.info(log, "Starting MultiLayerNetwork with WorkspaceModes set to [training: {}; inference: {}], cacheMode set to [{}]", layerWiseConfigurations.getTrainingWorkspaceMode(), layerWiseConfigurations.getInferenceWorkspaceMode(), layerWiseConfigurations.getCacheMode());
1326: Adam Gibson, info, BlockStmt, log.info("Model is not initialized. Initialize net with init()");
1439: nyghtowl, Warn, IfStmt, log.warn("Warning: finetune is not applied.");
1618: Alex Black, Warn, IfStmt, log.warn("Warning: final layer isn't output layer. You cannot use backprop without an output layer.");
1721: Adam Gibson, warn, IfStmt, log.warn("Cannot do truncated BPTT with non-3d inputs or labels. Expect input with shape [miniBatchSize,nIn,timeSeriesLength], got " + Arrays.toString(input.shape()) + "\tand labels with shape " + Arrays.toString(labels.shape()));
1727: François Garillot, warn, IfStmt, log.warn("Input and label time series have different lengths: {} input length, {} label length", input.size(2), labels.size(2));
1871: nyghtowl, Warn, IfStmt, log.warn("Warning: finetune is not applied.");
1875: Adam Gibson, warn, IfStmt, log.warn("Output layer not instance of output layer returning.");
1885: Adam Gibson, info, MethodDeclaration, log.info("Finetune phase");
2163: Adam Gibson, info, MethodDeclaration, log.info(sb.toString());
233: raver119, info, MethodDeclaration, log.info("Reporting evaluation results:");
235: raver119, info, BlockStmt, log.info("{}:\n{}", evaluation.getClass().getSimpleName(), evaluation.stats());
132: Adam Gibson, Error, IfStmt, logger.warn("Error writing to file: {}", e);
135: Adam Gibson, warn, IfStmt, logger.warn("Max file write messages displayed. No more failure messages will be printed");
141: François Garillot, info, BlockStmt, logger.info(sb.toString());
201: François Garillot, info, BlockStmt, logger.info(out);
211: Adam Gibson, Error, IfStmt, logger.warn("Error writing to file: {}", e);
214: Adam Gibson, warn, IfStmt, logger.warn("Max file write messages displayed. No more failure messages will be printed");
119: Alex Black, info, IfStmt, log.info(builder.toString());
54: Alex Black, info, IfStmt, log.info("Score at iteration {} is {}", iteration, score);
57: François Garillot, info, MethodDeclaration, log.info("Remaining time : " + minutes + "mn - End expected : " + date.toString());
203: Alex Black, info, IfStmt, log.info("Model checkpoint saved: epoch {}, iteration {}, path: {}", c.getEpoch(), c.getIteration(), new File(rootDir, c.getFilename()).getPath());
165: Adam Gibson, debug, MethodDeclaration, log.debug("slope = {}", slope);
185: Adam Gibson, trace, IfStmt, log.trace("ENTERING BACKTRACK\n");
186: François Garillot, trace, IfStmt, log.trace("Entering BackTrackLineSearch, value = " + scoreAtStart + ",\ndirection.oneNorm:" + norm1 + "  direction.infNorm:" + infNorm);
190: Adam Gibson, warn, IfStmt, log.warn("Attempted step too big. scaling: sum= {}, stepMax= {}", sum, stepMax);
205: Adam Gibson, trace, IfStmt, log.trace("BackTrack loop iteration {} : step={}, oldStep={}", iteration, step, oldStep);
206: François Garillot, trace, IfStmt, log.trace("before step, x.1norm: {} \nstep: {} \noldStep: {}", parameters.norm1(Integer.MAX_VALUE), step, oldStep);
220: Adam Gibson, trace, IfStmt, log.trace("after step, x.1norm: " + norm1);
230: François Garillot, debug, IfStmt, log.debug("EXITING BACKTRACK: Jump too small (stepMin = {}). Exiting and using original params. Score = {}", stepMin, score);
236: Adam Gibson, debug, ForStmt, log.debug("Model score after step = {}", score);
246: François Garillot, debug, IfStmt, log.debug("Sufficient decrease (Wolfe cond.), exiting backtrack on iter {}: score={}, scoreAtStart={}", iteration, score, scoreAtStart);
267: François Garillot, warn, IfStmt, log.warn("Value is infinite after jump. oldStep={}. score={}, score2={}. Scaling back step size...", oldStep, score, score2);
272: François Garillot, warn, IfStmt, log.warn("EXITING BACKTRACK: Jump too small (step={} < stepMin={}). Exiting and using previous parameters. Value={}", step, stepMin, score);
256: François Garillot, debug, IfStmt, log.debug("Sufficient increase (Wolfe cond.), exiting backtrack on iter {}: score={}, bestScore={}", iteration, score, scoreAtStart);
337: Adam Gibson, debug, ForStmt, log.debug("tmpStep: {}", tmpStep);
353: François Garillot, debug, IfStmt, log.debug("Exited line search after maxIterations termination condition; score did not improve (bestScore={}, scoreAtStart={}). Resetting parameters", bestScore, scoreAtStart);
349: François Garillot, debug, IfStmt, log.debug("Exited line search after maxIterations termination condition; bestStepSize={}, bestScore={}, scoreAtStart={}", bestStepSize, bestScore, scoreAtStart);
344: François Garillot, debug, IfStmt, log.debug("Exited line search after maxIterations termination condition; bestStepSize={}, bestScore={}, scoreAtStart={}", bestStepSize, bestScore, scoreAtStart);
221: Adam Gibson, info, IfStmt, log.info("Hit termination condition " + condition.getClass().getName());
239: Alex Black, warn, CatchClause, log.warn("Invalid step...continuing another iteration: {}", e.getMessage());
249: Alex Black, debug, IfStmt, log.debug("Step size returned by line search is 0.0.");
284: François Garillot, debug, IfStmt, log.debug("Hit termination condition on iteration {}: score={}, oldScore={}, condition={}", i, score, oldScore, condition);
79: François Garillot, debug, BlockStmt, logger.debug("Polak-Ribiere gamma <= 0.0; using gamma=0.0 -> SGD line search. dgg={}, gg={}", dgg, gg);
165: raver119, info, BlockStmt, log.info("Master thread locks at RC");
174: raver119, info, BlockStmt, log.info("Master thread unlocks at RC");
198: raver119, info, BlockStmt, log.info("thread {} locking at CGA: {}", Thread.currentThread().getId(), currentConsumers.get());
233: raver119, info, BlockStmt, log.info("thread {} unlocking at CGA: {}", Thread.currentThread().getId(), currentConsumers.get());
266: raver119, info, BlockStmt, log.info("Local updates to be applied: {}", cnt);
302: raver119, info, BlockStmt, log.info("thread {} finished at Externals", Thread.currentThread().getId());
305: raver119, info, BlockStmt, log.info("External updates to be applied: {}", ent);
350: raver119, info, BlockStmt, log.info("Local updates to be applied: {}", cnt);
386: raver119, info, BlockStmt, log.info("External updates to be applied: {}", ent);
453: raver119, info, BlockStmt, log.info("thread {} locking at Register", Thread.currentThread().getId());
464: raver119, info, BlockStmt, log.info("thread {} unlocking at Register", Thread.currentThread().getId());
510: raver119, info, CatchClause, log.info("Something bad at index_{}", i);
182: raver119, debug, IfStmt, log.debug("Switched to threshold encoding");
151: raver119, debug, IfStmt, log.debug("Going back to bitmapEncoding");
171: raver119, debug, IfStmt, log.debug("Threshold steps down to {}", currentThreshold.get().get());
109: raver119, info, BlockStmt, log.info("thread {} queries isEmpty: {}", Thread.currentThread().getId(), res);
120: raver119, info, BlockStmt, log.info("thread {} locking at FBQ", Thread.currentThread().getId());
146: raver119, info, BlockStmt, log.info("thread {} unlocking at FBQ", Thread.currentThread().getId());
717: raver119, debug, WhileStmt, log.debug("Copying: {}", entry.getName());
761: Ede Meijer, Error, CatchClause, log.warn("Error while restoring normalizer, trying to restore assuming deprecated format...");
764: Ede Meijer, warn, CatchClause, log.warn("Recovered using deprecated method. Will now re-save the normalizer to fix this issue.");
71: François Garillot, warn, IfStmt, log.warn("Could not generate hardware UID{}. Using fallback: JVM UID as hardware UID.", (noInterfaces ? " (no interfaces)" : ""));
33: raver119, info, ForeachStmt, log.info("Workers: {}; Buffer size: {} bytes", numWorkers, bufferSize);
144: François Garillot, info, IfStmt, log.info("Boxes created " + boxesCreated);
162: François Garillot, info, IfStmt, log.info("Boxes destroyed " + boxesCreated);
173: François Garillot, info, WhileStmt, log.info("Not all created...");
70: François Garillot, error, CatchClause, log.error("Unable to parse args", e);
111: François Garillot, Error, CatchClause, log.error("Error ", e);
123: François Garillot, info, WhileStmt, log.info(new String(tmp, 0, i));
126: François Garillot, info, IfStmt, log.info("exit-status: " + channel.getExitStatus());
222: François Garillot, warn, IfStmt, log.warn("Skipping " + f.getName());
226: François Garillot, info, ForeachStmt, log.info("Uploading " + f.getName());
269: François Garillot, info, CatchClause, log.info("Session was down...trying again", e);
310: François Garillot, info, MethodDeclaration, log.info(arg0);
79: François Garillot, info, IfStmt, log.info(msg);
74: François Garillot, error, IfStmt, log.error(msg);
87: François Garillot, info, IfStmt, log.info(String.format("%d clusters found.", csrl.size()));
89: François Garillot, info, ForeachStmt, log.info(String.format("Name: %s | Id: %s", csr.getName(), csr.getId()));
85: François Garillot, info, BlockStmt, log.info("No cluster found.");
136: François Garillot, info, IfStmt, log.info(String.format("The cluster with id %s is terminating.", id));
132: François Garillot, error, IfStmt, log.error(String.format("The cluster with name %s , requested for deletion, does not exist.", sparkClusterName));
143: François Garillot, info, MethodDeclaration, log.info(String.format("Placing uberJar %s to %s", uberJar.getPath(), s3Jar.toString()));
189: François Garillot, info, IfStmt, log.info("Your new cluster's id is %s.", res.getJobFlowId());
177: François Garillot, info, IfStmt, log.info(String.format("Your job is added to the cluster with id %s.", csr.getId()));
203: François Garillot, info, MethodDeclaration, log.info(".");
229: François Garillot, info, BlockStmt, log.info("Cluster %s terminated without error.", clusterId);
227: François Garillot, error, BlockStmt, log.error(String.format("Cluster %s terminated with an abnormal step, name %s, id %s", clusterId, stepS.getName(), stepS.getId()));
215: François Garillot, error, IfStmt, log.error("Timeout. Cluster terminated.");
246: François Garillot, info, IfStmt, log.info(String.format("found cluster with id %s, starting monitoring", csr.getId()));
243: François Garillot, error, IfStmt, log.error(String.format("The cluster with name %s does not exist.", sparkClusterName));
122: Justin Long, info, MethodDeclaration, log.info("Starting early stopping training");
128: Justin Long, warn, BlockStmt, log.warn("No score calculator provided for early stopping. Score will be reported as 0.0 to epoch termination conditions");
160: François Garillot, warn, CatchClause, log.warn("Early stopping training terminated due to exception at epoch {}, iteration {}", epochCount, iterCount, e);
175: François Garillot, info, IfStmt, log.info("Hit per iteration termination condition at epoch {}, iteration {}. Reason: {}", epochCount, iterCount, terminationReason);
214: Justin Long, info, WhileStmt, log.info("Completed training epoch {}", epochCount);
230: François Garillot, info, IfStmt, log.info("New best model: score = {}, epoch = {} (previous: score = {}, epoch = {})", score, epochCount, bestModelScore, bestModelEpoch);
228: Justin Long, info, IfStmt, log.info("Score at epoch {}: {}", epochCount, score);
268: François Garillot, info, IfStmt, log.info("Hit epoch termination condition at epoch {}. Details: {}", epochCount, termReason.toString());
86: raver119, info, IfStmt, log.info("Initializing ObservablesProvider...");
106: Adam Gibson, error, MethodDeclaration, log.error("Uncaught exception: " + ex);
196: raver119, warn, BlockStmt, log.warn("Number of workers [{}] isn't optimal for available devices [{}]", workers, Nd4j.getAffinityManager().getNumberOfDevices());
273: raver119, info, BlockStmt, log.info("Stopping everyone...");
285: raver119, info, BlockStmt, log.info("Shutting down iterator...");
309: Adam Gibson, warn, BlockStmt, log.warn("Parameters were never averaged on current fit(). Ratios of batch size, num workers, and averaging frequency may be responsible.");
333: François Garillot, info, BlockStmt, log.info("Averaged score: " + score);
426: François Garillot, warn, IfStmt, log.warn("RoutingIterationListener provided without providing any StatsStorage instance. Iterator may not function without one. Listener: {}", l);
468: raver119, info, MethodDeclaration, log.info("Using workspaceMode {} for training", workspaceMode.name());
480: raver119, info, IfStmt, log.info("Creating asynchronous prefetcher...");
483: François Garillot, warn, BlockStmt, log.warn("Number of workers [{}] isn't optimal for available devices [{}]", workers, Nd4j.getAffinityManager().getNumberOfDevices());
498: raver119, info, MethodDeclaration, log.info("Starting ParallelWrapper training round...");
517: raver119, info, BlockStmt, log.info("Feeding dataset {} to worker {}", intcnt, pos);
565: raver119, info, BlockStmt, log.info("Averaging time: {} ms", timeA2 - timeA1);
582: raver119, info, BlockStmt, log.info("Stopping everyone...");
594: raver119, info, BlockStmt, log.info("Shutting down iterator...");
618: raver119, info, BlockStmt, log.info("Iterations passed: {}", iterationsCounter.get());
827: François Garillot, info, SwitchEntryStmt, log.info("Creating new AveragingTraining instance");
833: raver119, info, IfStmt, log.info("Creating new GradientsAccumulator instance with threshold of [5e-4");
399: raver119, debug, TryStmt, log.debug("Terminating all workspaces for trainer_{}", threadId);
313: raver119, error, BlockStmt, log.error("replicatedModel is NULL at worker_{}", threadId);
53: raver119, warn, IfStmt, log.warn("GradientsAccumulator is undefined, gradients sharing will be skipped");
69: Alex Black, info, MethodDeclaration, log.info("Features shape: {}", Arrays.toString(iterator.next().getFeatureMatrix().shapeInfoDataBuffer().asInt()));
97: Alex Black, info, MethodDeclaration, log.info("Features shape: {}", Arrays.toString(iterator.next().getFeatureMatrix().shapeInfoDataBuffer().asInt()));
126: Alex Black, info, MethodDeclaration, log.info("Features shape: {}", Arrays.toString(iterator.next().getFeatureMatrix().shapeInfoDataBuffer().asInt()));
275: raver119, info, MethodDeclaration, log.info("NumColumns: {}", ds.getLabels().columns());
283: raver119, info, MethodDeclaration, log.info(eval.stats());
289: raver119, info, MethodDeclaration, log.info("NumColumns: {}", ds.getLabels().columns());
330: raver119, info, MethodDeclaration, log.info(eval.stats());
43: Adam Gibson, info, MethodDeclaration, log.info("Load data....");
47: Adam Gibson, info, MethodDeclaration, log.info("Build model....");
89: Adam Gibson, info, MethodDeclaration, log.info("Train model....");
103: Adam Gibson, info, ForStmt, log.info("*** Completed epoch {}, time: {} ***", i, (time2 - time1));
107: Adam Gibson, info, MethodDeclaration, log.info("*** Training complete, time: {} ***", (timeY - timeX));
109: Adam Gibson, info, MethodDeclaration, log.info("Evaluate model....");
116: Adam Gibson, info, MethodDeclaration, log.info(eval.stats());
119: Adam Gibson, info, MethodDeclaration, log.info("****************Example finished********************");
43: raver119, info, MethodDeclaration, log.info("Array shape: {}", Arrays.toString(array.shapeInfoDataBuffer().asInt()));
65: raver119, info, MethodDeclaration, log.info("Array shape: {}", Arrays.toString(array.shapeInfoDataBuffer().asInt()));
40: Adam Gibson, info, MethodDeclaration, log.info("Load data....");
44: Adam Gibson, info, MethodDeclaration, log.info("Build model....");
46: Adam Gibson, info, MethodDeclaration, log.info("Sending parameters");
60: Adam Gibson, info, IfStmt, log.info("Calling fit on multi layer network");
65: Adam Gibson, info, MethodDeclaration, log.info("About to send params in");
68: Adam Gibson, info, MethodDeclaration, log.info("Sent params");
36: Adam Gibson, info, MethodDeclaration, log.info("Load data....");
40: Adam Gibson, info, MethodDeclaration, log.info("Build model....");
85: Alex Black, info, MethodDeclaration, log.info("Starting early stopping training");
87: François Garillot, warn, BlockStmt, log.warn("No score calculator provided for early stopping. Score will be reported as 0.0 to epoch termination conditions");
130: Alex Black, info, IfStmt, log.info("Hit per iteration epoch termination condition at epoch {}, iteration {}. Reason: {}", epochCount, epochCount, terminationReason);
159: François Garillot, info, WhileStmt, log.info("Completed training epoch {}", epochCount);
175: François Garillot, info, IfStmt, log.info("New best model: score = {}, epoch = {} (previous: score = {}, epoch = {})", score, epochCount, bestModelScore, bestModelEpoch);
173: Alex Black, info, IfStmt, log.info("Score at epoch {}: {}", epochCount, score);
211: François Garillot, info, IfStmt, log.info("Hit epoch termination condition at epoch {}. Details: {}", epochCount, termReason.toString());
74: François Garillot, warn, IfStmt, log.warn("RoutingIterationListener provided without providing any StatsStorage instance. Iterator may not function without one. Listener: {}", l);
109: Alex Black, debug, IfStmt, log.debug("Scored {} examples ", totalCount);
122: Alex Black, debug, IfStmt, log.debug("Scored {} examples ", totalCount);
141: Alex Black, debug, IfStmt, log.debug("Scored {} examples ", totalCount);
121: Alex Black, debug, IfStmt, log.debug("Scored {} examples ", totalCount);
145: Alex Black, debug, IfStmt, log.debug("Scored {} examples ", totalCount);
181: raver119, info, MethodDeclaration, log.info("Initiating RDD<DataSet> export at {}", baseDir);
185: raver119, info, MethodDeclaration, log.info("RDD<DataSet> export complete at {}", baseDir);
197: raver119, info, MethodDeclaration, log.info("Initiating RDD<MultiDataSet> export at {}", baseDir);
201: raver119, info, MethodDeclaration, log.info("RDD<MultiDataSet> export complete at {}", baseDir);
217: raver119, info, MethodDeclaration, log.info("Attempting to delete temporary directory: {}", tempDirPath);
232: raver119, warn, CatchClause, log.warn("Could not delete temporary directory: {}", tempDirPath, e);
229: raver119, info, TryStmt, log.info("Deleted temporary directory: {}", tempDirPath);
392: Adam Gibson, info, IfStmt, log.info("Coalescing PortableDataStreams from {} to {} partitions", origNumPartitions, numWorkers);
499: François Garillot, info, IfStmt, log.info("Coalescing streams from {} to {} partitions", origNumPartitions, numWorkers);
636: Alex Black, info, MethodDeclaration, log.info("Starting training of split {} of {}. workerMiniBatchSize={}, averagingFreq={}, Configured for {} workers", splitNum, numSplits, batchSizePerWorker, averagingFrequency, numWorkers);
662: Alex Black, info, MethodDeclaration, log.info("Starting training of split {} of {}. workerMiniBatchSize={}, averagingFreq={}, Configured for {} workers", splitNum, numSplits, batchSizePerWorker, averagingFrequency, numWorkers);
691: Alex Black, info, MethodDeclaration, log.info("Starting training of split {} of {}. workerMiniBatchSize={}, averagingFreq={}, Configured for {} workers", splitNum, numSplits, batchSizePerWorker, averagingFrequency, numWorkers);
720: Alex Black, info, MethodDeclaration, log.info("Starting training of split {} of {}. workerMiniBatchSize={}, averagingFreq={}, Configured for {} workers", splitNum, numSplits, batchSizePerWorker, averagingFrequency, numWorkers);
746: Alex Black, info, MethodDeclaration, log.info("Starting training of split {} of {}. workerMiniBatchSize={}, averagingFreq={}, Configured for {} workers", splitNum, numSplits, batchSizePerWorker, averagingFrequency, numWorkers);
768: Alex Black, info, MethodDeclaration, log.info("Starting training of split {} of {}. workerMiniBatchSize={}, averagingFreq={}, Configured for {} workers", splitNum, numSplits, batchSizePerWorker, averagingFrequency, numWorkers);
834: Alex Black, info, IfStmt, log.info("Skipping imbalanced split with no data for all executors");
863: Alex Black, info, MethodDeclaration, log.info("Completed training of split {} of {}", splitNum, totalSplits);
63: François Garillot, debug, ConstructorDeclaration, log.debug("Initializing NTPTimeSource with query frequency {} ms using server {}", synchronizationFreqMS, ntpServer);
72: François Garillot, debug, ConstructorDeclaration, log.debug("Initialized NTPTimeSource with query frequency {} ms using server {}", synchronizationFreqMS, ntpServer);
85: François Garillot, Error, CatchClause, log.info("Error parsing system property \"{}\" with value \"{}\"", NTP_SOURCE_UPDATE_FREQUENCY_MS_PROPERTY, property);
90: François Garillot, info, IfStmt, log.info("Invalid update frequency (milliseconds): {} is less than minimum {}. Using default update frequency: {} ms", parseAttempt, MIN_UPDATE_FREQUENCY, DEFAULT_UPDATE_FREQUENCY);
129: François Garillot, Error, CatchClause, log.error("Error querying NTP server, attempt {} of {}", (i + 1), MAX_QUERY_RETRIES, e);
134: Alex Black, error, IfStmt, log.error("Could not successfully query NTP server after " + MAX_QUERY_RETRIES + " tries");
140: Alex Black, debug, MethodDeclaration, log.debug("Updated local time offset based on NTP server result. Offset = {}", lastOffsetMilliseconds);
256: Alex Black, info, MethodDeclaration, log.info("EarlyStopping: onStart called");
262: François Garillot, info, MethodDeclaration, log.info("EarlyStopping: onEpoch called (epochNum={}, score={}}", epochNum, score);
268: François Garillot, info, MethodDeclaration, log.info("EarlyStopping: onCompletion called (result: {})", esResult);
280: Alex Black, info, MethodDeclaration, log.info("EarlyStopping: onStart called");
286: Alex Black, info, MethodDeclaration, log.info("EarlyStopping: onEpoch called (epochNum={}, score={}}", epochNum, score);
292: Alex Black, info, MethodDeclaration, log.info("EorlyStopping: onCompletion called (result: {})", esResult);
44: Alex Black, info, MethodDeclaration, log.info("Setting up Spark Context...");
90: Alex Black, info, MethodDeclaration, log.info("***** Evaluation *****");
91: Alex Black, info, MethodDeclaration, log.info(evaluation.stats());
70: raver119, info, MethodDeclaration, log.info("matrix shape: {}", Arrays.toString(matIND.shapeInfoDataBuffer().asInt()));
166: Adam Gibson, info, MethodDeclaration, log.info("Created lookup table of size " + Arrays.toString(gloveWeightLookupTable.getSyn0().shape()));
184: Adam Gibson, info, MethodDeclaration, log.info("Calculated co occurrences");
273: Adam Gibson, Error, ForStmt, log.info("Error at iteration " + i + " was " + error);
137: jyt109, info, MethodDeclaration, log.info("Start training ...");
177: raver119, info, MethodDeclaration, log.info("Vocab size: {}", vocabCache.numWords());
180: jyt109, info, MethodDeclaration, log.info("Building Huffman Tree ...");
194: jyt109, info, MethodDeclaration, log.info("Mapping to RDD(vocabWordList, cumulative sentence count) ...");
199: jyt109, info, MethodDeclaration, log.info("Broadcasting word2vec variables to workers ...");
206: jyt109, info, MethodDeclaration, log.info("Training word2vec sentences ...");
220: raver119, info, MethodDeclaration, log.info("Averaging results...");
248: raver119, info, MethodDeclaration, log.info("Finished calculations...");
261: agibsonccc, info, IfStmt, log.info("Words so far " + newWords + " out of " + totalWords);
413: agibsonccc, info, IfStmt, log.info("Words so far " + newWords + " out of " + totalWords);
237: raver119, info, MethodDeclaration, log.info("VocabWords: " + vocabCache.words());
246: fartovii, info, MethodDeclaration, log.info("Red word: " + redVocab);
247: fartovii, info, MethodDeclaration, log.info("Flower word: " + flowerVocab);
248: fartovii, info, MethodDeclaration, log.info("World word: " + worldVocab);
249: fartovii, info, MethodDeclaration, log.info("Strange word: " + strangeVocab);
453: fartovii, info, MethodDeclaration, log.info("Strange token: " + token);
454: fartovii, info, MethodDeclaration, log.info("Strange word: " + word);
155: raver119, info, IfStmt, log.info("Repartitioning corpus to {} parts...", workers);
183: raver119, info, IfStmt, log.info("Trying auto discovery mode...");
203: raver119, info, IfStmt, log.info("availableHosts: {}", availableHosts);
227: raver119, info, IfStmt, log.info("Got Shards so far: {}", paramServerConfiguration.getShardAddresses());
266: François Garillot, info, MethodDeclaration, log.info("Total number of sequences: {}; Total number of elements entries: {}; Total number of unique elements: {}", numberOfSequences, numberOfElements, numberOfUniqueElements);
320: raver119, info, MethodDeclaration, log.info("Training finish, starting cleanup...");
146: raver119, warn, BlockStmt, log.warn("Skipping empty sequence...");
61: raver119, info, ConstructorDeclaration, log.info("Creating TrainingDriver for worker...");
73: raver119, info, ConstructorDeclaration, log.info("Creating TrainingDriver for master...");
74: raver119, info, ConstructorDeclaration, log.info("Params at Master BEFORE: {}", params.meanNumber().doubleValue());
89: raver119, info, MethodDeclaration, log.info("Attaching thread...");
111: raver119, info, MethodDeclaration, log.info("Attaching thread...");
156: raver119, WARN, BlockStmt, log.warn("WARNING! Using more workers then number of available computational devices!");
162: raver119, info, IfStmt, log.info("Starting ParallelWrapper at thread {}", Thread.currentThread().getId());
236: raver119, warn, IfStmt, log.warn("Can't get IP address to start VoidParameterServer client. Using localhost instead");
251: raver119, warn, IfStmt, log.warn("Adding SleepyListener: {} ms", trainingConfiguration.getDebugLongerIterations());
265: raver119, info, IfStmt, log.info("Using standalone model instead...");
258: raver119, info, IfStmt, log.info("Params at PW: {}", originalModel.params().meanNumber().doubleValue());
330: raver119, info, IfStmt, log.info("Master thread done...");
453: François Garillot, info, MethodDeclaration, log.info("Setting controller address to {}:{}", voidConfiguration.getControllerAddress(), voidConfiguration.getUnicastPort());
698: raver119, info, MethodDeclaration, log.info("Starting training of split {} of {}. workerMiniBatchSize={}, updatesThreshold={}, Configured for {} workers", splitNum, numSplits, batchSizePerWorker, threshold, numWorkers);
730: raver119, info, MethodDeclaration, log.info("Starting training of split {} of {}. workerMiniBatchSize={}, updatesThreshold={}, Configured for {} workers", splitNum, numSplits, batchSizePerWorker, threshold, numWorkers);
761: raver119, info, MethodDeclaration, log.info("Starting training of split {} of {}. workerMiniBatchSize={}, updatesThreshold={}, Configured for {} workers", splitNum, numSplits, batchSizePerWorker, threshold, numWorkers);
794: raver119, info, MethodDeclaration, log.info("Starting training of split {} of {}. workerMiniBatchSize={}, updatesThreshold={}, Configured for {} workers", splitNum, numSplits, batchSizePerWorker, threshold, numWorkers);
831: raver119, info, MethodDeclaration, log.info("Starting training of split {} of {}. workerMiniBatchSize={}, updatesThreshold={}, Configured for {} workers", splitNum, numSplits, batchSizePerWorker, threshold, numWorkers);
864: raver119, info, MethodDeclaration, log.info("Starting training of split {} of {}. workerMiniBatchSize={}, updatesThreshold={}, Configured for {} workers", splitNum, numSplits, batchSizePerWorker, threshold, numWorkers);
897: raver119, info, MethodDeclaration, log.info("Starting training of split {} of {}. workerMiniBatchSize={}, updatesThreshold={}, Configured for {} workers", splitNum, numSplits, batchSizePerWorker, threshold, numWorkers);
1153: raver119, warn, BlockStmt, log.warn("shakeFrequency of 1 means that all updates will be sparse, and might lead to worse performance");
74: Alex Black, Error, CatchClause, log.warn("Error parsing UI I18N content file; skipping: {}", r.getResource(), t);
65: Alex Black, warn, IfStmt, log.warn("Skipping language resource file: cannot infer language: {}", path);
101: Alex Black, Error, CatchClause, log.debug("Error parsing UI I18N content file; skipping: {}", r.getResource(), e.getMessage());
108: Alex Black, debug, IfStmt, log.debug("Invalid line in I18N file: {}, \"{}\"", r.getResource(), line);
118: Alex Black, trace, MethodDeclaration, log.trace("Loaded {} messages from file {}", count, r.getResource());
147: Alex Black, debug, MethodDeclaration, log.debug("UI: Set language to {}", langCode);
97: François Garillot, Error, CatchClause, log.warn("Error displaying image", e);
103: Alex Black, warn, IfStmt, log.warn("Received incorrectly formatted data from remote listener (has type = " + (type != null) + ", has data class = " + (dataClass != null) + ", has data = " + (data != null) + ")");
150: François Garillot, warn, CatchClause, log.warn("Skipping invalid remote data: exception encountered for class {}", dataClass, e);
145: François Garillot, warn, IfStmt, log.warn("Skipping invalid remote data: class {} in not an instance of {}", dataClass, StorageMetaData.class.getName());
158: Alex Black, warn, CatchClause, log.warn("Skipping invalid remote UI data: exception encountered when deserializing data", e);
177: François Garillot, warn, CatchClause, log.warn("Skipping invalid remote UI data: exception encountered for class {}", dataClass, e);
172: François Garillot, warn, IfStmt, log.warn("Skipping invalid remote data: class {} in not an instance of {}", dataClass, Persistable.class.getName());
185: Alex Black, warn, CatchClause, log.warn("Skipping invalid remote data: exception encountered when deserializing data", e);
83: Alex Black, warn, CatchClause, log.warn("Invalid system property: {} = {}", CHART_MAX_POINTS_PROPERTY, maxChartPointsProp);
321: Alex Black, debug, CatchClause, log.debug("Invalid call to setWorkerByIdx", e);
117: Alex Black, Error, IfStmt, log.error("Error loading UI Language (Internationalization) data: no language resource data files were" + "found on the classpath. This usually occurs when running DL4J's UI from an uber-jar, which was " + "built incorrectly (without language resource files). See https://deeplearning4j.org/visualization#issues" + "for more details");
180: Alex Black, warn, CatchClause, log.warn("Could not parse UI port property \"{}\" with value \"{}\"", UI_SERVER_PORT_PROPERTY, portProperty, e);
208: Alex Black, error, IfStmt, log.error("Unknown error when starting UI server", e);
203: Alex Black, Error, IfStmt, log.error("Error starting UI server due to missing play.crypto.provider config: This usually occurs due to missing" + " application.conf file. DL4J's UI (based on the Play framework) requires this file in order" + " to run. File can be missing due to incorrect creation of uber-jars that do not include resource" + " files. See https://deeplearning4j.org/visualization#issues for more information", e);
213: Alex Black, info, MethodDeclaration, log.info("DL4J UI Server started at {}", getAddress());
228: Alex Black, error, CatchClause, log.error("Failed to create temporary file for stats storage", e);
267: Alex Black, debug, IfStmt, log.debug("Loaded UI module via service loader: {}", m.getClass());
298: Alex Black, info, MethodDeclaration, log.info("StatsStorage instance attached to UI: {}", statsStorage);
320: Alex Black, info, IfStmt, log.info("StatsStorage instance detached from UI: {}", statsStorage);
376: Alex Black, error, CatchClause, log.error("Unexpected exception from Event routing runnable", e);
381: Alex Black, debug, MethodDeclaration, log.debug("PlayUIServer.StatsEventRouterRunnable started");
35: Alex Black, debug, CatchClause, log.debug("Could not find asset: {}", s);
54: François Garillot, debug, MethodDeclaration, log.debug("{}", resp);
73: raver119, error, CatchClause, log.error("Exception caught but ignored: " + e.getMessage());
141: raver119, info, MethodDeclaration, log.info("Load data....");
145: raver119, info, MethodDeclaration, log.info("Build model....");
170: raver119, info, MethodDeclaration, log.info("Train model....");
184: raver119, info, MethodDeclaration, log.info("Evaluate model....");
192: raver119, info, MethodDeclaration, log.info(eval.stats());
193: raver119, info, MethodDeclaration, log.info("****************Example finished********************");
234: raver119, info, MethodDeclaration, log.info("Size(-1): " + array.size(-1));
235: raver119, info, MethodDeclaration, log.info("Size(-2): " + array.size(-2));
239: raver119, info, ForStmt, log.info("x: " + (x) + " y: " + y);
261: raver119, info, MethodDeclaration, log.info("Load data....");
265: raver119, info, MethodDeclaration, log.info("Build model....");
310: raver119, info, ForStmt, log.info("*** Completed epoch {}, Time elapsed: {} ***", i, (time2 - time1));
314: raver119, info, MethodDeclaration, log.info("Evaluate model....");
321: raver119, info, MethodDeclaration, log.info(eval.stats());
324: raver119, info, MethodDeclaration, log.info("****************Example finished********************");
336: Alex Black, info, MethodDeclaration, log.info("Load data....");
339: Alex Black, info, MethodDeclaration, log.info("Build model....");
358: Alex Black, info, MethodDeclaration, log.info("Train model....");
636: Alex Black, Error, CatchClause, log.debug("Error getting device info", e);
69: Adam Gibson, warn, IfStmt, log.warn("Could not generate hardware UID{}. Using fallback: JVM UID as hardware UID.", (noInterfaces ? " (no interfaces)" : ""));
66: crockpotveggies, info, IfStmt, log.info("Using cached model at " + cachedFile.toString());
63: crockpotveggies, info, IfStmt, log.info("Downloading model to " + cachedFile.toString());
71: crockpotveggies, info, IfStmt, log.info("Verifying download...");
75: François Garillot, info, IfStmt, log.info("Checksum local is " + localChecksum + ", expecting " + expectedChecksum);
78: crockpotveggies, error, IfStmt, log.error("Checksums do not match. Cleaning up files and failing...");
34: crockpotveggies, info, ForeachStmt, log.info("Testing zoo model " + entry.getKey());
57: crockpotveggies, info, MethodDeclaration, log.info(decodedLabels);
82: Samuel Audet, info, MethodDeclaration, log.info(predictions.toString());
106: Samuel Audet, info, ForeachStmt, log.info(obj.toString() + " " + classPrediction);
131: Samuel Audet, info, ForeachStmt, log.info(obj.toString() + " " + classPrediction);
44: crockpotveggies, info, ForeachStmt, log.info("Testing training on zoo model " + entry.getKey());
