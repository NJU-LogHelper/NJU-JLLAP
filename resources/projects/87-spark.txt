66: Charles Leclerc, warn, CatchClause, LOG.warn("Custom error page handler for status code {} has thrown an exception: {}. Using default page instead.", status, e.getMessage());
264: Per Wendel, warn, CatchClause, LOG.warn("Exception when reading body", e);
505: Almaz, debug, IfStmt, LOG.debug("matchedPart: " + matchedPart + " = " + decodedReq);
119: Per Wendel, debug, IfStmt, LOG.debug("Redirecting ({} {} to {}", "Found", HttpServletResponse.SC_FOUND, location);
124: julieng, warn, CatchClause, LOG.warn("Redirect failure", ioException);
136: Per Wendel, debug, IfStmt, LOG.debug("Redirecting ({} to {}", httpStatusCode, location);
144: Per Wendel, warn, CatchClause, LOG.warn("Exception when trying to redirect permanently", e);
91: David, error, LambdaExpr, LOG.error("ignite failed", e);
320: Per Wendel, warn, IfStmt, LOG.warn("Static file location has already been set");
340: Per Wendel, warn, IfStmt, LOG.warn("External static file location has already been set");
445: Per Wendel, info, CatchClause, LOG.info("Interrupted by another thread");
563: Thomas Williams, error, CatchClause, LOG.error("server interrupted", e);
93: Jan Galinski, error, CatchClause, logger.error("Could not get first available port (port set to 0), using default: {}", SPARK_DEFAULT_PORT);
142: Arun Y, info, MethodDeclaration, logger.info("== {} has ignited ...", NAME);
146: Thales E. Cervi, info, IfStmt, logger.info(">> Listening on {}:{}", host, port);
144: Thales E. Cervi, info, IfStmt, logger.info(">> Listening on Custom Server ports!");
166: Jan Galinski, info, MethodDeclaration, logger.info(">>> {} shutting down ...", NAME);
172: Per Wendel, error, CatchClause, logger.error("stop failed", e);
175: Jan Galinski, info, MethodDeclaration, logger.info("done");
64: Per Wendel, error, CatchClause, logger.error("creation of websocket context handler failed.", ex);
54: Charles Leclerc, error, IfStmt, LOG.error("", e);
162: Charles Leclerc, info, IfStmt, LOG.info("The requested route [{}] has not been mapped in Spark for {}: [{}]", uri, ACCEPT_TYPE_REQUEST_MIME_HEADER, acceptType);
93: Per Wendel, debug, IfStmt, LOG.debug(e.getClass().getSimpleName() + " when trying to get resource. " + e.getMessage());
92: Per Wendel, debug, IfStmt, LOG.debug(e.getClass().getSimpleName() + " when trying to get resource. " + e.getMessage());
177: Per Wendel, debug, MethodDeclaration, LOG.debug("Adds route: " + entry);
241: Per Wendel, debug, IfStmt, LOG.debug("Removing path {}", path, httpMethod == null ? "" : " with HTTP method " + httpMethod);
278: David, error, CatchClause, LOG.error("The @Route value: " + route + " is not in the correct format", e);
269: David, error, CatchClause, LOG.error("The @Route value: " + route + " has an invalid HTTP method part: " + httpMethod + ".");
151: Per Wendel, debug, IfStmt, LOG.debug(relativePath);
78: Per Wendel, warn, CatchClause, LOG.warn(directoryTraversalDetection.getMessage() + " directory traversal detection for path: " + httpRequest.getPathInfo());
150: Charles Leclerc, info, IfStmt, LOG.info("StaticResourceHandler configured with folder = " + folder);
178: Per Wendel, Error, CatchClause, LOG.error("Error when creating external StaticResourceHandler", e);
168: Per Wendel, error, IfStmt, LOG.error("External Static resource location must be a folder");
176: Per Wendel, info, TryStmt, LOG.info("External StaticResourceHandler configured with folder = " + folder);
27: Charles Leclerc, warn, MethodDeclaration, LOG.warn("Registering external static files folder [{}] as [{}].", folder, unixLikeFolder);
39: Per Wendel, debug, MethodDeclaration, LOGGER.debug("setup()");
48: Per Wendel, debug, LambdaExpr, LOGGER.debug("before-req.body() = " + req.body());
53: Per Wendel, debug, LambdaExpr, LOGGER.debug("get-req.body() = " + req.body());
59: Per Wendel, debug, LambdaExpr, LOGGER.debug("after-before-req.body() = " + req.body());
69: Wojciech Szymanski, info, MethodDeclaration, LOGGER.info(response.body);
422: Charles Leclerc, info, MethodDeclaration, LOGGER.info(response.body);
440: Charles Leclerc, info, MethodDeclaration, LOGGER.info(response.body);
153: Wojciech Szymanski, info, MethodDeclaration, LOGGER.info(response.body);
161: Wojciech Szymanski, info, MethodDeclaration, LOGGER.info(response.body);
35: Thomas Williams, info, MethodDeclaration, LOGGER.info("got port ");
60: Per Wendel, debug, IfStmt, LOGGER.debug("tearDown().deleting: " + tmpExternalFile);
32: Jan Galinski, info, LambdaExpr, LOGGER.info("Before");
36: Jan Galinski, info, LambdaExpr, LOGGER.info("After");
42: Jan Galinski, info, ForeachStmt, LOGGER.info("attr: " + attr);
32: Per Wendel, debug, IfStmt, LOGGER.debug("tearDown().deleting: " + MyApp.tmpExternalFile);
62: Jan Galinski, info, TryStmt, LOGGER.info(">>> STARTING EMBEDDED JETTY SERVER for jUnit testing of SparkFilter");
66: Jan Galinski, info, TryStmt, LOGGER.info(">>> STOPPING EMBEDDED JETTY SERVER");
56: Charles Leclerc, debug, IfStmt, LOGGER.debug("tearDown().deleting: " + tmpExternalFile);
61: Per Wendel, debug, IfStmt, LOGGER.debug("tearDown().deleting: " + tmpExternalFile);
63: Charles Leclerc, debug, IfStmt, LOGGER.debug("tearDown(). Deleting tmp files");
