286: Juergen Hoeller, debug, CatchClause, logger.debug("PointcutExpression matching rejected target class", ex);
277: Juergen Hoeller, debug, CatchClause, logger.debug("PointcutExpression matching rejected target class - trying fallback expression", ex);
352: Juergen Hoeller, debug, IfStmt, logger.debug("Could not access current invocation - matching with limited context: " + ex);
381: Juergen Hoeller, debug, IfStmt, logger.debug("Failed to evaluate join point for arguments " + Arrays.asList(args) + " - falling back to non-match", ex);
406: Juergen Hoeller, debug, CatchClause, logger.debug("Failed to create fallback PointcutExpression", ex);
490: Juergen Hoeller, debug, CatchClause, logger.debug("PointcutExpression matching rejected target method", ex);
80: Juergen Hoeller, fatal, IfStmt, logger.fatal(makeMessageFor(message));
74: Juergen Hoeller, error, IfStmt, logger.error(makeMessageFor(message));
68: Juergen Hoeller, warn, IfStmt, logger.warn(makeMessageFor(message));
62: Juergen Hoeller, info, IfStmt, logger.info(makeMessageFor(message));
56: Juergen Hoeller, debug, IfStmt, logger.debug(makeMessageFor(message));
243: Arjen Poutsma, debug, IfStmt, logger.debug("Found AspectJ method: " + candidateAdviceMethod);
279: Arjen Poutsma, debug, IfStmt, logger.debug("Processing pointcut '" + candidateAdviceMethod.getName() + "'");
161: Chris Beams, debug, IfStmt, logger.debug("Creating CGLIB proxy: target source is " + this.advised.getTargetSource());
271: Juergen Hoeller, info, IfStmt, logger.info("Method [" + method + "] is package-visible across different ClassLoaders " + "and cannot get proxied via CGLIB: Declare this method as public or protected " + "if you need to support invocations through the proxy.");
262: Juergen Hoeller, warn, IfStmt, logger.warn("Unable to proxy interface-implementing method [" + method + "] because " + "it is marked as final: Consider using interface-based JDK proxies instead!");
265: Juergen Hoeller, info, IfStmt, logger.info("Final method [" + method + "] cannot get proxied via CGLIB: " + "Calls to this method will NOT be routed to the target instance and " + "might lead to NPEs against uninitialized fields in the proxy instance.");
813: Arjen Poutsma, debug, IfStmt, logger.debug("Found finalize() method - using NO_OVERRIDE");
819: Arjen Poutsma, debug, IfStmt, logger.debug("Method is declared on Advised interface: " + method);
825: Arjen Poutsma, debug, IfStmt, logger.debug("Found 'equals' method: " + method);
830: Arjen Poutsma, debug, IfStmt, logger.debug("Found 'hashCode' method: " + method);
885: Juergen Hoeller, debug, IfStmt, logger.debug("Method return type ensures 'this' cannot be returned - " + "using DISPATCH_TARGET: " + method);
878: Juergen Hoeller, debug, IfStmt, logger.debug("Method return type is assignable from target type and " + "may therefore return 'this' - using INVOKE_TARGET: " + method);
844: Arjen Poutsma, debug, IfStmt, logger.debug("Must expose proxy on advised method: " + method);
861: Juergen Hoeller, debug, IfStmt, logger.debug("Unable to apply any optimizations to advised method: " + method);
853: Juergen Hoeller, debug, IfStmt, logger.debug("Method has advice and optimizations are enabled: " + method);
119: Arjen Poutsma, debug, IfStmt, logger.debug("Creating JDK dynamic proxy: target source is " + this.advised.getTargetSource());
66: Juergen Hoeller, debug, CatchClause, logger.debug("Unable to instantiate proxy using Objenesis, " + "falling back to regular proxy construction", ex);
258: Arjen Poutsma, warn, IfStmt, logger.warn("Using non-singleton proxies with singleton targets is often undesirable. " + "Enable prototype proxies by setting the 'targetName' property.");
346: Arjen Poutsma, trace, IfStmt, logger.trace("Creating copy of prototype ProxyFactoryBean config: " + this);
363: Arjen Poutsma, trace, IfStmt, logger.trace("Using ProxyCreatorSupport copy: " + copy);
395: Arjen Poutsma, debug, IfStmt, logger.debug("Bean with name '" + finalName + "' concluding interceptor chain " + "is not an advisor class: treating it as a target or TargetSource");
421: Arjen Poutsma, debug, IfStmt, logger.debug("Could not determine type of bean with name '" + beanName + "' - assuming it is neither an Advisor nor an Advice");
453: Arjen Poutsma, trace, IfStmt, logger.trace("Configuring advisor or advice '" + name + "'");
499: Arjen Poutsma, debug, IfStmt, logger.debug("Refreshing bean named '" + pa.getBeanName() + "'");
562: Arjen Poutsma, trace, IfStmt, logger.trace("Adding advisor with name '" + name + "'");
586: Arjen Poutsma, debug, IfStmt, logger.debug("Refreshing target with name '" + this.targetName + "'");
576: Arjen Poutsma, trace, IfStmt, logger.trace("Not refreshing target: Bean name not specified in 'interceptorNames'.");
617: Arjen Poutsma, debug, IfStmt, logger.debug("Advice has changed; recaching singleton instance");
87: Arjen Poutsma, debug, IfStmt, logger.debug("Found exception handler method: " + method);
111: Arjen Poutsma, trace, IfStmt, logger.trace("Trying to find handler for exception of type [" + exceptionClass.getName() + "]");
119: Arjen Poutsma, debug, IfStmt, logger.debug("Found handler for exception of type [" + exceptionClass.getName() + "]: " + handler);
383: Arjen Poutsma, trace, IfStmt, logger.trace("Did not attempt to auto-proxy infrastructure class [" + beanClass.getName() + "]");
421: Arjen Poutsma, debug, IfStmt, logger.debug("TargetSourceCreator [" + tsc + " found custom TargetSource for bean with name '" + beanName + "'");
531: Arjen Poutsma, debug, IfStmt, logger.debug("Creating implicit proxy for bean '" + beanName + "' with " + nrOfCommonInterceptors + " common interceptors and " + nrOfSpecificInterceptors + " specific interceptors");
103: Juergen Hoeller, debug, IfStmt, logger.debug("Skipping advisor '" + name + "' with dependency on currently created bean: " + ex.getMessage());
89: Juergen Hoeller, debug, IfStmt, logger.debug("Skipping currently created advisor '" + name + "'");
99: Arjen Poutsma, debug, IfStmt, logger.debug("Configuring AbstractBeanFactoryBasedTargetSource: " + targetSource);
222: Juergen Hoeller, trace, IfStmt, logger.trace(message);
219: Juergen Hoeller, trace, IfStmt, logger.trace(message, ex);
230: Juergen Hoeller, debug, CatchClause, logger.debug("Could not find unique TaskExecutor bean", ex);
236: Juergen Hoeller, info, IfStmt, logger.info("More than one TaskExecutor bean found within the context, and none is named " + "'taskExecutor'. Mark one of them as primary or name it 'taskExecutor' (possibly " + "as an alias) in order to use it for async processing: " + ex.getBeanNamesFound());
243: Juergen Hoeller, debug, CatchClause, logger.debug("Could not find default TaskExecutor bean", ex);
248: Juergen Hoeller, info, CatchClause, logger.info("No task executor bean found for async processing: " + "no bean of type TaskExecutor and no bean named 'taskExecutor' either");
311: Stephane Nicoll, error, CatchClause, logger.error("Exception handler for async method '" + method.toGenericString() + "' threw unexpected exception itself", ex2);
37: Stephane Nicoll, error, IfStmt, logger.error(String.format("Unexpected error occurred invoking async " + "method '%s'.", method), ex);
136: Juergen Hoeller, trace, IfStmt, logger.trace("Getting bean with name '" + this.targetBeanName + "' for type determination");
87: Arjen Poutsma, debug, IfStmt, logger.debug("Initializing lazy target object");
67: Juergen Hoeller, debug, IfStmt, logger.debug("Creating new instance of bean '" + getTargetBeanName() + "'");
78: Arjen Poutsma, debug, IfStmt, this.logger.debug("Destroying instance of bean '" + getTargetBeanName() + "'");
88: Juergen Hoeller, error, CatchClause, logger.error("Couldn't invoke destroy method of bean with name '" + getTargetBeanName() + "'", ex);
113: Juergen Hoeller, debug, IfStmt, logger.debug("Disconnecting TargetSource [" + this + "]");
123: Juergen Hoeller, error, CatchClause, logger.error(msg, ex);
204: Stephane Nicoll, debug, MethodDeclaration, logger.debug("Creating Commons object pool");
265: Juergen Hoeller, debug, IfStmt, logger.debug("Closing Commons ObjectPool");
84: Juergen Hoeller, debug, IfStmt, logger.debug("No target for prototype '" + getTargetBeanName() + "' bound to thread: " + "creating one and binding it to thread '" + Thread.currentThread().getName() + "'");
106: Arjen Poutsma, debug, MethodDeclaration, logger.debug("Destroying ThreadLocalTargetSource bindings");
103: Arjen Poutsma, debug, MethodDeclaration, logger.debug("Attempting to refresh target");
109: Arjen Poutsma, debug, MethodDeclaration, logger.debug("Target refreshed successfully");
133: Arjen Poutsma, debug, IfStmt, logger.debug("Refresh check delay elapsed - checking whether refresh is required");
130: Chris Beams, debug, IfStmt, logger.debug("Expected exception thrown", ex);
139: Chris Beams, debug, IfStmt, logger.debug("Expected exception thrown", err);
156: Chris Beams, debug, MethodDeclaration, logger.debug("finished");
90: Phillip Webb, Trace, MethodDeclaration, given(log.isTraceEnabled()).willReturn(true);
109: Phillip Webb, Trace, MethodDeclaration, given(log.isTraceEnabled()).willReturn(true);
119: Phillip Webb, trace, MethodDeclaration, verify(log).trace(anyString());
120: Phillip Webb, trace, MethodDeclaration, verify(log).trace(anyString(), eq(exception));
134: Phillip Webb, Trace, MethodDeclaration, given(log.isTraceEnabled()).willReturn(true);
40: Phillip Webb, Trace, MethodDeclaration, given(log.isTraceEnabled()).willReturn(true);
58: Phillip Webb, Trace, MethodDeclaration, given(log.isTraceEnabled()).willReturn(true);
69: Phillip Webb, trace, MethodDeclaration, verify(log).trace(anyString());
70: Phillip Webb, trace, MethodDeclaration, verify(log).trace(anyString(), eq(exception));
57: Phillip Webb, trace, MethodDeclaration, verify(log).trace(anyString());
76: Phillip Webb, trace, MethodDeclaration, verify(log).trace(anyString());
67: Phillip Webb, trace, MethodDeclaration, verify(log).trace(anyString());
68: Phillip Webb, trace, MethodDeclaration, verify(log).trace(anyString(), eq(exception));
420: Juergen Hoeller, debug, IfStmt, logger.debug("Ignoring optional value for property '" + tokens.actualName + "' - property not found on bean class [" + getRootClass().getName() + "]");
448: Juergen Hoeller, debug, IfStmt, logger.debug("Could not read previous value of property '" + this.nestedPath + tokens.canonicalName + "'", ex);
863: Stephane Nicoll, trace, IfStmt, logger.trace("Using cached nested property accessor for property '" + canonicalName + "'");
853: Stephane Nicoll, trace, IfStmt, logger.trace("Creating new nested " + getClass().getSimpleName() + " for property '" + canonicalName + "'");
490: Juergen Hoeller, debug, IfStmt, logger.debug("Could not access system ClassLoader: " + ex);
510: Arjen Poutsma, debug, IfStmt, logger.debug("No property editor [" + editorName + "] found for type " + targetType.getName() + " according to 'Editor' suffix convention");
500: Juergen Hoeller, warn, IfStmt, logger.warn("Editor class [" + editorName + "] does not implement [java.beans.PropertyEditor] interface");
186: Juergen Hoeller, debug, IfStmt, logger.debug("Not strongly caching class [" + beanClass.getName() + "] because it is not cache-safe");
271: Arjen Poutsma, trace, IfStmt, logger.trace("Getting BeanInfo for class [" + beanClass.getName() + "]");
276: Arjen Poutsma, trace, IfStmt, logger.trace("Caching PropertyDescriptors for class [" + beanClass.getName() + "]");
289: Arjen Poutsma, trace, IfStmt, logger.trace("Found bean property '" + pd.getName() + "'" + (pd.getPropertyType() != null ? " of type [" + pd.getPropertyType().getName() + "]" : "") + (pd.getPropertyEditorClass() != null ? "; editor [" + pd.getPropertyEditorClass().getName() + "]" : ""));
109: Juergen Hoeller, debug, IfStmt, logger.debug("Ignoring invalid bean property '" + pd.getName() + "': " + ex.getMessage());
122: Juergen Hoeller, debug, IfStmt, logger.debug("Ignoring candidate write method [" + method + "]: " + ex.getMessage());
240: Juergen Hoeller, trace, IfStmt, logger.trace("No String constructor found on type [" + requiredType.getName() + "]", ex);
245: Juergen Hoeller, debug, IfStmt, logger.debug("Construction via String failed for type [" + requiredType.getName() + "]", ex);
308: Juergen Hoeller, debug, IfStmt, logger.debug("Original ConversionService attempt failed - ignored since " + "PropertyEditor based conversion eventually succeeded", conversionAttemptEx);
332: Juergen Hoeller, trace, IfStmt, logger.trace("Enum class [" + enumType + "] cannot be loaded", ex);
337: Rob Harrop, trace, IfStmt, logger.trace("Field [" + fieldName + "] isn't an enum value for type [" + enumType + "]", ex);
354: Rob Harrop, trace, IfStmt, logger.trace("Field [" + convertedValue + "] isn't an enum value", ex);
414: Arjen Poutsma, debug, IfStmt, logger.debug("PropertyEditor [" + editor.getClass().getName() + "] does not support setValue call", ex);
427: Arjen Poutsma, trace, IfStmt, logger.trace("Converting String array to comma-delimited String [" + convertedValue + "]");
436: Juergen Hoeller, trace, IfStmt, logger.trace("Converting String to [" + requiredType + "] using property editor [" + editor + "]");
462: Arjen Poutsma, debug, IfStmt, logger.debug("PropertyEditor [" + editor.getClass().getName() + "] does not support setValue call", ex);
519: Juergen Hoeller, debug, IfStmt, logger.debug("Custom Collection type [" + original.getClass().getName() + "] does not allow for creating a copy - injecting original Collection as-is");
538: Arjen Poutsma, debug, IfStmt, logger.debug("Cannot access Collection of type [" + original.getClass().getName() + "] - injecting original Collection as-is: " + ex);
556: Juergen Hoeller, debug, IfStmt, logger.debug("Cannot create copy of Collection type [" + original.getClass().getName() + "] - injecting original Collection as-is: " + ex);
573: Juergen Hoeller, debug, IfStmt, logger.debug("Collection type [" + original.getClass().getName() + "] seems to be read-only - injecting original Collection as-is: " + ex);
594: Juergen Hoeller, debug, IfStmt, logger.debug("Custom Map type [" + original.getClass().getName() + "] does not allow for creating a copy - injecting original Map as-is");
614: Arjen Poutsma, debug, IfStmt, logger.debug("Cannot access Map of type [" + original.getClass().getName() + "] - injecting original Map as-is: " + ex);
632: Juergen Hoeller, debug, IfStmt, logger.debug("Cannot create copy of Map type [" + original.getClass().getName() + "] - injecting original Map as-is: " + ex);
652: Juergen Hoeller, debug, IfStmt, logger.debug("Map type [" + original.getClass().getName() + "] seems to be read-only - injecting original Map as-is: " + ex);
154: Juergen Hoeller, info, TryStmt, logger.info("JSR-330 'javax.inject.Inject' annotation found and supported for autowiring");
339: Juergen Hoeller, warn, IfStmt, logger.warn("Inconsistent constructor declaration on bean with name '" + beanName + "': single autowire-marked constructor flagged as optional - " + "this constructor is effectively required since there is no " + "default constructor to fall back to: " + candidates.get(0));
438: Stephane Nicoll, warn, IfStmt, logger.warn("Autowired annotation is not supported on static fields: " + field);
456: Stephane Nicoll, warn, IfStmt, logger.warn("Autowired annotation is not supported on static methods: " + method);
462: Stephane Nicoll, warn, IfStmt, logger.warn("Autowired annotation should only be used on methods with parameters: " + method);
530: Juergen Hoeller, debug, IfStmt, logger.debug("Autowiring by type from bean name '" + beanName + "' to bean named '" + autowiredBeanName + "'");
163: Arjen Poutsma, warn, IfStmt, logger.warn(msg + ": " + ex.getTargetException());
160: Arjen Poutsma, warn, IfStmt, logger.warn(msg, ex.getTargetException());
167: Juergen Hoeller, error, CatchClause, logger.error("Failed to invoke destroy method on bean with name '" + beanName + "'", ex);
198: Arjen Poutsma, Debug, MethodDeclaration, final boolean debug = logger.isDebugEnabled();
212: Juergen Hoeller, debug, IfStmt, logger.debug("Found init method on class [" + clazz.getName() + "]: " + method);
218: Juergen Hoeller, debug, IfStmt, logger.debug("Found destroy method on class [" + clazz.getName() + "]: " + method);
279: Juergen Hoeller, debug, IfStmt, logger.debug("Registered init method on class [" + this.targetClass.getName() + "]: " + element);
290: Juergen Hoeller, debug, IfStmt, logger.debug("Registered destroy method on class [" + this.targetClass.getName() + "]: " + element);
303: Arjen Poutsma, Debug, IfStmt, boolean debug = logger.isDebugEnabled();
306: Arjen Poutsma, debug, IfStmt, logger.debug("Invoking init method on bean '" + beanName + "': " + element.getMethod());
318: Arjen Poutsma, Debug, IfStmt, boolean debug = logger.isDebugEnabled();
321: Arjen Poutsma, debug, IfStmt, logger.debug("Invoking destroy method on bean '" + beanName + "': " + element.getMethod());
74: Juergen Hoeller, debug, IfStmt, logger.debug("Registered injected element on class [" + this.targetClass.getName() + "]: " + element);
86: Arjen Poutsma, Debug, IfStmt, boolean debug = logger.isDebugEnabled();
89: Juergen Hoeller, debug, IfStmt, logger.debug("Processing injected element of bean '" + beanName + "': " + element);
102: Juergen Hoeller, warn, MethodDeclaration, logger.warn(message);
114: Arjen Poutsma, debug, IfStmt, logger.debug(msg, ex);
136: Arjen Poutsma, debug, IfStmt, logger.debug("Property '" + key + "' set to value [" + value + "]");
211: Arjen Poutsma, warn, IfStmt, logger.warn("Target bean '" + this.targetBeanName + "' is still in creation due to a circular " + "reference - obtained value for property '" + this.propertyPath + "' may be outdated!");
209: Arjen Poutsma, debug, IfStmt, logger.debug("Could not access system property '" + key + "': " + ex);
156: Juergen Hoeller, debug, IfStmt, logger.debug("Loading from YAML: " + resource);
169: Juergen Hoeller, debug, IfStmt, logger.debug("Loaded " + count + " document" + (count > 1 ? "s" : "") + " from YAML resource: " + resource);
189: Juergen Hoeller, warn, IfStmt, logger.warn("Could not load map from " + resource + ": " + ex.getMessage());
225: Juergen Hoeller, debug, IfStmt, logger.debug("Merging document (no matchers set): " + map);
237: Juergen Hoeller, debug, IfStmt, logger.debug("Matched document with document matcher: " + properties);
246: Juergen Hoeller, debug, IfStmt, logger.debug("Matched document with default matcher: " + map);
253: Juergen Hoeller, debug, IfStmt, logger.debug("Unmatched document: " + map);
81: Arjen Poutsma, warn, MethodDeclaration, this.logger.warn(problem, problem.getRootCause());
466: Juergen Hoeller, debug, IfStmt, logger.debug("Creating instance of bean '" + beanName + "'");
503: Juergen Hoeller, debug, IfStmt, logger.debug("Finished creating instance of bean '" + beanName + "'");
569: Arjen Poutsma, debug, IfStmt, logger.debug("Eagerly caching bean '" + beanName + "' to allow for resolving potential circular references");
765: Juergen Hoeller, debug, IfStmt, logger.debug("Failed to resolve generic return type for factory method: " + ex);
995: Juergen Hoeller, debug, IfStmt, logger.debug("Bean creation exception on non-singleton FactoryBean type check: " + ex);
1390: Arjen Poutsma, trace, IfStmt, logger.trace("Not autowiring property '" + propertyName + "' of bean '" + beanName + "' by name: no matching bean found");
1384: Juergen Hoeller, debug, IfStmt, logger.debug("Added autowiring by name from bean name '" + beanName + "' via property '" + propertyName + "' to bean named '" + propertyName + "'");
1435: Juergen Hoeller, debug, IfStmt, logger.debug("Autowiring by type from bean name '" + beanName + "' via property '" + propertyName + "' to bean named '" + autowiredBeanName + "'");
1751: Arjen Poutsma, debug, IfStmt, logger.debug("Invoking afterPropertiesSet() on bean with name '" + beanName + "'");
1802: Arjen Poutsma, debug, IfStmt, logger.debug("No default init method named '" + initMethodName + "' found on bean with name '" + beanName + "'");
1811: Arjen Poutsma, debug, IfStmt, logger.debug("Invoking init method  '" + initMethodName + "' on bean with name '" + beanName + "'");
247: Arjen Poutsma, debug, IfStmt, logger.debug("Loaded " + loadCount + " bean definitions from location [" + location + "]");
230: Arjen Poutsma, debug, IfStmt, logger.debug("Loaded " + loadCount + " bean definitions from location pattern [" + location + "]");
254: Arjen Poutsma, debug, IfStmt, logger.debug("Returning cached instance of singleton bean '" + beanName + "'");
250: Arjen Poutsma, debug, IfStmt, logger.debug("Returning eagerly cached instance of singleton bean '" + beanName + "' that is not fully initialized yet - a consequence of a circular reference");
386: Juergen Hoeller, debug, IfStmt, logger.debug("Failed to convert bean '" + name + "' to required type '" + ClassUtils.getQualifiedName(requiredType) + "'", ex);
908: Juergen Hoeller, debug, IfStmt, logger.debug("Registering scope '" + scopeName + "' with implementation [" + scope + "]");
903: Juergen Hoeller, info, IfStmt, logger.info("Replacing scope '" + scopeName + "' from [" + previous + "] to [" + scope + "]");
1177: Arjen Poutsma, debug, IfStmt, logger.debug("PropertyEditorRegistrar [" + registrar.getClass().getName() + "] failed because it tried to obtain currently created bean '" + ex.getBeanName() + "': " + ex.getMessage());
1530: Juergen Hoeller, warn, IfStmt, logger.warn("Bean creation exception on non-lazy FactoryBean type check: " + ex);
1525: Juergen Hoeller, debug, IfStmt, logger.debug("Bean creation exception on lazy FactoryBean type check: " + ex);
1520: Juergen Hoeller, debug, IfStmt, logger.debug("Bean currently in creation on FactoryBean type check: " + ex);
252: Sam Brannen, trace, IfStmt, logger.trace("Override for '" + method.getName() + "' is [" + methodOverride + "]");
197: Arjen Poutsma, trace, IfStmt, this.beanFactory.logger.trace("Ignoring constructor [" + candidate + "] of bean '" + beanName + "': " + ex);
475: Arjen Poutsma, trace, IfStmt, this.beanFactory.logger.trace("Ignoring factory method [" + candidate + "] of bean '" + beanName + "': " + ex);
737: Arjen Poutsma, debug, IfStmt, this.beanFactory.logger.debug("Autowiring by type from bean name '" + beanName + "' via " + (executable instanceof Constructor ? "constructor" : "factory method") + " to bean named '" + autowiredBeanName + "'");
444: Arjen Poutsma, debug, IfStmt, this.logger.debug("Ignoring bean class loading failure for bean '" + beanName + "'", ex);
454: Arjen Poutsma, debug, IfStmt, this.logger.debug("Ignoring unresolvable metadata in bean definition '" + beanName + "'", ex);
482: Juergen Hoeller, debug, IfStmt, logger.debug("Failed to check manually registered singleton with name '" + beanName + "'", ex);
525: Juergen Hoeller, debug, IfStmt, this.logger.debug("Ignoring match to currently created bean '" + exBeanName + "': " + ex.getMessage());
684: Arjen Poutsma, trace, IfStmt, this.logger.trace("No bean named '" + beanName + "' found in " + this);
729: Phillip Webb, debug, IfStmt, this.logger.debug("Pre-instantiating singletons in " + this);
831: Juergen Hoeller, debug, IfStmt, this.logger.debug("Overriding bean definition for bean '" + beanName + "' with an equivalent definition: replacing [" + oldBeanDefinition + "] with [" + beanDefinition + "]");
824: Juergen Hoeller, info, IfStmt, this.logger.info("Overriding bean definition for bean '" + beanName + "' with a different definition: replacing [" + oldBeanDefinition + "] with [" + beanDefinition + "]");
817: Juergen Hoeller, warn, IfStmt, this.logger.warn("Overriding user-defined bean definition for bean '" + beanName + "' with a framework-generated bean definition: replacing [" + oldBeanDefinition + "] with [" + beanDefinition + "]");
875: Juergen Hoeller, trace, IfStmt, this.logger.trace("No bean named '" + beanName + "' found in " + this);
219: Arjen Poutsma, debug, IfStmt, logger.debug("Creating shared instance of singleton bean '" + beanName + "'");
499: Phillip Webb, debug, IfStmt, logger.debug("Destroying singletons in " + this);
567: Arjen Poutsma, debug, IfStmt, logger.debug("Retrieved dependent beans for bean '" + beanName + "': " + dependencies);
580: Arjen Poutsma, error, CatchClause, logger.error("Destroy method on bean with name '" + beanName + "' threw an exception", ex);
246: Arjen Poutsma, debug, IfStmt, logger.debug("Invoking destroy() on bean with name '" + this.beanName + "'");
265: Arjen Poutsma, warn, IfStmt, logger.warn(msg + ": " + ex);
262: Arjen Poutsma, warn, IfStmt, logger.warn(msg, ex);
318: Juergen Hoeller, debug, IfStmt, logger.debug("Invoking destroy method '" + this.destroyMethodName + "' on bean with name '" + this.beanName + "'");
347: Juergen Hoeller, warn, IfStmt, logger.warn(msg + ": " + ex.getTargetException());
344: Juergen Hoeller, warn, IfStmt, logger.warn(msg, ex.getTargetException());
351: Juergen Hoeller, error, CatchClause, logger.error("Couldn't invoke destroy method '" + this.destroyMethodName + "' on bean with name '" + this.beanName + "'", ex);
69: Arjen Poutsma, warn, CatchClause, logger.warn("FactoryBean threw exception from getObjectType, despite the contract saying " + "that it should return null if the type of its object cannot be determined yet", ex);
384: Arjen Poutsma, debug, IfStmt, logger.debug("Invalid bean name and property [" + nameAndProperty + "]");
372: Arjen Poutsma, debug, IfStmt, logger.debug("Found bean name '" + beanName + "'");
472: Arjen Poutsma, debug, IfStmt, logger.debug("Registering bean definition for bean name '" + beanName + "' with " + pvs);
128: Arjen Poutsma, debug, IfStmt, logger.debug("BeanFactory has not been set on " + ClassUtils.getShortName(getClass()) + ": " + "Make sure this configurer runs in a Spring container. Unable to configure bean of type [" + ClassUtils.getDescriptiveType(beanInstance) + "]. Proceeding without injection.");
166: Juergen Hoeller, debug, IfStmt, logger.debug("Failed to create target bean '" + bce.getBeanName() + "' while configuring object of type [" + beanInstance.getClass().getName() + "] - probably due to a circular reference. This is a common startup situation " + "and usually not fatal. Proceeding without injection. Original exception: " + ex);
428: Juergen Hoeller, debug, IfStmt, logger.debug("No XML 'id' specified - using '" + beanName + "' as bean name and " + aliases + " as aliases");
458: Juergen Hoeller, debug, IfStmt, logger.debug("Neither XML 'id' nor 'name' specified - " + "using generated bean name [" + beanName + "]");
1415: Arjen Poutsma, debug, IfStmt, logger.debug("No Spring NamespaceHandler found for XML schema namespace [" + namespaceUri + "]");
1433: Juergen Hoeller, debug, IfStmt, logger.debug("Using generated bean name [" + id + "] for nested custom element '" + ele.getNodeName() + "'");
57: Arjen Poutsma, trace, IfStmt, logger.trace("Trying to resolve XML entity with public ID [" + publicId + "] and system ID [" + systemId + "]");
66: Juergen Hoeller, trace, IfStmt, logger.trace("Trying to locate [" + dtdFile + "] in Spring jar on classpath");
80: Juergen Hoeller, debug, IfStmt, logger.debug("Could not resolve beans DTD [" + systemId + "]: not found in classpath", ex);
74: Juergen Hoeller, debug, IfStmt, logger.debug("Found beans DTD [" + systemId + "] in classpath: " + dtdFile);
96: Arjen Poutsma, debug, MethodDeclaration, logger.debug("Loading bean definitions");
139: Juergen Hoeller, info, IfStmt, logger.info("Skipped XML bean definition file due to specified profiles [" + profileSpec + "] not matching: " + getReaderContext().getResource());
258: Arjen Poutsma, debug, IfStmt, logger.debug("Imported " + importCount + " bean definitions from relative location [" + location + "]");
235: Arjen Poutsma, debug, IfStmt, logger.debug("Imported " + importCount + " bean definitions from URL location [" + location + "]");
74: Arjen Poutsma, debug, IfStmt, logger.debug("Using JAXP provider [" + factory.getClass().getName() + "]");
163: Juergen Hoeller, debug, IfStmt, logger.debug("Loaded NamespaceHandler mappings: " + mappings);
110: Arjen Poutsma, trace, IfStmt, logger.trace("Trying to resolve XML entity with public id [" + publicId + "] and system id [" + systemId + "]");
129: Rob Harrop, debug, IfStmt, logger.debug("Couldn't find XML schema [" + systemId + "]: " + resource, ex);
123: Rob Harrop, debug, IfStmt, logger.debug("Found XML schema [" + systemId + "] in classpath: " + resourceLocation);
147: Juergen Hoeller, debug, IfStmt, logger.debug("Loading schema mappings from [" + this.schemaMappingsLocation + "]");
153: Juergen Hoeller, debug, IfStmt, logger.debug("Loaded schema mappings: " + mappings);
91: Arjen Poutsma, debug, IfStmt, logger.debug("Could not resolve XML entity [" + systemId + "] against system root URL", ex);
98: Arjen Poutsma, trace, IfStmt, logger.trace("Trying to locate XML entity [" + systemId + "] as resource [" + resourcePath + "]");
105: Arjen Poutsma, debug, IfStmt, logger.debug("Found XML entity [" + systemId + "]: " + resource);
316: Arjen Poutsma, info, IfStmt, logger.info("Loading XML bean definitions from " + encodedResource.getResource());
98: Arjen Poutsma, warn, IfStmt, logger.warn("Could not sort objects [" + o1 + "] and [" + o2 + "]", ex);
121: Arjen Poutsma, info, CatchClause, logger.info("PropertyComparator could not access property - treating as null for sorting", ex);
63: Arjen Poutsma, info, MethodDeclaration, logger.info("Thread creation over, " + set.size() + " still active.");
70: Arjen Poutsma, info, CatchClause, logger.info(e.toString());
72: Arjen Poutsma, info, WhileStmt, logger.info(set.size() + " threads still active.");
108: Arjen Poutsma, info, MethodDeclaration, logger.info("Thread creation over, " + set.size() + " still active.");
115: Arjen Poutsma, info, CatchClause, logger.info(e.toString());
117: Arjen Poutsma, info, WhileStmt, logger.info(set.size() + " threads still active.");
51: Phillip Webb, warn, MethodDeclaration, verify(log).warn(any(), isA(IllegalArgumentException.class));
102: Chris Beams, debug, IfStmt, logger.debug("Adding cacheable method '" + method.getName() + "' with attribute: " + cacheOps);
474: Juergen Hoeller, trace, IfStmt, logger.trace("Invalidating " + (key != null ? "cache key [" + key + "]" : "entire cache") + " for operation " + operation + " on method " + context.metadata.method);
497: Stephane Nicoll, trace, IfStmt, logger.trace("No cache entry for key '" + key + "' in cache(s) " + context.getCacheNames());
529: Stephane Nicoll, trace, IfStmt, logger.trace("Cache entry for key '" + key + "' found in cache '" + cache.getName() + "'");
540: Stephane Nicoll, trace, IfStmt, logger.trace("Cache condition failed on method " + context.metadata.method + " for operation " + context.metadata.operation);
553: Stephane Nicoll, trace, IfStmt, logger.trace("Computed cache key '" + key + "' for operation " + context.metadata.operation);
72: Chris Beams, debug, IfStmt, logger.debug("Adding method [" + methodName + "] with cache operations [" + ops + "]");
82: Chris Beams, warn, IfStmt, logger.warn(String.format("%s was imported but no annotations were found " + "having both 'mode' and 'proxyTargetClass' attributes of type " + "AdviceMode and boolean respectively. This means that auto proxy " + "creator registration and configuration may not have occurred as " + "intended, and components may not be proxied as expected. Check to " + "ensure that %s has been @Import'ed on the same class where these " + "annotations are declared; otherwise remove the import of %s " + "altogether.", name, name, name));
212: Juergen Hoeller, debug, TryStmt, logger.debug("JSR-250 'javax.annotation.ManagedBean' found and supported for component scanning");
220: Juergen Hoeller, debug, TryStmt, logger.debug("JSR-330 'javax.inject.Named' annotation found and supported for component scanning");
384: Stephane Nicoll, Trace, TryStmt, boolean traceEnabled = logger.isTraceEnabled();
385: Stephane Nicoll, Debug, TryStmt, boolean debugEnabled = logger.isDebugEnabled();
405: Stephane Nicoll, trace, IfStmt, logger.trace("Ignored because matching an exclude filter: " + type);
399: Stephane Nicoll, debug, IfStmt, logger.debug("Ignored because not a concrete top-level class: " + type);
393: Stephane Nicoll, debug, IfStmt, logger.debug("Using candidate component class from index: " + type);
422: Arjen Poutsma, Trace, TryStmt, boolean traceEnabled = logger.isTraceEnabled();
423: Arjen Poutsma, Debug, TryStmt, boolean debugEnabled = logger.isDebugEnabled();
426: Arjen Poutsma, trace, IfStmt, logger.trace("Scanning " + resource);
460: Arjen Poutsma, trace, IfStmt, logger.trace("Ignored because not readable: " + resource);
449: Juergen Hoeller, trace, IfStmt, logger.trace("Ignored because not matching any filter: " + resource);
443: Juergen Hoeller, debug, IfStmt, logger.debug("Ignored because not a concrete top-level class: " + resource);
437: Juergen Hoeller, debug, IfStmt, logger.debug("Identified candidate component class: " + resource);
165: Juergen Hoeller, debug, IfStmt, logger.debug("Registered bean definition for imported class '" + configBeanName + "'");
263: Juergen Hoeller, debug, IfStmt, logger.debug(String.format("Registering bean definition for @Bean method %s.%s()", configClass.getMetadata().getClassName(), beanName));
306: Juergen Hoeller, info, IfStmt, logger.info(String.format("Skipping bean definition for %s: a definition for bean '%s' " + "already exists. This top-level bean definition is considered as an override.", beanMethod, beanName));
101: Chris Beams, debug, IfStmt, logger.debug(String.format("Ignoring request to enhance %s as it has " + "already been enhanced. This usually indicates that more than one " + "ConfigurationClassPostProcessor has been registered (e.g. via " + "<context:annotation-config>). This is harmless, but you may " + "want check your configuration and remove one CCPP if possible", configClass.getName()));
112: Chris Beams, debug, IfStmt, logger.debug(String.format("Successfully enhanced %s; enhanced class name is: %s", configClass.getName(), enhancedClass.getName()));
353: Chris Beams, warn, IfStmt, logger.warn(String.format("@Bean method %s.%s is non-static and returns an object " + "assignable to Spring's BeanFactoryPostProcessor interface. This will " + "result in a failure to process annotations such as @Autowired, " + "@Resource and @PostConstruct within the method's declaring " + "@Configuration class. Add the 'static' modifier to this method to avoid " + "these container lifecycle issues; see @Bean javadoc for complete details.", beanMethod.getDeclaringClass().getSimpleName(), beanMethod.getName()));
396: Juergen Hoeller, debug, IfStmt, logger.debug(String.format("@Bean method %s.%s called as bean reference " + "for type [%s] returned null bean; resolving to null value.", beanMethod.getDeclaringClass().getSimpleName(), beanMethod.getName(), beanMethod.getReturnType().getName()));
503: Juergen Hoeller, info, IfStmt, logger.info("Unable to proxy FactoryBean '" + beanName + "' of type [" + clazz.getName() + "] for use within another @Bean method because its " + (finalClass ? "implementation class" : "getObject() method") + " is final: A getObject() call will NOT be routed to the factory. " + "Consider declaring the return type as a FactoryBean interface.");
494: Juergen Hoeller, debug, IfStmt, logger.debug("Creating interface proxy for FactoryBean '" + beanName + "' of type [" + clazz.getName() + "] for use within another @Bean method because its " + (finalClass ? "implementation class" : "getObject() method") + " is final: Otherwise a getObject() call would not be routed to the factory.");
551: Juergen Hoeller, debug, CatchClause, logger.debug("Unable to instantiate enhanced FactoryBean using Objenesis, " + "falling back to regular construction", ex);
275: Juergen Hoeller, warn, IfStmt, logger.warn("Ignoring @PropertySource annotation on [" + sourceClass.getMetadata().getClassName() + "]. Reason: Environment must implement ConfigurableEnvironment");
416: Juergen Hoeller, debug, CatchClause, logger.debug("Failed to read class file via ASM for determining @Bean method order", ex);
456: Juergen Hoeller, info, IfStmt, logger.info("Properties location [" + location + "] not resolvable: " + ex.getMessage());
935: Juergen Hoeller, debug, IfStmt, logger.debug("Failed to resolve member class [" + memberClassName + "] - not considering it as a configuration class candidate");
271: Juergen Hoeller, debug, IfStmt, logger.debug("Bean definition has already been processed as a configuration class: " + beanDef);
381: Juergen Hoeller, warn, IfStmt, logger.warn("Cannot enhance @Configuration bean definition '" + beanName + "' since its singleton instance has been created too early. The typical cause " + "is a non-static @Bean method with a BeanDefinitionRegistryPostProcessor " + "return type: Consider declaring such methods as 'static'.");
406: Juergen Hoeller, debug, IfStmt, logger.debug(String.format("Replacing bean definition '%s' existing class '%s' with " + "enhanced class '%s'", entry.getKey(), configClass.getName(), enhancedClass.getName()));
106: Juergen Hoeller, debug, IfStmt, logger.debug("Could not find class file for introspecting configuration annotations: " + className, ex);
180: Sam Brannen, debug, IfStmt, logger.debug("Failed to introspect @Bean methods on class [" + metadata.getClassName() + "]: " + ex);
185: Stephane Nicoll, trace, IfStmt, logger.trace("No result object given - no result to handle");
94: Juergen Hoeller, debug, IfStmt, logger.debug("Could not resolve target class for bean with name '" + beanName + "'", ex);
109: Juergen Hoeller, debug, IfStmt, logger.debug("Could not resolve target bean for scoped proxy '" + beanName + "'", ex);
150: Juergen Hoeller, debug, IfStmt, logger.debug("Could not resolve methods for bean with name '" + beanName + "'", ex);
177: Juergen Hoeller, debug, IfStmt, logger.debug(annotatedMethods.size() + " @EventListener methods processed on bean '" + beanName + "': " + annotatedMethods);
156: Juergen Hoeller, trace, IfStmt, logger.trace("No @EventListener annotations found on bean class: " + targetType.getName());
181: Juergen Hoeller, debug, IfStmt, logger.debug("Non-matching event type for listener: " + listener, ex);
106: Juergen Hoeller, debug, IfStmt, logger.debug("Loaded " + result.size() + "] index(es)");
380: Juergen Hoeller, trace, IfStmt, logger.trace("Publishing event in " + getDisplayName() + ": " + event);
558: Juergen Hoeller, warn, IfStmt, logger.warn("Exception encountered during context initialization - " + "cancelling refresh attempt: " + ex);
590: Arjen Poutsma, info, IfStmt, logger.info("Refreshing " + this);
624: Juergen Hoeller, debug, IfStmt, logger.debug("Bean factory for " + getDisplayName() + ": " + beanFactory);
741: Arjen Poutsma, debug, IfStmt, logger.debug("Unable to locate MessageSource with name '" + MESSAGE_SOURCE_BEAN_NAME + "': using default [" + this.messageSource + "]");
731: Arjen Poutsma, debug, IfStmt, logger.debug("Using MessageSource [" + this.messageSource + "]");
765: Juergen Hoeller, debug, IfStmt, logger.debug("Unable to locate ApplicationEventMulticaster with name '" + APPLICATION_EVENT_MULTICASTER_BEAN_NAME + "': using default [" + this.applicationEventMulticaster + "]");
758: Juergen Hoeller, debug, IfStmt, logger.debug("Using ApplicationEventMulticaster [" + this.applicationEventMulticaster + "]");
792: Mark Fisher, debug, IfStmt, logger.debug("Unable to locate LifecycleProcessor with name '" + LIFECYCLE_PROCESSOR_BEAN_NAME + "': using default [" + this.lifecycleProcessor + "]");
783: Mark Fisher, debug, IfStmt, logger.debug("Using LifecycleProcessor [" + this.lifecycleProcessor + "]");
993: Arjen Poutsma, info, IfStmt, logger.info("Closing " + this);
1003: Juergen Hoeller, warn, CatchClause, logger.warn("Exception thrown from ApplicationListener handling ContextClosedEvent", ex);
1012: Juergen Hoeller, warn, CatchClause, logger.warn("Exception thrown from LifecycleProcessor on context close", ex);
81: Juergen Hoeller, warn, IfStmt, logger.warn("Inner bean '" + beanName + "' implements ApplicationListener interface " + "but is not reachable for event multicasting by its containing ApplicationContext " + "because it does not have singleton scope. Only top-level listener beans are allowed " + "to be of non-singleton scope.");
178: Juergen Hoeller, debug, IfStmt, logger.debug("Starting bean '" + beanName + "' of type [" + bean.getClass() + "]");
187: Juergen Hoeller, debug, IfStmt, logger.debug("Successfully started bean '" + beanName + "'");
261: Juergen Hoeller, warn, IfStmt, logger.warn("Failed to stop bean '" + beanName + "'", ex);
246: Juergen Hoeller, debug, IfStmt, logger.debug("Stopping bean '" + beanName + "' of type [" + bean.getClass() + "]");
250: Juergen Hoeller, debug, IfStmt, logger.debug("Successfully stopped bean '" + beanName + "'");
233: Juergen Hoeller, debug, IfStmt, logger.debug("Asking bean '" + beanName + "' of type [" + bean.getClass() + "] to stop");
240: diguage, debug, IfStmt, logger.debug("Bean '" + beanName + "' completed its stop procedure");
351: Juergen Hoeller, info, IfStmt, logger.info("Starting beans in phase " + this.phase);
366: Juergen Hoeller, info, IfStmt, logger.info("Stopping beans in phase " + this.phase);
383: Juergen Hoeller, warn, IfStmt, logger.warn("Failed to shut down " + countDownBeanNames.size() + " bean" + (countDownBeanNames.size() > 1 ? "s" : "") + " with phase value " + this.phase + " within timeout of " + this.timeout + ": " + countDownBeanNames);
328: Juergen Hoeller, info, IfStmt, logger.info("Bean '" + beanName + "' of type [" + bean.getClass().getName() + "] is not eligible for getting processed by all BeanPostProcessors " + "(for example: not eligible for auto-proxying)");
445: Arjen Poutsma, debug, IfStmt, logger.debug("No properties file found for [" + filename + "] - neither plain properties nor XML");
424: Juergen Hoeller, debug, IfStmt, logger.debug(resource + " could not be resolved in the file system - assuming that it hasn't changed", ex);
415: Arjen Poutsma, debug, IfStmt, logger.debug("Re-caching properties for filename [" + filename + "] - file hasn't been modified");
435: Arjen Poutsma, warn, IfStmt, logger.warn("Could not parse properties file [" + resource.getFilename() + "]", ex);
489: Arjen Poutsma, debug, IfStmt, logger.debug("Loading properties [" + resource.getFilename() + "]");
483: Arjen Poutsma, debug, IfStmt, logger.debug("Loading properties [" + resource.getFilename() + "] with encoding '" + encoding + "'");
469: Arjen Poutsma, debug, IfStmt, logger.debug("Loading properties [" + resource.getFilename() + "]");
517: Arjen Poutsma, debug, MethodDeclaration, logger.debug("Clearing entire resource bundle cache");
202: Masahiro Ide, warn, IfStmt, logger.warn("ResourceBundle [" + basename + "] not found for MessageSource: " + ex.getMessage());
88: Dave Brosius, warn, MethodDeclaration, logger.warn("SimpleThreadScope does not support destruction callbacks. " + "Consider using RequestScope in a web environment.");
80: Arjen Poutsma, debug, IfStmt, logger.debug("Added message [" + msg + "] for code [" + code + "] and Locale [" + locale + "]");
92: Juergen Hoeller, info, IfStmt, logger.info("Using a reflective load-time weaver for class loader: " + this.loadTimeWeaver.getInstrumentableClassLoader().getClass().getName());
85: Arjen Poutsma, info, IfStmt, logger.info("Found Spring's JVM agent for instrumentation");
79: Arjen Poutsma, info, IfStmt, logger.info("Determined server-specific load-time weaver: " + serverSpecificLoadTimeWeaver.getClass().getName());
131: Juergen Hoeller, info, IfStmt, logger.info("Could not obtain server-specific LoadTimeWeaver: " + ex.getMessage());
141: Juergen Hoeller, info, IfStmt, logger.info("Removing all registered transformers for class loader: " + this.loadTimeWeaver.getInstrumentableClassLoader().getClass().getName());
134: Arjen Poutsma, warn, IfStmt, logger.warn("Could not connect to remote EJB [" + getJndiName() + "] - retrying");
131: Arjen Poutsma, debug, IfStmt, logger.debug("Could not connect to remote EJB [" + getJndiName() + "] - retrying", ex);
186: Arjen Poutsma, debug, IfStmt, logger.debug("Trying to create reference to remote EJB");
190: Arjen Poutsma, debug, IfStmt, logger.debug("Obtained reference to remote EJB: " + ejbInstance);
207: Arjen Poutsma, warn, CatchClause, logger.warn("Could not invoke 'remove' on remote EJB proxy", ex);
84: Arjen Poutsma, debug, IfStmt, logger.debug("Method of local EJB [" + getJndiName() + "] threw exception", targetEx);
153: Arjen Poutsma, debug, IfStmt, logger.debug("Trying to create reference to local EJB");
157: Arjen Poutsma, debug, IfStmt, logger.debug("Obtained reference to local EJB: " + ejbInstance);
173: Arjen Poutsma, warn, CatchClause, logger.warn("Could not invoke 'remove' on local EJB proxy", ex);
116: Arjen Poutsma, info, IfStmt, logger.info("The ClassLoader [" + classLoader.getClass().getName() + "] does NOT provide a " + "'getThrowawayClassLoader()' method; SimpleThrowawayClassLoader will be used instead.");
70: Arjen Poutsma, debug, IfStmt, logger.debug("Attempting to locate local MBeanServer");
59: Arjen Poutsma, debug, IfStmt, logger.debug("Connecting to remote MBeanServer at URL [" + serviceUrl + "]");
84: Arjen Poutsma, debug, CatchClause, logger.debug("Could not close JMX connector", ex);
393: Arjen Poutsma, warn, IfStmt, logger.warn(msg);
390: Arjen Poutsma, warn, IfStmt, logger.warn(msg, ex);
145: Juergen Hoeller, debug, IfStmt, logger.debug("Registering NotificationListener for MBeans " + Arrays.asList(this.actualObjectNames));
176: Arjen Poutsma, debug, IfStmt, logger.debug("Unable to unregister NotificationListener", ex);
408: Juergen Hoeller, info, IfStmt, logger.info("MBeanExporter not running in a ListableBeanFactory: autodetection of MBeans not available.");
433: Juergen Hoeller, info, TryStmt, logger.info("Registering beans for JMX exposure on startup");
451: Juergen Hoeller, info, MethodDeclaration, logger.info("Unregistering JMX-exposed beans on shutdown");
540: Juergen Hoeller, debug, IfStmt, logger.debug("Autodetecting user-defined JMX MBeans");
675: Arjen Poutsma, info, IfStmt, logger.info("Located managed bean '" + beanKey + "': registering with JMX server as MBean [" + objectName + "]");
668: Arjen Poutsma, info, IfStmt, logger.info("Located MBean '" + beanKey + "': registering with JMX server as MBean [" + objectName + "]");
728: Arjen Poutsma, debug, IfStmt, logger.debug("Located simple bean '" + beanKey + "': registering with JMX server as lazy-init MBean [" + objectName + "]");
711: Arjen Poutsma, debug, IfStmt, logger.debug("Located MBean '" + beanKey + "': registering with JMX server as lazy-init MBean [" + objectName + "]");
850: Arjen Poutsma, warn, IfStmt, logger.warn("Bean with key '" + beanKey + "' has been registered as an MBean but has no exposed attributes or operations");
900: Juergen Hoeller, debug, IfStmt, logger.debug("Bean with name '" + beanName + "' is already registered for JMX exposure");
895: Juergen Hoeller, info, IfStmt, logger.info("Bean with name '" + beanName + "' has been autodetected for JMX exposure");
992: Juergen Hoeller, debug, IfStmt, logger.debug("Unable to unregister NotificationListener", ex);
1107: Juergen Hoeller, warn, IfStmt, logger.warn("Failed to retrieve target for JMX-exposed bean [" + this.objectName + "]: " + ex);
122: Arjen Poutsma, info, IfStmt, logger.info("Loading JMX object name mappings file from " + location);
195: Arjen Poutsma, info, IfStmt, logger.info("JMX connector server started: " + this.connectorServer);
234: Juergen Hoeller, info, IfStmt, logger.info("Stopping JMX connector server: " + this.connectorServer);
100: Juergen Hoeller, warn, IfStmt, logger.warn("Found more than one MBeanServer instance" + (agentId != null ? " with agent id [" + agentId + "]" : "") + ". Returning first from list.");
126: Arjen Poutsma, debug, IfStmt, logger.debug("Found MBeanServer: " + server);
154: Juergen Hoeller, error, CatchClause, logger.error("Unable to replace existing MBean at [" + objectName + "]", ex2);
148: Juergen Hoeller, debug, IfStmt, logger.debug("Replacing existing MBean at [" + objectName + "]");
142: Juergen Hoeller, debug, IfStmt, logger.debug("Ignoring existing MBean at [" + objectName + "]");
183: Juergen Hoeller, info, IfStmt, logger.info("Unregistering JMX-exposed beans");
215: Juergen Hoeller, error, IfStmt, logger.error("Could not unregister MBean [" + objectName + "]", ex);
208: Juergen Hoeller, warn, IfStmt, logger.warn("Could not unregister MBean [" + objectName + "] as said MBean " + "is not registered (perhaps already unregistered by an external process)");
138: Arjen Poutsma, info, CatchClause, logger.info("No existing MBeanServer found - creating new one");
102: Arjen Poutsma, debug, IfStmt, logger.debug("Converted JNDI name [" + convertedName + "] not found - trying original name [" + jndiName + "]. " + ex);
112: Arjen Poutsma, debug, IfStmt, logger.debug("Located object with JNDI name [" + convertedName + "]");
251: Arjen Poutsma, info, IfStmt, logger.info("JNDI lookup failed - returning specified default object instead: " + ex);
248: Arjen Poutsma, debug, IfStmt, logger.debug("JNDI lookup failed - returning specified default object instead", ex);
101: Juergen Hoeller, debug, IfStmt, logger.debug("JNDI lookup for name [" + name + "] threw NamingException " + "with message: " + ex.getMessage() + ". Returning null.");
95: Juergen Hoeller, debug, IfStmt, logger.debug("JNDI lookup for name [" + name + "] returned: [" + value + "]");
121: Arjen Poutsma, debug, CatchClause, logger.debug("Could not close JNDI InitialContext", ex);
154: Arjen Poutsma, debug, IfStmt, logger.debug("Looking up JNDI object with name [" + name + "]");
193: Arjen Poutsma, debug, IfStmt, logger.debug("Binding JNDI object with name [" + name + "]");
210: Arjen Poutsma, debug, IfStmt, logger.debug("Rebinding JNDI object with name [" + name + "]");
225: Arjen Poutsma, debug, IfStmt, logger.debug("Unbinding JNDI object with name [" + name + "]");
201: Arjen Poutsma, debug, IfStmt, logger.debug("Using service interface [" + getServiceInterface().getName() + "] for JNDI RMI object [" + getJndiName() + "] - " + (!isImpl ? "not " : "") + "directly implemented");
197: Arjen Poutsma, debug, IfStmt, logger.debug("JNDI RMI object [" + getJndiName() + "] is an RMI invoker");
325: Arjen Poutsma, warn, IfStmt, logger.warn("Could not connect to RMI service [" + getJndiName() + "] - retrying");
322: Arjen Poutsma, debug, IfStmt, logger.debug("Could not connect to RMI service [" + getJndiName() + "] - retrying", ex);
155: Arjen Poutsma, info, IfStmt, logger.info("Binding RMI service to JNDI location [" + this.jndiName + "]");
166: Arjen Poutsma, info, IfStmt, logger.info("Unbinding RMI service from JNDI location [" + this.jndiName + "]");
59: Arjen Poutsma, debug, IfStmt, logger.debug("RMI service [" + getService() + "] is an RMI invoker");
155: Arjen Poutsma, debug, IfStmt, logger.debug("Using service interface [" + getServiceInterface().getName() + "] for RMI stub [" + getServiceUrl() + "] - " + (!isImpl ? "not " : "") + "directly implemented");
151: Arjen Poutsma, debug, IfStmt, logger.debug("RMI stub [" + getServiceUrl() + "] is an RMI invoker");
204: Arjen Poutsma, debug, IfStmt, logger.debug("Located RMI stub with URL [" + getServiceUrl() + "]");
307: Arjen Poutsma, warn, IfStmt, logger.warn(msg);
304: Arjen Poutsma, warn, IfStmt, logger.warn(msg, ex);
103: Arjen Poutsma, debug, IfStmt, logger.debug(message, ex);
141: Arjen Poutsma, debug, IfStmt, logger.debug("Remote service [" + serviceName + "] threw exception", ex);
187: Arjen Poutsma, info, IfStmt, logger.info("Looking for RMI registry at port '" + registryPort + "' of host [" + registryHost + "]");
213: Arjen Poutsma, info, IfStmt, logger.info("Creating new RMI registry");
218: Arjen Poutsma, info, IfStmt, logger.info("Looking for RMI registry at port '" + registryPort + "', using custom socket factory");
228: Juergen Hoeller, debug, CatchClause, logger.debug("RMI registry access threw exception", ex);
229: Juergen Hoeller, info, CatchClause, logger.info("Could not detect RMI registry - creating new one");
250: Arjen Poutsma, info, IfStmt, logger.info("Creating new RMI registry");
255: Arjen Poutsma, info, IfStmt, logger.info("Looking for RMI registry at port '" + registryPort + "'");
265: Juergen Hoeller, debug, CatchClause, logger.debug("RMI registry access threw exception", ex);
266: Juergen Hoeller, info, CatchClause, logger.info("Could not detect RMI registry - creating new one");
310: Arjen Poutsma, info, IfStmt, logger.info("Unexporting RMI registry");
277: Arjen Poutsma, info, IfStmt, logger.info("Binding service '" + this.serviceName + "' to RMI registry: " + this.registry);
329: Arjen Poutsma, info, IfStmt, logger.info("Looking for RMI registry at port '" + registryPort + "' of host [" + registryHost + "]");
355: Arjen Poutsma, info, IfStmt, logger.info("Creating new RMI registry");
359: Arjen Poutsma, info, IfStmt, logger.info("Looking for RMI registry at port '" + registryPort + "', using custom socket factory");
369: Juergen Hoeller, debug, CatchClause, logger.debug("RMI registry access threw exception", ex);
370: Juergen Hoeller, info, CatchClause, logger.info("Could not detect RMI registry - creating new one");
390: Arjen Poutsma, info, IfStmt, logger.info("Creating new RMI registry");
394: Arjen Poutsma, info, IfStmt, logger.info("Looking for RMI registry at port '" + registryPort + "'");
404: Juergen Hoeller, debug, CatchClause, logger.debug("RMI registry access threw exception", ex);
405: Juergen Hoeller, info, CatchClause, logger.info("Could not detect RMI registry - creating new one");
431: Arjen Poutsma, info, IfStmt, logger.info("Unbinding RMI service '" + this.serviceName + "' from registry" + (this.createdRegistry ? (" at port '" + this.registryPort + "'") : ""));
439: Costin Leau, warn, IfStmt, logger.warn("RMI service '" + this.serviceName + "' is not bound to registry" + (this.createdRegistry ? (" at port '" + this.registryPort + "' anymore") : ""), ex);
457: Arjen Poutsma, warn, IfStmt, logger.warn("RMI object for service '" + this.serviceName + "' isn't exported anymore", ex);
75: Arjen Poutsma, trace, IfStmt, logger.trace("Executing " + invocation);
82: Arjen Poutsma, warn, IfStmt, logger.warn("Could not find target method for " + invocation, ex);
88: Arjen Poutsma, warn, IfStmt, logger.warn("Could not access target method for " + invocation, ex);
94: Arjen Poutsma, debug, IfStmt, logger.debug("Target method failed for " + invocation, ex.getTargetException());
74: Arjen Poutsma, debug, IfStmt, logger.debug("Incoming " + this.exporterNameClause + "remote call: " + ClassUtils.getQualifiedMethodName(method));
94: Arjen Poutsma, info, IfStmt, logger.info("Processing of " + this.exporterNameClause + "remote call resulted in exception: " + ClassUtils.getQualifiedMethodName(method), ex);
88: Arjen Poutsma, warn, IfStmt, logger.warn("Processing of " + this.exporterNameClause + "remote call resulted in fatal exception: " + ClassUtils.getQualifiedMethodName(method), ex);
80: Arjen Poutsma, debug, IfStmt, logger.debug("Finished processing of " + this.exporterNameClause + "remote call: " + ClassUtils.getQualifiedMethodName(method));
167: Arjen Poutsma, info, IfStmt, this.logger.info("Starting HttpServer at address " + address);
189: Arjen Poutsma, info, MethodDeclaration, logger.info("Stopping HttpServer");
237: Juergen Hoeller, debug, CatchClause, logger.debug("Could not find unique TaskScheduler bean", ex);
243: Juergen Hoeller, info, IfStmt, logger.info("More than one TaskScheduler bean exists within the context, and " + "none is named 'taskScheduler'. Mark one of them as primary or name it 'taskScheduler' " + "(possibly as an alias); or implement the SchedulingConfigurer interface and call " + "ScheduledTaskRegistrar#setScheduler explicitly within the configureTasks() callback: " + ex.getBeanNamesFound());
252: Juergen Hoeller, debug, CatchClause, logger.debug("Could not find default TaskScheduler bean", ex);
258: Juergen Hoeller, debug, CatchClause, logger.debug("Could not find unique ScheduledExecutorService bean", ex2);
264: Juergen Hoeller, info, IfStmt, logger.info("More than one ScheduledExecutorService bean exists within the context, and " + "none is named 'taskScheduler'. Mark one of them as primary or name it 'taskScheduler' " + "(possibly as an alias); or implement the SchedulingConfigurer interface and call " + "ScheduledTaskRegistrar#setScheduler explicitly within the configureTasks() callback: " + ex2.getBeanNamesFound());
273: Juergen Hoeller, debug, CatchClause, logger.debug("Could not find default ScheduledExecutorService bean", ex2);
275: Juergen Hoeller, info, CatchClause, logger.info("No TaskScheduler/ScheduledExecutorService bean found for scheduled processing");
335: Juergen Hoeller, debug, IfStmt, logger.debug(annotatedMethods.size() + " @Scheduled methods processed on bean '" + beanName + "': " + annotatedMethods);
327: Stephane Nicoll, trace, IfStmt, logger.trace("No @Scheduled annotations found on bean class: " + bean.getClass());
107: Juergen Hoeller, debug, IfStmt, logger.debug("Failed to retrieve [" + this.jndiName + "] from JNDI", ex);
109: Juergen Hoeller, info, CatchClause, logger.info("Could not find default managed thread factory in JNDI - " + "proceeding with default local thread factory");
171: Chris Beams, info, IfStmt, logger.info("Initializing ExecutorService " + (this.beanName != null ? " '" + this.beanName + "'" : ""));
208: Chris Beams, info, IfStmt, logger.info("Shutting down ExecutorService" + (this.beanName != null ? " '" + this.beanName + "'" : ""));
253: Juergen Hoeller, warn, IfStmt, logger.warn("Interrupted while waiting for executor" + (this.beanName != null ? " '" + this.beanName + "'" : "") + " to terminate");
246: Juergen Hoeller, warn, IfStmt, logger.warn("Timed out while waiting for executor" + (this.beanName != null ? " '" + this.beanName + "'" : "") + " to terminate");
160: Juergen Hoeller, info, IfStmt, logger.info("Could not apply remove-on-cancel policy - not a Java 7+ ScheduledThreadPoolExecutor");
102: Juergen Hoeller, info, IfStmt, logger.info("Could not apply remove-on-cancel policy - not a Java 7+ ScheduledThreadPoolExecutor");
125: Juergen Hoeller, info, IfStmt, logger.info("Could not apply remove-on-cancel policy - not a Java 7+ ScheduledThreadPoolExecutor");
72: Arjen Poutsma, error, CatchClause, logger.error(getInvocationFailureMessage(), ex.getTargetException());
76: Arjen Poutsma, error, CatchClause, logger.error(getInvocationFailureMessage(), ex);
96: Mark Fisher, error, IfStmt, logger.error("Unexpected error occurred in scheduled task.", t);
123: Juergen Hoeller, debug, IfStmt, logger.debug(getResource() + " could not be resolved in the file system - " + "current timestamp not available for script modification check", ex);
284: Arjen Poutsma, debug, IfStmt, logger.debug("Could not determine scripted object type for bean '" + beanName + "'", ex);
278: David Syer, trace, IfStmt, logger.trace("Could not determine scripted object type for bean '" + beanName + "': " + ex.getMessage());
152: Juergen Hoeller, debug, IfStmt, logger.debug("Theme created: name '" + themeName + "', basename [" + basename + "]");
85: Arjen Poutsma, debug, IfStmt, logger.debug("Unable to locate ThemeSource with name '" + THEME_SOURCE_BEAN_NAME + "': using default [" + themeSource + "]");
69: Arjen Poutsma, debug, IfStmt, logger.debug("Using ThemeSource [" + themeSource + "]");
477: Arjen Poutsma, debug, IfStmt, logger.debug("DataBinder requires binding of required fields [" + StringUtils.arrayToCommaDelimitedString(requiredFields) + "]");
753: Arjen Poutsma, debug, IfStmt, logger.debug("Field [" + field + "] has been removed from PropertyValues " + "and will not be bound, because it has not been found in the list of allowed fields");
77: Arjen Poutsma, debug, IfStmt, logger.debug("Invoking validator [" + validator + "]");
96: Arjen Poutsma, debug, IfStmt, logger.debug("Validator found no errors");
93: Arjen Poutsma, debug, IfStmt, logger.debug("Validator found " + errors.getErrorCount() + " errors");
43: Juergen Hoeller, debug, CatchClause, LogFactory.getLog(getClass()).debug("Failed to set up a Bean Validation provider", ex);
68: Arjen Poutsma, debug, IfStmt, logger.debug(clazz.getSimpleName() + ": " + category + ": " + methodNames);
97: Chris Beams, debug, IfStmt, logger.debug("Listing name/class pairs under [" + root + "]");
105: Chris Beams, debug, IfStmt, logger.debug("Listing bindings under [" + root + "]");
120: Chris Beams, debug, IfStmt, logger.debug("Static JNDI lookup: [" + name + "]");
157: Chris Beams, info, IfStmt, logger.info("Static JNDI binding: [" + this.root + name + "] = [" + obj + "]");
165: Chris Beams, info, IfStmt, logger.info("Static JNDI remove: [" + this.root + name + "]");
138: Chris Beams, info, MethodDeclaration, logger.info("Activating simple JNDI environment");
164: Chris Beams, info, MethodDeclaration, logger.info("Deactivating simple JNDI environment");
183: Chris Beams, info, IfStmt, logger.info("Static JNDI binding: [" + name + "] = [" + obj + "]");
216: Juergen Hoeller, debug, IfStmt, logger.debug("Using default EhCache CacheManager for cache region '" + cacheName + "'");
234: Juergen Hoeller, debug, IfStmt, logger.debug("Creating new EhCache cache region '" + cacheName + "'");
228: Juergen Hoeller, debug, IfStmt, logger.debug("Using existing EhCache cache region '" + cacheName + "'");
134: Juergen Hoeller, info, IfStmt, logger.info("Initializing EhCache CacheManager" + (this.cacheManagerName != null ? " '" + this.cacheManagerName + "'" : ""));
192: Juergen Hoeller, info, IfStmt, logger.info("Shutting down EhCache CacheManager" + (this.cacheManagerName != null ? " '" + this.cacheManagerName + "'" : ""));
69: Juergen Hoeller, debug, IfStmt, logger.debug("Adding cacheable method '" + method.getName() + "' with operation: " + operation);
49: Stephane Nicoll, trace, IfStmt, logger.trace("Computed cache key " + key + " for operation " + context.getOperation());
71: Stephane Nicoll, trace, IfStmt, logger.trace("Invalidating entire cache '" + cache.getName() + "' for operation " + context.getOperation());
70: Stephane Nicoll, trace, IfStmt, logger.trace("Invalidating key [" + key + "] on cache '" + cache.getName() + "' for operation " + context.getOperation());
157: Juergen Hoeller, debug, IfStmt, logger.debug("No bean of type [" + type.getName() + "] found in application context", ex);
148: Arjen Poutsma, warn, CatchClause, logger.warn("Could not cancel CommonJ Timer", ex);
84: Arjen Poutsma, error, CatchClause, logger.error("Task has been rejected by TaskExecutor", ex);
100: Juergen Hoeller, warn, IfStmt, logger.warn("Could not load " + resource);
121: Juergen Hoeller, warn, IfStmt, logger.warn("Could not load " + resource);
256: Arjen Poutsma, error, CatchClause, logger.error("Job registration exception overridden by rollback exception", ex);
328: Juergen Hoeller, debug, IfStmt, logger.debug("Unexpectedly found existing trigger, assumably due to cluster race condition: " + ex.getMessage() + " - can safely be ignored");
594: Arjen Poutsma, info, IfStmt, logger.info("Loading Quartz config from [" + this.configLocation + "]");
692: Arjen Poutsma, info, IfStmt, logger.info("Will start Quartz Scheduler [" + scheduler.getSchedulerName() + "] in " + startupDelay + " seconds");
708: Arjen Poutsma, info, IfStmt, logger.info("Starting Quartz Scheduler now, after delay of " + startupDelay + " seconds");
687: Arjen Poutsma, info, IfStmt, logger.info("Starting Quartz Scheduler now");
811: Juergen Hoeller, info, IfStmt, logger.info("Shutting down Quartz Scheduler");
264: Arjen Poutsma, info, IfStmt, logger.info("Loading FreeMarker configuration from " + this.configLocation);
363: Arjen Poutsma, debug, IfStmt, logger.debug("File system access not preferred: using SpringTemplateLoader");
355: Arjen Poutsma, debug, IfStmt, logger.debug("Cannot resolve template loader path [" + templateLoaderPath + "] to [java.io.File]: using SpringTemplateLoader as fallback", ex);
348: Arjen Poutsma, debug, IfStmt, logger.debug("Template loader path [" + path + "] resolved to file path [" + file.getAbsolutePath() + "]");
395: Arjen Poutsma, info, SwitchStmt, logger.info("No FreeMarker TemplateLoaders specified");
62: Arjen Poutsma, info, IfStmt, logger.info("SpringTemplateLoader for FreeMarker: using resource loader [" + this.resourceLoader + "] and template loader path [" + this.templateLoaderPath + "]");
72: Arjen Poutsma, debug, IfStmt, logger.debug("Looking for FreeMarker template with name [" + name + "]");
86: Arjen Poutsma, debug, IfStmt, logger.debug("Could not find FreeMarker template: " + resource);
100: Juergen Hoeller, debug, IfStmt, logger.debug("Could not obtain last-modified timestamp for FreeMarker template in " + resource + ": " + ex);
108: Juergen Hoeller, debug, IfStmt, logger.debug("Cannot find '.class' file for class [" + clazz + "] - unable to determine constructor/method parameter names");
121: Juergen Hoeller, debug, IfStmt, logger.debug("Exception thrown while reading '.class' file for class [" + clazz + "] - unable to determine constructor/method parameter names", ex);
127: Juergen Hoeller, debug, IfStmt, logger.debug("ASM ClassReader failed to parse class file [" + clazz + "], probably due to a new Java class file version that isn't supported yet " + "- unable to determine constructor/method parameter names", ex);
76: Juergen Hoeller, info, IfStmt, logger.info("Could not load 'spring.properties' file from local classpath: " + ex);
64: Juergen Hoeller, info, IfStmt, logger.info("Found 'spring.properties' file in local classpath");
112: Juergen Hoeller, debug, IfStmt, logger.debug("Could not retrieve system property '" + key + "': " + ex);
1902: Juergen Hoeller, info, IfStmt, loggerToUse.info("Failed to introspect annotations on " + element + ": " + ex);
1896: Juergen Hoeller, debug, IfStmt, loggerToUse.debug("Failed to meta-introspect annotation " + element + ": " + ex);
125: Juergen Hoeller, debug, IfStmt, logger.debug("Initialized " + getClass().getSimpleName() + " with PropertySources " + this.propertySources);
265: Juergen Hoeller, debug, IfStmt, logger.debug("Activating profile '" + profile + "'");
396: Juergen Hoeller, info, IfStmt, logger.info("Caught AccessControlException when accessing system environment variable '" + attributeName + "'; its value will be returned [null]. Reason: " + ex.getMessage());
437: Juergen Hoeller, info, IfStmt, logger.info("Caught AccessControlException when accessing system property '" + attributeName + "'; its value will be returned [null]. Reason: " + ex.getMessage());
98: Juergen Hoeller, debug, IfStmt, logger.debug("Adding PropertySource '" + propertySource.getName() + "' with highest search precedence");
109: Juergen Hoeller, debug, IfStmt, logger.debug("Adding PropertySource '" + propertySource.getName() + "' with lowest search precedence");
121: Juergen Hoeller, debug, IfStmt, logger.debug("Adding PropertySource '" + propertySource.getName() + "' with search precedence immediately higher than '" + relativePropertySourceName + "'");
136: Juergen Hoeller, debug, IfStmt, logger.debug("Adding PropertySource '" + propertySource.getName() + "' with search precedence immediately lower than '" + relativePropertySourceName + "'");
159: Juergen Hoeller, debug, IfStmt, logger.debug("Removing PropertySource '" + name + "'");
174: Juergen Hoeller, debug, IfStmt, logger.debug("Replacing PropertySource '" + name + "' with '" + propertySource.getName() + "'");
82: Juergen Hoeller, trace, IfStmt, logger.trace("Searching for key '" + key + "' in PropertySource '" + propertySource.getName() + "'");
96: Juergen Hoeller, debug, IfStmt, logger.debug("Could not find key '" + key + "' in any property source");
115: Juergen Hoeller, debug, IfStmt, logger.debug("Found key '" + key + "' in PropertySource '" + propertySource.getName() + "' with value of type " + value.getClass().getSimpleName());
95: Juergen Hoeller, debug, IfStmt, logger.debug("PropertySource '" + getName() + "' does not contain property '" + name + "', but found equivalent '" + actualName + "'");
194: Arjen Poutsma, debug, TryStmt, logger.debug("Found Equinox FileLocator for OSGi bundle URL resolution");
321: Juergen Hoeller, debug, IfStmt, logger.debug("Resolved classpath location [" + location + "] to resources " + result);
389: Juergen Hoeller, debug, IfStmt, logger.debug("Cannot introspect jar files since ClassLoader [" + classLoader + "] does not support 'getURLs()': " + ex);
381: Juergen Hoeller, debug, IfStmt, logger.debug("Cannot search for matching files underneath [" + url + "] because it cannot be converted to a valid 'jar:' URL: " + ex.getMessage());
407: Juergen Hoeller, debug, IfStmt, logger.debug("Cannot introspect jar files in parent ClassLoader since [" + classLoader + "] does not support 'getParent()': " + ex);
449: Juergen Hoeller, debug, IfStmt, logger.debug("Failed to evaluate 'java.class.path' manifest entries: " + ex);
441: Juergen Hoeller, debug, IfStmt, logger.debug("Cannot search for matching files underneath [" + path + "] because it cannot be converted to a valid 'jar:' URL: " + ex.getMessage());
514: Arjen Poutsma, debug, IfStmt, logger.debug("Resolved location pattern [" + locationPattern + "] to resources " + result);
629: Juergen Hoeller, debug, IfStmt, logger.debug("Skipping invalid jar classpath entry [" + urlFile + "]");
637: Arjen Poutsma, debug, IfStmt, logger.debug("Looking for matching resources in jar file [" + jarFileUrl + "]");
701: Juergen Hoeller, warn, IfStmt, logger.warn("Cannot search for matching files underneath " + rootDirResource + " because it does not correspond to a directory in the file system", ex);
721: Arjen Poutsma, debug, IfStmt, logger.debug("Looking for matching resources in directory tree [" + rootDir.getPath() + "]");
744: Juergen Hoeller, debug, IfStmt, logger.debug("Skipping [" + rootDir.getAbsolutePath() + "] because it does not exist");
751: Juergen Hoeller, warn, IfStmt, logger.warn("Skipping [" + rootDir.getAbsolutePath() + "] because it does not denote a directory");
757: Juergen Hoeller, warn, IfStmt, logger.warn("Cannot search for matching files underneath directory [" + rootDir.getAbsolutePath() + "] because the application is not allowed to read the directory");
783: Arjen Poutsma, debug, IfStmt, logger.debug("Searching directory [" + dir.getAbsolutePath() + "] for files matching pattern [" + fullPattern + "]");
789: Juergen Hoeller, warn, IfStmt, logger.warn("Could not retrieve contents of directory [" + dir.getAbsolutePath() + "]");
799: Juergen Hoeller, debug, IfStmt, logger.debug("Skipping subdirectory [" + dir.getAbsolutePath() + "] because the application is not allowed to read the directory");
178: Juergen Hoeller, debug, IfStmt, logger.debug("Loading properties file from " + location);
187: Juergen Hoeller, info, IfStmt, logger.info("Properties resource not found: " + ex.getMessage());
149: Sam Brannen, debug, IfStmt, logger.debug("Could not retrieve resources for pattern '" + pattern + "'", ex);
97: Juergen Hoeller, trace, IfStmt, logger.trace("Loaded [" + factoryClass.getName() + "] names: " + factoryNames);
92: Juergen Hoeller, debug, CatchClause, logger.debug("Failed to classload enum type while reading annotation metadata", ex);
95: Juergen Hoeller, debug, CatchClause, logger.debug("Could not access enum value while reading annotation metadata", ex);
111: Juergen Hoeller, debug, IfStmt, logger.debug("Failed to introspect meta-annotations on [" + annotation + "]: " + ex);
88: Juergen Hoeller, debug, CatchClause, logger.debug("Could not read super class [" + metadata.getSuperClassName() + "] of type-filtered class [" + metadata.getClassName() + "]");
112: Juergen Hoeller, debug, CatchClause, logger.debug("Could not read interface [" + ifc + "] for type-filtered class [" + metadata.getClassName() + "]");
48: Arjen Poutsma, debug, IfStmt, this.logger.debug(this.buffer.toString());
61: Arjen Poutsma, debug, IfStmt, this.logger.debug(this.buffer.toString());
111: Arjen Poutsma, Debug, IfStmt, boolean debug = logger.isDebugEnabled();
120: Arjen Poutsma, debug, IfStmt, logger.debug("Concurrency count " + this.concurrencyCount + " has reached limit " + this.concurrencyLimit + " - blocking");
133: Arjen Poutsma, debug, IfStmt, logger.debug("Entering throttle at concurrency count " + this.concurrencyCount);
149: Arjen Poutsma, debug, IfStmt, logger.debug("Returning from throttle at concurrency count " + this.concurrencyCount);
163: Juergen Hoeller, trace, IfStmt, logger.trace("Resolved placeholder '" + placeholder + "'");
48: Arjen Poutsma, warn, MethodDeclaration, logger.warn("Ignored XML validation warning", ex);
48: Arjen Poutsma, warn, MethodDeclaration, logger.warn("XSLT transformation warning", ex);
53: Arjen Poutsma, error, MethodDeclaration, logger.error("XSLT transformation error", ex);
87: Phillip Webb, Trace, MethodDeclaration, assumeFalse(log.isTraceEnabled());
88: Phillip Webb, Debug, MethodDeclaration, assumeFalse(log.isDebugEnabled());
102: Juergen Hoeller, debug, IfStmt, logger.debug("SpEL: compiling " + expression.toStringAST());
116: Juergen Hoeller, debug, IfStmt, logger.debug("SpEL: unable to compile " + expression.toStringAST());
163: Juergen Hoeller, debug, IfStmt, logger.debug(expressionToCompile.getClass().getSimpleName() + ".generateCode opted out of compilation: " + ex.getMessage());
239: Juergen Hoeller, FATAL, MethodDeclaration, log(Level.FATAL, message, null);
244: Juergen Hoeller, FATAL, MethodDeclaration, log(Level.FATAL, message, exception);
249: Juergen Hoeller, ERROR, MethodDeclaration, log(Level.ERROR, message, null);
254: Juergen Hoeller, ERROR, MethodDeclaration, log(Level.ERROR, message, exception);
259: Juergen Hoeller, WARN, MethodDeclaration, log(Level.WARN, message, null);
264: Juergen Hoeller, WARN, MethodDeclaration, log(Level.WARN, message, exception);
269: Juergen Hoeller, INFO, MethodDeclaration, log(Level.INFO, message, null);
274: Juergen Hoeller, INFO, MethodDeclaration, log(Level.INFO, message, exception);
279: Juergen Hoeller, DEBUG, MethodDeclaration, log(Level.DEBUG, message, null);
284: Juergen Hoeller, DEBUG, MethodDeclaration, log(Level.DEBUG, message, exception);
289: Juergen Hoeller, TRACE, MethodDeclaration, log(Level.TRACE, message, null);
294: Juergen Hoeller, TRACE, MethodDeclaration, log(Level.TRACE, message, exception);
361: Juergen Hoeller, error, IfStmt, this.logger.error(String.valueOf(message));
367: Juergen Hoeller, error, IfStmt, this.logger.error(String.valueOf(message), exception);
373: Juergen Hoeller, warn, IfStmt, this.logger.warn(String.valueOf(message));
379: Juergen Hoeller, warn, IfStmt, this.logger.warn(String.valueOf(message), exception);
385: Juergen Hoeller, info, IfStmt, this.logger.info(String.valueOf(message));
391: Juergen Hoeller, info, IfStmt, this.logger.info(String.valueOf(message), exception);
397: Juergen Hoeller, debug, IfStmt, this.logger.debug(String.valueOf(message));
403: Juergen Hoeller, debug, IfStmt, this.logger.debug(String.valueOf(message), exception);
409: Juergen Hoeller, trace, IfStmt, this.logger.trace(String.valueOf(message));
415: Juergen Hoeller, trace, IfStmt, this.logger.trace(String.valueOf(message), exception);
447: Juergen Hoeller, ERROR, IfStmt, this.logger.log(null, FQCN, LocationAwareLogger.ERROR_INT, String.valueOf(message), null, null);
454: Juergen Hoeller, ERROR, IfStmt, this.logger.log(null, FQCN, LocationAwareLogger.ERROR_INT, String.valueOf(message), null, exception);
461: Juergen Hoeller, WARN, IfStmt, this.logger.log(null, FQCN, LocationAwareLogger.WARN_INT, String.valueOf(message), null, null);
468: Juergen Hoeller, WARN, IfStmt, this.logger.log(null, FQCN, LocationAwareLogger.WARN_INT, String.valueOf(message), null, exception);
475: Juergen Hoeller, INFO, IfStmt, this.logger.log(null, FQCN, LocationAwareLogger.INFO_INT, String.valueOf(message), null, null);
482: Juergen Hoeller, INFO, IfStmt, this.logger.log(null, FQCN, LocationAwareLogger.INFO_INT, String.valueOf(message), null, exception);
489: Juergen Hoeller, DEBUG, IfStmt, this.logger.log(null, FQCN, LocationAwareLogger.DEBUG_INT, String.valueOf(message), null, null);
496: Juergen Hoeller, DEBUG, IfStmt, this.logger.log(null, FQCN, LocationAwareLogger.DEBUG_INT, String.valueOf(message), null, exception);
503: Juergen Hoeller, TRACE, IfStmt, this.logger.log(null, FQCN, LocationAwareLogger.TRACE_INT, String.valueOf(message), null, null);
510: Juergen Hoeller, TRACE, IfStmt, this.logger.log(null, FQCN, LocationAwareLogger.TRACE_INT, String.valueOf(message), null, exception);
332: Juergen Hoeller, debug, IfStmt, logger.debug("No property found for column '" + column + "' mapped to field '" + field + "'");
300: Juergen Hoeller, debug, IfStmt, logger.debug("Mapping column '" + column + "' to property '" + pd.getName() + "' of type '" + ClassUtils.getQualifiedName(pd.getPropertyType()) + "'");
309: Juergen Hoeller, debug, IfStmt, logger.debug("Intercepted TypeMismatchException for row " + rowNumber + " and column '" + column + "' with null value when setting property '" + pd.getName() + "' of type '" + ClassUtils.getQualifiedName(pd.getPropertyType()) + "' on object: " + mappedObject, ex);
399: Arjen Poutsma, debug, IfStmt, logger.debug("Executing SQL statement [" + sql + "]");
424: Arjen Poutsma, debug, IfStmt, logger.debug("Executing SQL query [" + sql + "]");
496: Arjen Poutsma, debug, IfStmt, logger.debug("Executing SQL update [" + sql + "]");
504: Arjen Poutsma, debug, IfStmt, logger.debug("SQL update affected " + rows + " rows");
521: Arjen Poutsma, debug, IfStmt, logger.debug("Executing SQL batch update of " + sql.length + " statements");
597: Arjen Poutsma, debug, IfStmt, logger.debug("Executing prepared SQL statement" + (sql != null ? " [" + sql + "]" : ""));
655: Arjen Poutsma, debug, MethodDeclaration, logger.debug("Executing prepared SQL query");
848: Arjen Poutsma, debug, MethodDeclaration, logger.debug("Executing prepared SQL update");
857: Juergen Hoeller, debug, IfStmt, logger.debug("SQL update affected " + rows + " rows");
879: Arjen Poutsma, debug, MethodDeclaration, logger.debug("Executing SQL update and returning generated keys");
897: Juergen Hoeller, debug, IfStmt, logger.debug("SQL update affected " + rows + " rows and returned " + generatedKeys.size() + " keys");
921: Arjen Poutsma, debug, IfStmt, logger.debug("Executing SQL batch update [" + sql + "]");
982: Thomas Risberg, debug, IfStmt, logger.debug("Executing SQL batch update [" + sql + "] with a batch size of " + batchSize);
990: Juergen Hoeller, warn, IfStmt, logger.warn("JDBC Driver does not support Batch updates; resorting to single statement execution");
1002: Juergen Hoeller, debug, IfStmt, logger.debug("Sending SQL batch update #" + batchIdx + " with " + items + " items");
1042: Arjen Poutsma, debug, IfStmt, logger.debug("Calling stored procedure" + (sql != null ? " [" + sql + "]" : ""));
1108: Juergen Hoeller, debug, IfStmt, logger.debug("CallableStatement.execute() returned '" + retVal + "'");
1109: Juergen Hoeller, debug, IfStmt, logger.debug("CallableStatement.getUpdateCount() returned " + updateCount);
1169: Juergen Hoeller, debug, IfStmt, logger.debug("Added default SqlReturnUpdateCount parameter named '" + undeclaredName + "'");
1151: Juergen Hoeller, debug, IfStmt, logger.debug("Added default SqlReturnResultSet parameter named '" + rsName + "'");
1179: Arjen Poutsma, debug, IfStmt, logger.debug("CallableStatement.getUpdateCount() returned " + updateCount);
1218: Juergen Hoeller, debug, IfStmt, logger.debug("Added default SqlReturnResultSet parameter named '" + rsName + "'");
1369: Arjen Poutsma, Warn, WhileStmt, logger.debug("SQLWarning ignored: SQL state '" + warningToLog.getSQLState() + "', error code '" + warningToLog.getErrorCode() + "', message [" + warningToLog.getMessage() + "]");
1371: Arjen Poutsma, Warn, WhileStmt, warningToLog = warningToLog.getNextWarning();
209: Juergen Hoeller, debug, IfStmt, logger.debug("Overriding type info with runtime info from SqlParameterValue: column index " + paramIndex + ", SQL type " + parameterValue.getSqlType() + ", type name " + parameterValue.getTypeName());
222: Arjen Poutsma, trace, IfStmt, logger.trace("Setting SQL statement parameter value: column index " + paramIndex + ", parameter value [" + inValueToUse + "], value class [" + (inValueToUse != null ? inValueToUse.getClass().getName() : "null") + "], SQL type " + (sqlTypeToUse == SqlTypeValue.TYPE_UNKNOWN ? "unknown" : Integer.toString(sqlTypeToUse)));
252: Juergen Hoeller, debug, IfStmt, logger.debug("JDBC getParameterType call failed - using fallback method instead: " + ex);
295: Arjen Poutsma, warn, IfStmt, logger.warn("Accessing single output value when procedure has more than one output parameter");
354: Juergen Hoeller, debug, IfStmt, logger.debug("Using declared out parameter '" + paramName + "' for function return value");
462: Arjen Poutsma, debug, IfStmt, logger.debug("Limited set of parameters " + limitedInParamNamesMap.keySet() + " skipped parameter for '" + paramNameToUse + "'");
457: Juergen Hoeller, debug, IfStmt, logger.debug("Added meta-data in parameter for '" + paramNameToUse + "'");
448: Juergen Hoeller, debug, IfStmt, logger.debug("Added meta-data in-out parameter for '" + paramNameToUse + "'");
441: Juergen Hoeller, debug, IfStmt, logger.debug("Added meta-data out parameter for '" + paramNameToUse + "'");
429: Juergen Hoeller, debug, IfStmt, logger.debug("Added meta-data return parameter for '" + returnNameToUse + "'");
417: Juergen Hoeller, debug, IfStmt, logger.debug("Bypassing meta-data return parameter for '" + paramName + "'");
406: Juergen Hoeller, debug, IfStmt, logger.debug("Using declared parameter for '" + (paramNameToUse != null ? paramNameToUse : getFunctionReturnName()) + "'");
524: Juergen Hoeller, warn, IfStmt, logger.warn("Unable to locate the corresponding parameter value for '" + parameterName + "' within the parameter values provided: " + caseInsensitiveParameterNames.values());
537: Arjen Poutsma, debug, IfStmt, logger.debug("Matching " + caseInsensitiveParameterNames.values() + " with " + callParameterNames.values());
538: Arjen Poutsma, debug, IfStmt, logger.debug("Found match for " + matchedParameters.keySet());
576: Juergen Hoeller, debug, IfStmt, logger.debug("Unable to locate the corresponding IN or IN-OUT parameter for \"" + parameterName + "\" in the parameters used: " + callParameterNames.keySet());
591: Arjen Poutsma, warn, IfStmt, logger.warn("Unable to locate the corresponding parameter value for '" + parameterName + "' within the parameter values provided: " + inParameters.keySet());
598: Arjen Poutsma, debug, IfStmt, logger.debug("Matching " + inParameters.keySet() + " with " + callParameterNames.values());
599: Arjen Poutsma, debug, IfStmt, logger.debug("Found match for " + matchedParameters.keySet());
88: Juergen Hoeller, warn, IfStmt, logger.warn(databaseProductName + " is not one of the databases fully supported for procedure calls " + "-- supported are: " + supportedDatabaseProductsForProcedures);
92: Juergen Hoeller, warn, IfStmt, logger.warn("Metadata processing disabled - you must specify all parameters explicitly");
76: Juergen Hoeller, warn, IfStmt, logger.warn(databaseProductName + " is not one of the databases fully supported for function calls " + "-- supported are: " + supportedDatabaseProductsForFunctions);
80: Juergen Hoeller, warn, IfStmt, logger.warn("Metadata processing disabled - you must specify all parameters explicitly");
125: Juergen Hoeller, debug, IfStmt, logger.debug("Using " + provider.getClass().getName());
45: Juergen Hoeller, Error, CatchClause, logger.debug("Error retrieving 'DatabaseMetaData.supportsCatalogsInProcedureCalls' - " + ex.getMessage());
51: Juergen Hoeller, Error, CatchClause, logger.debug("Error retrieving 'DatabaseMetaData.supportsSchemasInProcedureCalls' - " + ex.getMessage());
57: Juergen Hoeller, Error, CatchClause, logger.debug("Error retrieving 'DatabaseMetaData.storesUpperCaseIdentifiers' - " + ex.getMessage());
63: Juergen Hoeller, Error, CatchClause, logger.debug("Error retrieving 'DatabaseMetaData.storesLowerCaseIdentifiers' - " + ex.getMessage());
44: Juergen Hoeller, warn, IfStmt, logger.warn("Overriding supportsGetGeneratedKeys from DatabaseMetaData to 'true'; it was reported as " + "'false' by " + databaseMetaData.getDriverName() + " " + databaseMetaData.getDriverVersion());
80: Juergen Hoeller, Error, IfStmt, logger.warn("Error retrieving 'DatabaseMetaData.supportsCatalogsInProcedureCalls': " + ex.getMessage());
88: Juergen Hoeller, Error, IfStmt, logger.warn("Error retrieving 'DatabaseMetaData.supportsSchemasInProcedureCalls': " + ex.getMessage());
96: Juergen Hoeller, Error, IfStmt, logger.warn("Error retrieving 'DatabaseMetaData.storesUpperCaseIdentifiers': " + ex.getMessage());
104: Juergen Hoeller, Error, IfStmt, logger.warn("Error retrieving 'DatabaseMetaData.storesLowerCaseIdentifiers': " + ex.getMessage());
327: Juergen Hoeller, debug, IfStmt, logger.debug("Retrieving meta-data for " + metaDataCatalogName + '/' + metaDataSchemaName + '/' + metaDataProcedureName);
398: Juergen Hoeller, Error, IfStmt, logger.warn("Error while retrieving meta-data for procedure columns: " + ex);
409: Juergen Hoeller, warn, IfStmt, logger.warn("Problem closing ResultSet for procedure column meta-data: " + ex);
357: Juergen Hoeller, debug, IfStmt, logger.debug("Oracle JDBC driver did not return procedure/function/signature for '" + metaDataProcedureName + "' - assuming a non-exposed synonym");
389: Juergen Hoeller, debug, IfStmt, logger.debug("Retrieved meta-data: " + meta.getParameterName() + " " + meta.getParameterType() + " " + meta.getSqlType() + " " + meta.getTypeName() + " " + meta.isNullable());
378: Juergen Hoeller, debug, IfStmt, logger.debug("Skipping meta-data for: " + columnType + " " + procs.getInt("DATA_TYPE") + " " + procs.getString("TYPE_NAME") + " " + procs.getInt("NULLABLE") + " (probably a member of a collection)");
160: Juergen Hoeller, Error, IfStmt, logger.warn("Error retrieving 'DatabaseMetaData.getGeneratedKeys': " + ex.getMessage());
154: Arjen Poutsma, debug, IfStmt, logger.debug("GetGeneratedKeys is not supported");
150: Arjen Poutsma, debug, IfStmt, logger.debug("GetGeneratedKeys is supported");
185: Juergen Hoeller, Error, IfStmt, logger.warn("Error retrieving 'DatabaseMetaData.getDatabaseProductName': " + ex.getMessage());
174: Juergen Hoeller, debug, IfStmt, logger.debug("GeneratedKeysColumnNameArray is supported for " + databaseProductName);
167: Juergen Hoeller, debug, IfStmt, logger.debug("GeneratedKeysColumnNameArray is not supported for " + databaseProductName);
194: Juergen Hoeller, Error, IfStmt, logger.warn("Error retrieving 'DatabaseMetaData.getDatabaseProductVersion': " + ex.getMessage());
203: Juergen Hoeller, Error, IfStmt, logger.warn("Error retrieving 'DatabaseMetaData.storesUpperCaseIdentifiers': " + ex.getMessage());
212: Juergen Hoeller, Error, IfStmt, logger.warn("Error retrieving 'DatabaseMetaData.storesLowerCaseIdentifiers': " + ex.getMessage());
333: Juergen Hoeller, Error, IfStmt, logger.warn("Error while accessing table meta-data results: " + ex.getMessage());
342: Juergen Hoeller, warn, IfStmt, logger.warn("Unable to locate table meta-data for '" + tableName + "': column names must be provided");
392: Juergen Hoeller, debug, IfStmt, logger.debug("Retrieving meta-data for " + metaDataCatalogName + '/' + metaDataSchemaName + '/' + metaDataTableName);
425: Juergen Hoeller, Error, IfStmt, logger.warn("Error while retrieving meta-data for table columns: " + ex.getMessage());
410: Juergen Hoeller, debug, IfStmt, logger.debug("Overriding meta-data: " + columnName + " now NUMERIC instead of DECIMAL");
418: Juergen Hoeller, debug, IfStmt, logger.debug("Retrieved meta-data: " + meta.getParameterName() + " " + meta.getSqlType() + " " + meta.isNullable());
97: Juergen Hoeller, debug, CatchClause, logger.debug("Exception encountered during default schema lookup", ex);
82: Juergen Hoeller, debug, IfStmt, logger.debug("Cannot check default schema - no Connection from DatabaseMetaData");
118: Juergen Hoeller, debug, IfStmt, logger.debug("Defaulting to no synonyms in table meta-data lookup");
125: Juergen Hoeller, warn, IfStmt, logger.warn("Unable to include synonyms in table meta-data lookup - no Connection from DatabaseMetaData");
136: Juergen Hoeller, warn, IfStmt, logger.warn("Unable to include synonyms in table meta-data lookup - no Oracle Connection: " + ex);
142: Juergen Hoeller, debug, MethodDeclaration, logger.debug("Including synonyms in table meta-data lookup");
297: Arjen Poutsma, info, IfStmt, logger.info("Unable to locate non-key columns for table '" + getTableName() + "' so an empty insert statement is generated");
72: Juergen Hoeller, debug, IfStmt, logger.debug("Using " + provider.getClass().getSimpleName());
258: Arjen Poutsma, debug, IfStmt, logger.debug("Added declared parameter for [" + getProcedureName() + "]: " + parameter.getName());
270: Arjen Poutsma, debug, IfStmt, logger.debug("Added row mapper for [" + getProcedureName() + "]: " + parameterName);
300: Juergen Hoeller, debug, IfStmt, logger.debug("SqlCall for " + (isFunction() ? "function" : "procedure") + " [" + getProcedureName() + "] compiled");
324: Arjen Poutsma, debug, IfStmt, logger.debug("Compiled stored procedure. Call string is [" + this.callString + "]");
355: Arjen Poutsma, debug, IfStmt, logger.debug("JdbcCall call not compiled before execution - invoking compile");
405: Juergen Hoeller, debug, IfStmt, logger.debug("The following parameters are used for call " + getCallString() + " with " + args);
408: Juergen Hoeller, debug, ForeachStmt, logger.debug(i + ": " + param.getName() + ", SQL type " + param.getSqlType() + ", type name " + param.getTypeName() + ", parameter class [" + param.getClass().getName() + "]");
263: Arjen Poutsma, debug, IfStmt, logger.debug("JdbcInsert for table [" + getTableName() + "] compiled");
280: Juergen Hoeller, debug, IfStmt, logger.debug("Compiled insert object: insert string is [" + this.insertString + "]");
307: Arjen Poutsma, debug, IfStmt, logger.debug("JdbcInsert not compiled before execution - invoking compile");
355: Arjen Poutsma, debug, IfStmt, logger.debug("The following parameters are used for insert " + getInsertString() + " with: " + values);
427: Arjen Poutsma, debug, IfStmt, logger.debug("The following parameters are used for call " + getInsertString() + " with: " + values);
528: Arjen Poutsma, debug, IfStmt, logger.debug("Using generated keys support with Statement.RETURN_GENERATED_KEYS.");
522: Arjen Poutsma, debug, IfStmt, logger.debug("Using generated keys support with array of column names.");
569: Juergen Hoeller, debug, IfStmt, logger.debug("Executing statement " + getInsertString() + " with batch of size: " + batchValues.size());
264: Arjen Poutsma, debug, IfStmt, logger.debug("Acquired Connection [" + newCon + "] for JDBC transaction");
281: Arjen Poutsma, debug, IfStmt, logger.debug("Switching JDBC Connection [" + con + "] to manual commit");
326: Arjen Poutsma, debug, IfStmt, logger.debug("Committing JDBC transaction on Connection [" + con + "]");
341: Arjen Poutsma, debug, IfStmt, logger.debug("Rolling back JDBC transaction on Connection [" + con + "]");
355: Arjen Poutsma, debug, IfStmt, logger.debug("Setting JDBC transaction [" + txObject.getConnectionHolder().getConnection() + "] rollback-only");
379: Arjen Poutsma, debug, CatchClause, logger.debug("Could not reset JDBC Connection after transaction", ex);
384: Arjen Poutsma, debug, IfStmt, logger.debug("Releasing JDBC Connection [" + con + "] after transaction");
107: Arjen Poutsma, debug, IfStmt, logger.debug("Fetching resumed JDBC Connection from DataSource");
118: Arjen Poutsma, debug, IfStmt, logger.debug("Registering transaction synchronization for JDBC Connection");
190: Juergen Hoeller, debug, CatchClause, logger.debug("Could not set JDBC Connection read-only", ex);
176: Arjen Poutsma, debug, IfStmt, logger.debug("Setting JDBC Connection [" + con + "] read-only");
198: Arjen Poutsma, debug, IfStmt, logger.debug("Changing isolation level of JDBC Connection [" + con + "] to " + definition.getIsolationLevel());
239: Arjen Poutsma, debug, CatchClause, logger.debug("Could not reset JDBC Connection after transaction", ex);
224: Arjen Poutsma, debug, IfStmt, logger.debug("Resetting isolation level of JDBC Connection [" + con + "] to " + previousIsolationLevel);
233: Arjen Poutsma, debug, IfStmt, logger.debug("Resetting read-only flag of JDBC Connection [" + con + "]");
310: Arjen Poutsma, debug, CatchClause, logger.debug("Could not close JDBC Connection", ex);
313: Arjen Poutsma, debug, CatchClause, logger.debug("Unexpected exception on closing JDBC Connection", ex);
340: Juergen Hoeller, debug, MethodDeclaration, logger.debug("Returning JDBC Connection to DataSource");
133: Arjen Poutsma, info, IfStmt, logger.info("Loaded JDBC driver: " + driverClassNameToUse);
143: Arjen Poutsma, debug, IfStmt, logger.debug("Creating new JDBC DriverManager Connection to [" + url + "]");
153: Arjen Poutsma, debug, CatchClause, logger.debug("Could not explicitly release JDBC savepoint", ex);
171: Arjen Poutsma, warn, CatchClause, logger.warn("Could not retrieve default auto-commit and transaction isolation settings", ex);
438: Arjen Poutsma, debug, IfStmt, logger.debug("Using existing database connection for operation '" + operation.getName() + "'");
405: Arjen Poutsma, debug, IfStmt, logger.debug("Connecting to database for operation '" + operation.getName() + "'");
423: Juergen Hoeller, debug, CatchClause, logger.debug("Could not set JDBC Connection read-only", ex);
141: Arjen Poutsma, debug, IfStmt, logger.debug("Creating new JDBC Driver Connection to [" + url + "]");
227: Arjen Poutsma, info, IfStmt, logger.info("Established shared JDBC Connection: " + this.target);
267: Arjen Poutsma, warn, CatchClause, logger.warn("Could not close shared JDBC Connection", ex);
140: Arjen Poutsma, debug, IfStmt, logger.debug("Obtaining JDBC Connection from WebSphere DataSource [" + getTargetDataSource() + "], using ConnectionSpec [" + connSpec + "]");
49: Juergen Hoeller, warn, CatchClause, logger.warn("Could not shut down embedded database", ex);
57: Juergen Hoeller, debug, CatchClause, logger.debug("Could not close JDBC Connection on shutdown", ex);
80: Sam Brannen, warn, IfStmt, LogFactory.getLog(getClass()).warn("Could not shut down embedded Derby database", ex);
193: Sam Brannen, info, IfStmt, logger.info(String.format("Starting embedded database '%s'", this.databaseName));
189: Sam Brannen, info, IfStmt, logger.info(String.format("Starting embedded database: url='%s', username='%s'", simpleDriverDataSource.getUrl(), simpleDriverDataSource.getUsername()));
224: Sam Brannen, info, IfStmt, logger.info(String.format("Shutting down embedded database '%s'", this.databaseName));
220: Sam Brannen, info, IfStmt, logger.info(String.format("Shutting down embedded database: url='%s'", ((SimpleDriverDataSource) this.dataSource).getUrl()));
444: Sam Brannen, info, IfStmt, logger.info("Executing SQL script from " + resource);
504: Sam Brannen, debug, CatchClause, logger.debug("Could not close JDBC Statement", ex);
490: Sam Brannen, debug, IfStmt, logger.debug(ScriptStatementFailedException.buildErrorMessage(statement, stmtNumber, resource), ex);
476: Juergen Hoeller, debug, IfStmt, logger.debug(rowsAffected + " returned as update count for SQL: " + statement);
479: Juergen Hoeller, Warn, WhileStmt, logger.debug("SQLWarning ignored: SQL state '" + warningToLog.getSQLState() + "', error code '" + warningToLog.getErrorCode() + "', message [" + warningToLog.getMessage() + "]");
482: Juergen Hoeller, Warn, WhileStmt, warningToLog = warningToLog.getNextWarning();
510: Sam Brannen, info, IfStmt, logger.info("Executed SQL script from " + resource + " in " + elapsedTime + " ms.");
167: Arjen Poutsma, debug, IfStmt, logger.debug("Triggering auto-flush because queue reached batch size of " + this.batchSize);
357: Arjen Poutsma, debug, IfStmt, logger.debug("RdbmsOperation with SQL [" + getSql() + "] compiled");
380: Arjen Poutsma, debug, IfStmt, logger.debug("SQL operation not compiled before execution - invoking compile");
158: Juergen Hoeller, debug, IfStmt, logger.debug("Compiled stored procedure. Call string is [" + this.callString + "]");
81: Juergen Hoeller, info, IfStmt, logger.info("Adding custom translator of type [" + translator.getClass().getName() + "] for database '" + dbName + "'");
77: Juergen Hoeller, warn, IfStmt, logger.warn("Replacing custom translator [" + replaced + "] for database '" + dbName + "' with [" + translator + "]");
130: Arjen Poutsma, debug, CatchClause, logger.debug("Validation query [" + this.validationQuery + "] threw exception", ex);
133: Arjen Poutsma, warn, IfStmt, logger.warn("Database has not started up yet - retrying in " + this.interval + " seconds (timeout in " + rest + " seconds)");
154: Arjen Poutsma, info, IfStmt, logger.info("Database startup detected after " + duration + " seconds");
70: Arjen Poutsma, debug, CatchClause, logger.debug("Could not close JDBC Connection", ex);
74: Arjen Poutsma, debug, CatchClause, logger.debug("Unexpected exception on closing JDBC Connection", ex);
90: Arjen Poutsma, trace, CatchClause, logger.trace("Could not close JDBC Statement", ex);
94: Arjen Poutsma, trace, CatchClause, logger.trace("Unexpected exception on closing JDBC Statement", ex);
110: Arjen Poutsma, trace, CatchClause, logger.trace("Could not close JDBC ResultSet", ex);
114: Arjen Poutsma, trace, CatchClause, logger.trace("Unexpected exception on closing JDBC ResultSet", ex);
214: Juergen Hoeller, debug, CatchClause, logger.debug("JDBC driver does not implement JDBC 4.1 'getObject(int, Class)' method", err);
217: Juergen Hoeller, debug, CatchClause, logger.debug("JDBC driver does not support JDBC 4.1 'getObject(int, Class)' method", ex);
220: Juergen Hoeller, debug, CatchClause, logger.debug("JDBC driver has limited support for JDBC 4.1 'getObject(int, Class)' method", ex);
403: Arjen Poutsma, debug, CatchClause, logger.debug("JDBC driver 'supportsBatchUpdates' method threw exception", ex);
398: Arjen Poutsma, debug, IfStmt, logger.debug("JDBC driver does not support batch updates");
394: Arjen Poutsma, debug, IfStmt, logger.debug("JDBC driver supports batch updates");
132: Arjen Poutsma, Error, CatchClause, logger.warn("Error loading SQL error codes from config file", ex);
115: Arjen Poutsma, warn, IfStmt, logger.warn("Default sql-error-codes.xml not found (should be included in spring.jar)");
122: Arjen Poutsma, info, IfStmt, logger.info("Found custom sql-error-codes.xml file at the root of the classpath");
128: Arjen Poutsma, Error, IfStmt, logger.info("SQLErrorCodes loaded: " + errorCodes.keySet());
178: Juergen Hoeller, debug, IfStmt, logger.debug("SQL error codes for '" + databaseName + "' found");
185: Juergen Hoeller, debug, IfStmt, logger.debug("SQL error codes for '" + databaseName + "' not found");
202: Juergen Hoeller, debug, IfStmt, logger.debug("Looking up default SQLErrorCodes for DataSource [" + identify(dataSource) + "]");
220: Juergen Hoeller, Error, CatchClause, logger.warn("Error while extracting database name - falling back to empty error codes", ex);
229: Juergen Hoeller, Error, IfStmt, logger.debug("SQLErrorCodes found in cache for DataSource [" + identify(dataSource) + "]");
246: Juergen Hoeller, debug, IfStmt, logger.debug("Caching SQL error codes for DataSource [" + identify(dataSource) + "]: database product name is '" + databaseName + "'");
290: Thomas Risberg, info, IfStmt, logger.info("Using custom translator '" + customTranslator.getClass().getSimpleName() + "' found in the CustomSQLExceptionTranslatorRegistry for database '" + databaseName + "'");
284: Thomas Risberg, warn, IfStmt, logger.warn("Overriding already defined custom translator '" + errorCodes.getCustomSqlExceptionTranslator().getClass().getSimpleName() + " with '" + customTranslator.getClass().getSimpleName() + "' found in the CustomSQLExceptionTranslatorRegistry for database '" + databaseName + "'");
177: Arjen Poutsma, debug, IfStmt, logger.debug("Using nested SQLException from the BatchUpdateException");
284: Arjen Poutsma, debug, IfStmt, logger.debug("Unable to translate SQLException with " + codes + ", will now try the fallback translator");
393: Arjen Poutsma, warn, IfStmt, logger.warn("Unable to instantiate custom exception class [" + exceptionClass.getName() + "]", ex);
385: Arjen Poutsma, warn, IfStmt, logger.warn("Unable to find appropriate constructor of custom exception class [" + exceptionClass.getName() + "]");
402: Arjen Poutsma, debug, IfStmt, logger.debug(intro + " SQLException with SQL state '" + sqlEx.getSQLState() + "', error code '" + sqlEx.getErrorCode() + "', message [" + sqlEx.getMessage() + "]" + (sql != null ? "; SQL was [" + sql + "]" : "") + " for task [" + task + "]");
98: Arjen Poutsma, debug, IfStmt, logger.debug("Extracted SQL state class '" + classCode + "' from value '" + sqlState + "'");
153: Arjen Poutsma, debug, MethodDeclaration, logger.debug("Returning BLOB as bytes");
166: Arjen Poutsma, debug, MethodDeclaration, logger.debug("Returning BLOB as binary stream");
179: Arjen Poutsma, debug, MethodDeclaration, logger.debug("Returning CLOB as string");
191: Arjen Poutsma, debug, MethodDeclaration, logger.debug("Returning CLOB as ASCII stream");
203: Arjen Poutsma, debug, MethodDeclaration, logger.debug("Returning CLOB as character stream");
249: Arjen Poutsma, debug, IfStmt, logger.debug(content != null ? "Set bytes for BLOB with length " + content.length : "Set BLOB to null");
287: Arjen Poutsma, debug, IfStmt, logger.debug(binaryStream != null ? "Set binary stream for BLOB with length " + contentLength : "Set BLOB to null");
316: Arjen Poutsma, debug, IfStmt, logger.debug(content != null ? "Set string for CLOB with length " + content.length() : "Set CLOB to null");
355: Arjen Poutsma, debug, IfStmt, logger.debug(asciiStream != null ? "Set ASCII stream for CLOB with length " + contentLength : "Set CLOB to null");
393: Arjen Poutsma, debug, IfStmt, logger.debug(characterStream != null ? "Set character stream for CLOB with length " + contentLength : "Set CLOB to null");
74: Juergen Hoeller, debug, IfStmt, logger.debug(content != null ? "Copied bytes into temporary BLOB with length " + content.length : "Set BLOB to null");
100: Juergen Hoeller, debug, IfStmt, logger.debug(binaryStream != null ? "Copied binary stream into temporary BLOB with length " + contentLength : "Set BLOB to null");
121: Juergen Hoeller, debug, IfStmt, logger.debug(content != null ? "Copied string into temporary CLOB with length " + content.length() : "Set CLOB to null");
147: Juergen Hoeller, debug, IfStmt, logger.debug(asciiStream != null ? "Copied ASCII stream into temporary CLOB with length " + contentLength : "Set CLOB to null");
174: Juergen Hoeller, debug, IfStmt, logger.debug(characterStream != null ? "Copied character stream into temporary CLOB with length " + contentLength : "Set CLOB to null");
191: Juergen Hoeller, error, CatchClause, logger.error("Could not free LOB", ex);
242: Juergen Hoeller, debug, IfStmt, logger.debug(annotatedMethods.size() + " @JmsListener methods processed on bean '" + beanName + "': " + annotatedMethods);
233: Juergen Hoeller, trace, IfStmt, logger.trace("No @JmsListener annotations found on bean type: " + bean.getClass());
165: Juergen Hoeller, warn, IfStmt, logger.warn("Ignoring recovery interval in DefaultJmsListenerContainerFactory in favor of BackOff");
258: Juergen Hoeller, warn, CatchClause, logger.warn("Failed to destroy message listener container", ex);
190: Arjen Poutsma, trace, CatchClause, logger.trace("Could not close cached JMS Session", ex);
229: Juergen Hoeller, debug, IfStmt, logger.debug("Registering cached JMS Session for mode " + mode + ": " + targetSession);
222: Arjen Poutsma, trace, IfStmt, logger.trace("Found cached JMS Session for mode " + mode + ": " + (session instanceof SessionProxy ? ((SessionProxy) session).getTargetSession() : session));
304: Juergen Hoeller, trace, CatchClause, logger.trace("Logical close of cached JMS Session failed - discarding it", ex);
395: Juergen Hoeller, debug, IfStmt, logger.debug("Registering cached JMS MessageProducer for destination [" + dest + "]: " + producer);
389: Arjen Poutsma, trace, IfStmt, logger.trace("Found cached JMS MessageProducer for destination [" + dest + "]: " + producer);
429: Juergen Hoeller, debug, IfStmt, logger.debug("Registering cached JMS MessageConsumer for destination [" + dest + "]: " + consumer);
409: Arjen Poutsma, trace, IfStmt, logger.trace("Found cached JMS MessageConsumer for destination [" + dest + "]: " + consumer);
459: Juergen Hoeller, trace, IfStmt, logger.trace("Returned cached Session: " + this.target);
465: Arjen Poutsma, debug, IfStmt, logger.debug("Closing cached Session: " + this.target);
77: Arjen Poutsma, debug, CatchClause, logger.debug("Could not stop JMS Connection before closing it", ex);
84: Arjen Poutsma, debug, CatchClause, logger.debug("Could not close JMS Connection", ex);
211: Juergen Hoeller, debug, IfStmt, logger.debug("No working getDataSource method found on ConnectionFactory: " + ex2);
227: Arjen Poutsma, debug, CatchClause, logger.debug("Could not close synchronized JMS Session after transaction", ex);
206: Arjen Poutsma, debug, IfStmt, logger.debug("Created JMS transaction on Session [" + session + "] from Connection [" + con + "]");
257: Juergen Hoeller, debug, IfStmt, logger.debug("Committing JMS transaction on Session [" + session + "]");
277: Juergen Hoeller, debug, IfStmt, logger.debug("Rolling back JMS transaction on Session [" + session + "]");
349: Juergen Hoeller, info, IfStmt, logger.info("Established shared JMS Connection: " + this.connection);
360: Juergen Hoeller, warn, MethodDeclaration, logger.warn("Encountered a JMSException - resetting the underlying JMS Connection", ex);
486: Juergen Hoeller, debug, IfStmt, logger.debug("Closing shared JMS Connection: " + con);
499: Arjen Poutsma, debug, CatchClause, logger.debug("Ignoring Connection state exception - assuming already closed: " + ex);
502: Arjen Poutsma, debug, CatchClause, logger.debug("Could not close shared JMS Connection", ex);
651: Arjen Poutsma, trace, CatchClause, logger.trace("Failed to close newly obtained JMS Session", ex);
502: Arjen Poutsma, debug, IfStmt, logger.debug("Executing callback on JMS Session: " + sessionToUse);
606: Arjen Poutsma, debug, IfStmt, logger.debug("Sending created message: " + message);
921: Stephane Nicoll, debug, IfStmt, logger.debug("Sending created message: " + requestMessage);
952: Stephane Nicoll, debug, IfStmt, logger.debug("Executing callback on JMS Session: " + session);
221: Arjen Poutsma, debug, MethodDeclaration, logger.debug("Shutting down JMS listener container");
237: Arjen Poutsma, debug, CatchClause, logger.debug("Could not stop JMS Connection on shutdown", ex);
386: Arjen Poutsma, debug, IfStmt, logger.debug("Established shared JMS Connection");
457: Arjen Poutsma, debug, CatchClause, logger.debug("Ignoring Connection start exception - assuming already started: " + ex);
476: Arjen Poutsma, debug, CatchClause, logger.debug("Ignoring Connection stop exception - assuming already stopped: " + ex);
553: Arjen Poutsma, debug, IfStmt, logger.debug("Resumed paused task: " + task);
596: Arjen Poutsma, debug, IfStmt, logger.debug("Listener container task [" + task + "] has been rejected and paused: " + ex);
666: Arjen Poutsma, warn, IfStmt, logger.warn("Rejecting received message because of the listener container " + "having been stopped in the meantime: " + message);
823: Arjen Poutsma, debug, CatchClause, logger.debug("Could not roll back because Session already closed", ex2);
826: Arjen Poutsma, error, CatchClause, logger.error("Application exception overridden by rollback error", ex);
813: Juergen Hoeller, debug, IfStmt, logger.debug("Initiating transaction rollback on application exception", ex);
929: Mark Fisher, warn, IfStmt, logger.warn("Execution of JMS message listener failed, and no ErrorHandler has been set.", ex);
344: Arjen Poutsma, trace, IfStmt, logger.trace("Consumer [" + consumerToUse + "] of " + (transactional ? "transactional " : "") + "session [" + sessionToUse + "] did not receive a message");
306: Arjen Poutsma, debug, IfStmt, logger.debug("Received message of type [" + message.getClass() + "] from consumer [" + consumerToUse + "] of " + (transactional ? "transactional " : "") + "session [" + sessionToUse + "]");
323: Arjen Poutsma, debug, IfStmt, logger.debug("Rolling back transaction because of listener exception thrown: " + ex);
396: Arjen Poutsma, debug, MethodDeclaration, logger.debug("Initiating transaction rollback on listener exception", ex);
401: Arjen Poutsma, error, CatchClause, logger.error("Listener exception overridden by rollback exception", ex);
405: Arjen Poutsma, error, CatchClause, logger.error("Listener exception overridden by rollback error", ex);
563: Arjen Poutsma, debug, MethodDeclaration, logger.debug("Waiting for shutdown of message listener invokers");
579: Arjen Poutsma, debug, IfStmt, logger.debug("Still waiting for shutdown of " + this.activeInvokerCount + " message listener invokers (iteration " + waitCount + ")");
775: Arjen Poutsma, debug, IfStmt, logger.debug("Raised scheduled invoker count: " + this.scheduledInvokers.size());
824: Arjen Poutsma, debug, CatchClause, logger.debug("Could not establish shared JMS Connection - " + "leaving it up to asynchronous invokers to establish a Connection as soon as possible", ex);
840: Arjen Poutsma, debug, CatchClause, logger.debug("Connection start failed - relying on listeners to perform recovery", ex);
855: Arjen Poutsma, debug, CatchClause, logger.debug("Connection stop failed - relying on listeners to perform recovery after restart", ex);
895: Juergen Hoeller, warn, IfStmt, logger.warn(msg);
892: Juergen Hoeller, warn, IfStmt, logger.warn(msg, ex);
884: Arjen Poutsma, debug, IfStmt, logger.debug("Setup of JMS message listener invoker failed - already recovered by other invoker", ex);
878: Sam Brannen, info, IfStmt, logger.info("JMS message listener invoker needs to establish shared Connection");
962: Juergen Hoeller, error, IfStmt, logger.error(msg);
959: Juergen Hoeller, error, IfStmt, logger.error(msg, ex);
946: Arjen Poutsma, info, TryStmt, logger.info("Successfully refreshed JMS Connection");
970: Stephane Nicoll, error, IfStmt, logger.error(msg.toString());
1137: Juergen Hoeller, warn, IfStmt, logger.warn("Number of scheduled consumers has dropped below concurrentConsumers limit, probably " + "due to tasks having been rejected. Check your thread pool configuration! Automatic recovery " + "to be triggered by remaining consumers.");
1133: Juergen Hoeller, error, IfStmt, logger.error("All scheduled consumers have been paused, probably due to tasks having been rejected. " + "Check your thread pool configuration! Manual recovery necessary through a start() call.");
1125: Juergen Hoeller, debug, IfStmt, logger.debug("Lowered scheduled invoker count: " + scheduledInvokers.size());
201: Juergen Hoeller, debug, CatchClause, logger.debug("Could not connect on initialization - registering message consumers lazily", ex);
240: Arjen Poutsma, info, IfStmt, logger.info("Trying to recover from JMS Connection exception: " + ex);
252: Arjen Poutsma, debug, CatchClause, logger.debug("Failed to recover JMS Connection", recoverEx);
253: Arjen Poutsma, error, CatchClause, logger.error("Encountered non-recoverable JMSException", ex);
249: Arjen Poutsma, info, TryStmt, logger.info("Successfully refreshed JMS Connection");
338: Juergen Hoeller, debug, IfStmt, logger.debug("Closing JMS MessageConsumers");
343: Juergen Hoeller, debug, IfStmt, logger.debug("Closing JMS Sessions");
236: Stephane Nicoll, error, MethodDeclaration, logger.error("Listener execution failed", ex);
292: Stephane Nicoll, warn, IfStmt, logger.warn("Listener method returned result [" + result + "]: not generating response message for it because of no JMS Session given");
275: Stephane Nicoll, debug, IfStmt, logger.debug("Listener method returned result [" + result + "] - generating response message for it");
485: Juergen Hoeller, debug, CatchClause, logger.debug("Failed to reset BytesMessage after payload extraction", ex);
227: Arjen Poutsma, trace, IfStmt, logger.trace("No result object given - no result to handle");
75: Stephane Nicoll, debug, IfStmt, logger.debug("Processing [" + message + "]");
82: Stephane Nicoll, trace, IfStmt, logger.trace("No result object given - no result to handle");
101: Arjen Poutsma, debug, CatchClause, logger.debug("No default <Provider>ActivationSpecImpl class found: " + specClassName);
88: Arjen Poutsma, debug, CatchClause, logger.debug("No default <Provider>ActivationSpec class found: " + specClassName);
112: Arjen Poutsma, debug, CatchClause, logger.debug("No default ActivationSpecImpl class found in provider package: " + specClassName);
121: Arjen Poutsma, debug, CatchClause, logger.debug("No default ActivationSpecImpl class found in inbound subpackage: " + specClassName);
188: Arjen Poutsma, warn, IfStmt, logger.warn("Invalid request message will be discarded: " + requestMessage);
89: Arjen Poutsma, debug, CatchClause, logger.debug("Ignoring Connection state exception - assuming already closed: " + ex);
92: Arjen Poutsma, debug, CatchClause, logger.debug("Could not close JMS Connection", ex);
96: Arjen Poutsma, debug, CatchClause, logger.debug("Unexpected exception on closing JMS Connection", ex);
112: Arjen Poutsma, trace, CatchClause, logger.trace("Could not close JMS Session", ex);
116: Arjen Poutsma, trace, CatchClause, logger.trace("Unexpected exception on closing JMS Session", ex);
132: Arjen Poutsma, trace, CatchClause, logger.trace("Could not close JMS MessageProducer", ex);
136: Arjen Poutsma, trace, CatchClause, logger.trace("Unexpected exception on closing JMS MessageProducer", ex);
155: Arjen Poutsma, trace, CatchClause, logger.trace("Could not close JMS MessageConsumer", ex);
159: Arjen Poutsma, trace, CatchClause, logger.trace("Unexpected exception on closing JMS MessageConsumer", ex);
181: Arjen Poutsma, trace, CatchClause, logger.trace("Could not close JMS QueueBrowser", ex);
185: Arjen Poutsma, trace, CatchClause, logger.trace("Unexpected exception on closing JMS QueueBrowser", ex);
201: Arjen Poutsma, trace, CatchClause, logger.trace("Could not close JMS QueueRequestor", ex);
205: Arjen Poutsma, trace, CatchClause, logger.trace("Unexpected exception on closing JMS QueueRequestor", ex);
121: Juergen Hoeller, Error, IfStmt, logger.warn("Error occurred while mapping from MessageHeaders to JMS properties", ex);
74: Juergen Hoeller, info, CatchClause, logger.info("Failed to set JMSCorrelationID - skipping", ex);
83: Juergen Hoeller, info, CatchClause, logger.info("Failed to set JMSReplyTo - skipping", ex);
92: Juergen Hoeller, info, CatchClause, logger.info("Failed to set JMSType - skipping", ex);
112: Juergen Hoeller, warn, IfStmt, logger.warn("Failed to map message header '" + headerName + "' to JMS property", ex);
107: Juergen Hoeller, trace, IfStmt, logger.trace("Skipping reserved header '" + headerName + "' since it cannot be set by client");
227: Juergen Hoeller, Error, IfStmt, logger.warn("Error occurred while mapping from JMS properties to MessageHeaders", ex);
137: Juergen Hoeller, info, CatchClause, logger.info("Failed to read JMSCorrelationID property - skipping", ex);
146: Juergen Hoeller, info, CatchClause, logger.info("Failed to read JMSDestination property - skipping", ex);
153: Juergen Hoeller, info, CatchClause, logger.info("Failed to read JMSDeliveryMode property - skipping", ex);
160: Juergen Hoeller, info, CatchClause, logger.info("Failed to read JMSExpiration property - skipping", ex);
169: Juergen Hoeller, info, CatchClause, logger.info("Failed to read JMSMessageID property - skipping", ex);
175: Juergen Hoeller, info, CatchClause, logger.info("Failed to read JMSPriority property - skipping", ex);
184: Juergen Hoeller, info, CatchClause, logger.info("Failed to read JMSReplyTo property - skipping", ex);
190: Juergen Hoeller, info, CatchClause, logger.info("Failed to read JMSRedelivered property - skipping", ex);
199: Juergen Hoeller, info, CatchClause, logger.info("Failed to read JMSType property - skipping", ex);
205: Juergen Hoeller, info, CatchClause, logger.info("Failed to read JMSTimestamp property - skipping", ex);
218: Juergen Hoeller, Error, IfStmt, logger.warn("Error occurred while mapping JMS property '" + propertyName + "' to Message header", ex);
118: Arjen Poutsma, debug, IfStmt, logger.debug("Destination [" + destinationName + "] not found in JNDI", ex);
294: Juergen Hoeller, debug, IfStmt, logger.debug("Ignoring non-serializable message headers: " + keysToIgnore);
197: Juergen Hoeller, warn, IfStmt, logger.warn(msg + ": " + cause);
194: Juergen Hoeller, warn, IfStmt, logger.warn(msg, cause);
191: Juergen Hoeller, debug, IfStmt, logger.debug(msg, cause);
204: Rossen Stoyanchev, trace, IfStmt, this.logger.trace("Failed to receive message from channel '" + channel + "' within timeout: " + timeout);
351: Rossen Stoyanchev, error, IfStmt, logger.warn(errorDescription + ":" + message);
73: Rossen Stoyanchev, warn, IfStmt, logger.warn("Message headers contain two values for the same header '" + name + "', " + "one in the top level header map and a second in the nested map with native headers. " + "Using the value from top level map. " + "Use 'nativeHeader.myHeader' to resolve to the value from the nested native header map.");
248: Juergen Hoeller, debug, IfStmt, logger.debug("Could not resolve target class for bean with name '" + beanName + "'", ex);
301: Juergen Hoeller, debug, IfStmt, logger.debug(methods.size() + " message handler methods found on " + userType + ": " + methods);
337: Rossen Stoyanchev, info, IfStmt, logger.info("Mapped \"" + mapping + "\" onto " + newHandlerMethod);
404: Rossen Stoyanchev, debug, IfStmt, logger.debug("Searching methods to handle " + headerAccessor.getShortLogMessage(message.getPayload()) + ", lookupDestination='" + lookupDestination + "'");
461: Juergen Hoeller, trace, IfStmt, logger.trace("Found " + matches.size() + " handler methods: " + matches);
498: Juergen Hoeller, debug, MethodDeclaration, logger.debug("No matching message handler methods.");
511: Rossen Stoyanchev, debug, IfStmt, logger.debug("Invoking " + handlerMethod.getShortLogMessage());
537: Juergen Hoeller, Error, IfStmt, logger.error("Error while processing message " + message, ex);
545: Juergen Hoeller, error, IfStmt, logger.error("Unhandled exception from message handler method", ex);
550: Rossen Stoyanchev, debug, IfStmt, logger.debug("Invoking " + invocable.getShortLogMessage());
561: Juergen Hoeller, Error, CatchClause, logger.error("Error while processing handler method exception", ex2);
580: Rossen Stoyanchev, debug, IfStmt, logger.debug("Searching methods to handle " + exception.getClass().getSimpleName());
106: Rossen Stoyanchev, trace, IfStmt, logger.trace("Processing return value with " + handler);
111: Juergen Hoeller, trace, IfStmt, logger.trace("Invoking '" + ClassUtils.getQualifiedMethodName(getMethod(), getBeanType()) + "' with arguments " + Arrays.toString(args));
116: Juergen Hoeller, trace, IfStmt, logger.trace("Method [" + ClassUtils.getQualifiedMethodName(getMethod(), getBeanType()) + "] returned [" + returnValue + "]");
142: Juergen Hoeller, Error, IfStmt, logger.debug(getArgumentResolutionErrorMessage("Failed to resolve", i), ex);
177: Juergen Hoeller, error, CatchClause, logger.error("Uncaught error in session attribute destruction callback", ex);
129: Rossen Stoyanchev, debug, IfStmt, logger.debug("Reply to @SubscribeMapping: " + returnValue);
159: Juergen Hoeller, info, SynchronizedStmt, logger.info("Starting...");
167: Juergen Hoeller, info, SynchronizedStmt, logger.info("Started.");
177: Juergen Hoeller, info, SynchronizedStmt, logger.info("Stopping...");
185: Juergen Hoeller, info, SynchronizedStmt, logger.info("Stopped.");
231: Rossen Stoyanchev, trace, IfStmt, logger.trace(this + " not running yet. Ignoring " + message);
257: Rossen Stoyanchev, info, IfStmt, logger.info(this.availableEvent);
267: Rossen Stoyanchev, info, IfStmt, logger.info(this.notAvailableEvent);
286: Rossen Stoyanchev, debug, IfStmt, logger.debug("Detected unsent DISCONNECT message. Processing anyway.");
58: Juergen Hoeller, error, IfStmt, logger.error("No sessionId in  " + message);
66: Juergen Hoeller, error, IfStmt, logger.error("No subscriptionId in " + message);
74: Juergen Hoeller, error, IfStmt, logger.error("No destination in " + message);
94: Juergen Hoeller, error, IfStmt, logger.error("No sessionId in " + message);
102: Juergen Hoeller, error, IfStmt, logger.error("No subscriptionId " + message);
122: Juergen Hoeller, error, IfStmt, logger.error("No destination in " + message);
170: Rossen Stoyanchev, debug, IfStmt, logger.debug("Failed to parse selector: " + selector, ex);
165: Rossen Stoyanchev, trace, IfStmt, logger.trace("Subscription selector: [" + selector + "]");
232: Rossen Stoyanchev, debug, IfStmt, logger.debug("Failed to evaluate selector: " + ex.getMessage());
236: Juergen Hoeller, debug, CatchClause, logger.debug("Failed to evaluate selector", ex);
355: Rossen Stoyanchev, debug, IfStmt, logger.debug("Processing " + accessor.getShortLogMessage(message.getPayload()));
384: Rossen Stoyanchev, debug, IfStmt, logger.debug("Broadcasting to " + subscriptions.size() + " sessions.");
401: Juergen Hoeller, error, IfStmt, logger.error("Failed to send " + message, ex);
278: Juergen Hoeller, trace, IfStmt, logger.trace("Sending " + accessor.getDetailedLogMessage(message.getPayload()));
378: Rossen Stoyanchev, debug, IfStmt, logger.debug("Connection established in session id=" + this.sessionId);
390: Rossen Stoyanchev, debug, IfStmt, logger.debug("Failed to connect session id=" + this.sessionId, ex);
407: Rossen Stoyanchev, trace, IfStmt, logger.trace("Received " + accessor.getDetailedLogMessage(message.getPayload()));
442: Rossen Stoyanchev, trace, IfStmt, logger.trace("Message not handled.");
429: Rossen Stoyanchev, debug, IfStmt, logger.debug("No matching receipt: " + accessor.getDetailedLogMessage(message.getPayload()));
417: Rossen Stoyanchev, debug, IfStmt, logger.debug("No handler for: " + accessor.getDetailedLogMessage(message.getPayload()) + ". Perhaps just unsubscribed?");
496: Rossen Stoyanchev, debug, IfStmt, logger.debug("Uncaught failure while handling transport failure", ex2);
504: Juergen Hoeller, debug, IfStmt, logger.debug("Connection closed in session id=" + this.sessionId);
703: Rossen Stoyanchev, error, IfStmt, logger.debug(error);
406: Rossen Stoyanchev, info, IfStmt, logger.info("Connecting \"system\" session to " + this.relayHost + ":" + this.relayPort);
420: Rossen Stoyanchev, debug, IfStmt, logger.debug("Forwarding " + accessor.getShortLogMessage(EMPTY_PAYLOAD));
438: Juergen Hoeller, Error, CatchClause, logger.error("Error in shutdown of TCP client", ex);
501: Juergen Hoeller, error, IfStmt, logger.error("Only STOMP SEND supported from within the server side. Ignoring " + message);
545: Rossen Stoyanchev, debug, IfStmt, logger.debug("No TCP connection for session " + sessionId + " in " + message);
534: Rossen Stoyanchev, debug, IfStmt, logger.debug("Ignoring DISCONNECT in session " + sessionId + ". Connection already cleaned up.");
516: Rossen Stoyanchev, debug, IfStmt, logger.debug(stompAccessor.getShortLogMessage(EMPTY_PAYLOAD));
597: Rossen Stoyanchev, debug, IfStmt, logger.debug("TCP connection opened in session=" + getSessionId());
620: Rossen Stoyanchev, warn, IfStmt, logger.warn("TCP connection failure in session " + this.sessionId + ": " + error, ex);
631: Rossen Stoyanchev, debug, IfStmt, logger.debug("Failure while clearing TCP connection state in session " + this.sessionId, ex2);
685: Rossen Stoyanchev, trace, IfStmt, logger.trace("Received " + accessor.getDetailedLogMessage(message.getPayload()));
682: Rossen Stoyanchev, error, IfStmt, logger.error("Received " + accessor.getShortLogMessage(message.getPayload()));
677: Rossen Stoyanchev, debug, IfStmt, logger.debug("Received " + accessor.getShortLogMessage(EMPTY_PAYLOAD));
735: Juergen Hoeller, error, IfStmt, logger.error("Transport failure: " + ex);
746: Rossen Stoyanchev, debug, IfStmt, logger.debug("TCP connection to broker closed in session " + this.sessionId);
789: Rossen Stoyanchev, debug, IfStmt, logger.debug("TCP connection closed already, ignoring " + accessor.getShortLogMessage(message.getPayload()));
812: Juergen Hoeller, trace, IfStmt, logger.trace("Forwarding " + accessor.getDetailedLogMessage(message.getPayload()));
809: Juergen Hoeller, debug, IfStmt, logger.debug("Forwarding " + accessor.getShortLogMessage(message.getPayload()));
830: Juergen Hoeller, error, IfStmt, logger.error("Failed to forward " + accessor.getShortLogMessage(message.getPayload()));
852: Rossen Stoyanchev, debug, IfStmt, logger.debug("Failure while clearing TCP connection state in session " + this.sessionId, ex);
864: Rossen Stoyanchev, debug, IfStmt, logger.debug("Cleaning up connection state for session " + this.sessionId);
877: Rossen Stoyanchev, debug, IfStmt, logger.debug("Closing TCP connection in session " + this.sessionId);
899: Rossen Stoyanchev, info, IfStmt, logger.info("\"System\" session connected.");
913: Rossen Stoyanchev, debug, IfStmt, logger.debug("Subscribing to " + destination + " on \"system\" connection.");
935: Rossen Stoyanchev, debug, IfStmt, logger.debug("Got message on \"system\" connection, with no destination: " + accessor.getDetailedLogMessage(message.getPayload()));
942: Rossen Stoyanchev, debug, IfStmt, logger.debug("Got message on \"system\" connection with no handler: " + accessor.getDetailedLogMessage(message.getPayload()));
953: Rossen Stoyanchev, Error, IfStmt, logger.debug("Error while handling message on \"system\" connection.", ex);
183: Rossen Stoyanchev, trace, IfStmt, logger.trace("Decoded " + headerAccessor.getDetailedLogMessage(null));
165: Juergen Hoeller, trace, IfStmt, logger.trace("Incomplete frame, resetting input buffer...");
161: Rossen Stoyanchev, trace, IfStmt, logger.trace("Decoded " + headerAccessor.getDetailedLogMessage(payload));
303: Juergen Hoeller, warn, IfStmt, logger.warn("Ignoring invalid content-length: '" + headerAccessor);
101: Juergen Hoeller, trace, IfStmt, logger.trace("Encoding heartbeat");
134: Juergen Hoeller, trace, IfStmt, logger.trace("Encoding STOMP " + command + ", headers=" + nativeHeaders);
196: Christoph Dreis, error, IfStmt, logger.error("No session id. Ignoring " + message);
209: Rossen Stoyanchev, trace, IfStmt, logger.trace("No active sessions for user destination: " + result.getSourceDestination());
224: Rossen Stoyanchev, trace, IfStmt, logger.trace("Translated " + result.getSourceDestination() + " -> " + result.getTargetDestinations());
279: Rossen Stoyanchev, trace, IfStmt, logger.trace("Checking unresolved user destination: " + destination);
308: Rossen Stoyanchev, trace, IfStmt, logger.trace("Translated " + destination + " -> " + getBroadcastDestination());
100: Stephane Nicoll, warn, IfStmt, logger.warn("Skipping header '" + name + "'expected type [" + type + "], but got [" + value.getClass() + "]");
165: Rossen Stoyanchev, debug, IfStmt, logger.debug(name + " returned null from preSend, i.e. precluding the send.");
191: Rossen Stoyanchev, error, CatchClause, logger.error("Exception from afterSendCompletion in " + interceptor, ex2);
229: Juergen Hoeller, error, IfStmt, logger.error("Exception from afterReceiveCompletion in " + interceptor, ex2);
50: Rossen Stoyanchev, debug, IfStmt, logger.debug(getBeanName() + " added " + handler);
61: Rossen Stoyanchev, debug, IfStmt, logger.debug(getBeanName() + " removed " + handler);
165: Rossen Stoyanchev, debug, IfStmt, logger.debug(name + " returned null from beforeHandle, i.e. precluding the send.");
182: Rossen Stoyanchev, error, CatchClause, logger.error("Exception from afterMessageHandled in " + interceptor, ex2);
66: Rossen Stoyanchev, debug, MethodDeclaration, logger.debug("Setting up before '" + this.testName.getMethodName() + "'");
93: Rossen Stoyanchev, error, CatchClause, logger.error("Failed to shut client", ex);
97: Rossen Stoyanchev, debug, MethodDeclaration, logger.debug("Stopping ActiveMQ broker and will await shutdown");
100: Rossen Stoyanchev, debug, IfStmt, logger.debug("ActiveMQ broker did not shut in the expected time.");
139: Rossen Stoyanchev, error, MethodDeclaration, logger.error(command + " " + headers, ex);
144: Rossen Stoyanchev, error, MethodDeclaration, logger.error("STOMP error frame " + headers + " payload=" + payload);
149: Rossen Stoyanchev, error, MethodDeclaration, logger.error(exception);
192: Rossen Stoyanchev, debug, IfStmt, logger.debug("Awaiting for subscription receipts");
199: Rossen Stoyanchev, debug, IfStmt, logger.debug("Awaiting for message count: " + expected);
83: Rossen Stoyanchev, debug, MethodDeclaration, logger.debug("Setting up before '" + this.testName.getMethodName() + "'");
119: Rossen Stoyanchev, debug, TryStmt, logger.debug("STOMP broker relay stats: " + this.relay.getStatsInfo());
128: Rossen Stoyanchev, debug, MethodDeclaration, logger.debug("Stopping ActiveMQ broker and will await shutdown");
130: Rossen Stoyanchev, debug, IfStmt, logger.debug("Broker not running");
141: Rossen Stoyanchev, debug, MethodDeclaration, logger.debug("Broker stopped");
147: Rossen Stoyanchev, debug, MethodDeclaration, logger.debug("Starting test publishSubscribe()");
172: Rossen Stoyanchev, debug, MethodDeclaration, logger.debug("Starting test messageDeliveryExceptionIfSystemSessionForwardFails()");
183: Rossen Stoyanchev, debug, MethodDeclaration, logger.debug("Starting test brokerBecomingUnvailableTriggersErrorFrame()");
198: Rossen Stoyanchev, debug, MethodDeclaration, logger.debug("Starting test brokerAvailabilityEventWhenStopped()");
206: Rossen Stoyanchev, debug, MethodDeclaration, logger.debug("Starting test relayReconnectsIfBrokerComesBackUp()");
231: Rossen Stoyanchev, debug, MethodDeclaration, logger.debug("Starting test disconnectWithReceipt()");
255: Rossen Stoyanchev, debug, MethodDeclaration, logger.debug("Processing ApplicationEvent " + event);
371: Juergen Hoeller, debug, CatchClause, logger.debug("Could not retrieve pre-bound Hibernate session", ex);
378: Juergen Hoeller, info, IfStmt, logger.info("Using DataSource [" + sfds + "] of Hibernate SessionFactory for HibernateTransactionManager");
410: Juergen Hoeller, debug, IfStmt, logger.debug("Found Hibernate-managed Session [" + session + "] for Spring-managed transaction");
402: Juergen Hoeller, debug, IfStmt, logger.debug("Found thread-bound Session [" + sessionHolder.getSession() + "] for Hibernate transaction");
557: Juergen Hoeller, debug, CatchClause, logger.debug("Could not rollback Session after failed transaction begin", ex);
458: Juergen Hoeller, debug, IfStmt, logger.debug("Opened new Session [" + newSession + "] for Hibernate transaction");
491: Juergen Hoeller, debug, IfStmt, logger.debug("Not preparing JDBC Connection of Hibernate Session [" + session + "]");
468: Juergen Hoeller, debug, IfStmt, logger.debug("Preparing JDBC Connection of Hibernate Session [" + session + "]");
536: Juergen Hoeller, debug, IfStmt, logger.debug("Exposing Hibernate transaction as JDBC transaction [" + con + "]");
604: Juergen Hoeller, debug, IfStmt, logger.debug("Committing Hibernate transaction on Session [" + txObject.getSessionHolder().getSession() + "]");
633: Juergen Hoeller, debug, IfStmt, logger.debug("Rolling back Hibernate transaction on Session [" + txObject.getSessionHolder().getSession() + "]");
666: Juergen Hoeller, debug, IfStmt, logger.debug("Setting Hibernate transaction on Session [" + txObject.getSessionHolder().getSession() + "] rollback-only");
701: Juergen Hoeller, debug, CatchClause, logger.debug("Could not access JDBC Connection of Hibernate Session", ex);
704: Juergen Hoeller, debug, CatchClause, logger.debug("Could not reset JDBC Connection after transaction", ex);
716: Juergen Hoeller, debug, IfStmt, logger.debug("Not closing pre-bound Hibernate Session [" + session + "] after transaction");
710: Juergen Hoeller, debug, IfStmt, logger.debug("Closing Hibernate Session [" + session + "] after transaction");
144: Juergen Hoeller, debug, IfStmt, logger.debug("Flushing Hibernate Session on explicit request");
141: Juergen Hoeller, debug, IfStmt, logger.debug("Flushing Hibernate Session on transaction synchronization");
173: Juergen Hoeller, debug, CatchClause, logger.debug("Could not close Hibernate Session", ex);
176: Juergen Hoeller, debug, CatchClause, logger.debug("Unexpected exception on closing Hibernate Session", ex);
209: Juergen Hoeller, debug, IfStmt, logger.debug("No ConnectionProvider found - cannot determine DataSource for SessionFactory: " + ex);
98: Violeta Georgieva, debug, IfStmt, logger.debug("Closing Hibernate Session after async request timeout/error");
140: Juergen Hoeller, debug, IfStmt, logger.debug("Opening Hibernate Session in OpenSessionInViewFilter");
160: Juergen Hoeller, debug, IfStmt, logger.debug("Closing Hibernate Session in OpenSessionInViewFilter");
188: Juergen Hoeller, debug, IfStmt, logger.debug("Using SessionFactory '" + getSessionFactoryBeanName() + "' for OpenSessionInViewFilter");
128: Juergen Hoeller, debug, IfStmt, logger.debug("Opening Hibernate Session in OpenSessionInViewInterceptor");
153: Juergen Hoeller, debug, IfStmt, logger.debug("Closing Hibernate Session in OpenSessionInViewInterceptor");
415: Juergen Hoeller, info, IfStmt, logger.info("Initialized JPA EntityManagerFactory for persistence unit '" + getPersistenceUnitName() + "'");
597: Juergen Hoeller, info, IfStmt, logger.info("Closing JPA EntityManagerFactory for persistence unit '" + getPersistenceUnitName() + "'");
214: Juergen Hoeller, debug, CatchClause, logger.debug("Could not join transaction because none was actually active", ex);
254: Arjen Poutsma, debug, MethodDeclaration, logger.debug("Opening JPA EntityManager");
418: Arjen Poutsma, debug, IfStmt, logger.debug("Closing JPA EntityManager");
425: Arjen Poutsma, debug, CatchClause, logger.debug("Could not close JPA EntityManager", ex);
428: Arjen Poutsma, debug, CatchClause, logger.debug("Unexpected exception on closing JPA EntityManager", ex);
277: Arjen Poutsma, debug, CatchClause, logger.debug("Cannot access EntityTransaction handle - assuming we're in a JTA environment");
388: Arjen Poutsma, debug, IfStmt, logger.debug("No local transaction to join");
384: Arjen Poutsma, debug, IfStmt, logger.debug("Joined local transaction");
371: Arjen Poutsma, debug, IfStmt, logger.debug("No JTA transaction to join: " + ex);
367: Arjen Poutsma, debug, TryStmt, logger.debug("Joined JTA transaction");
406: Juergen Hoeller, debug, IfStmt, logger.debug("Starting resource-local transaction on application-managed " + "EntityManager [" + this.target + "]");
354: Juergen Hoeller, debug, IfStmt, logger.debug("Found thread-bound EntityManager [" + emHolder.getEntityManager() + "] for JPA transaction");
391: Arjen Poutsma, debug, IfStmt, logger.debug("Opened new EntityManager [" + newEm + "] for JPA transaction");
430: Juergen Hoeller, debug, IfStmt, logger.debug("Not exposing JPA transaction [" + em + "] as JDBC transaction because " + "JpaDialect [" + getJpaDialect() + "] does not support JDBC Connection retrieval");
423: Juergen Hoeller, debug, IfStmt, logger.debug("Exposing JPA transaction as JDBC transaction [" + conHandle + "]");
485: Arjen Poutsma, debug, CatchClause, logger.debug("Could not rollback EntityManager after failed transaction begin", ex);
531: Arjen Poutsma, debug, IfStmt, logger.debug("Committing JPA transaction on EntityManager [" + txObject.getEntityManagerHolder().getEntityManager() + "]");
557: Arjen Poutsma, debug, IfStmt, logger.debug("Rolling back JPA transaction on EntityManager [" + txObject.getEntityManagerHolder().getEntityManager() + "]");
582: Arjen Poutsma, debug, IfStmt, logger.debug("Setting JPA transaction on EntityManager [" + txObject.getEntityManagerHolder().getEntityManager() + "] rollback-only");
611: Juergen Hoeller, error, CatchClause, logger.error("Could not close JDBC connection after transaction", ex);
627: Arjen Poutsma, debug, IfStmt, logger.debug("Not closing pre-bound JPA EntityManager after transaction");
622: Arjen Poutsma, debug, IfStmt, logger.debug("Closing JPA EntityManager [" + em + "] after transaction");
361: Arjen Poutsma, info, IfStmt, logger.info("Building JPA container EntityManagerFactory for persistence unit '" + this.persistenceUnitInfo.getPersistenceUnitName() + "'");
81: Arjen Poutsma, info, IfStmt, logger.info("Building JPA EntityManagerFactory for persistence unit '" + getPersistenceUnitName() + "'");
295: Arjen Poutsma, debug, IfStmt, logger.debug("Creating new EntityManager for shared EntityManager invocation");
81: Juergen Hoeller, error, IfStmt, logger.error("Circularity error while weaving class [" + className + "] with " + "transformer of class [" + this.classTransformer.getClass().getName() + "]", ex);
88: Juergen Hoeller, Error, IfStmt, logger.warn("Error weaving class [" + className + "] with transformer of class [" + this.classTransformer.getClass().getName() + "]", ex);
73: Juergen Hoeller, debug, IfStmt, logger.debug("Transformer of class [" + this.classTransformer.getClass().getName() + "] transformed class [" + className + "]; bytes in=" + classfileBuffer.length + "; bytes out=" + transformed.length);
514: Juergen Hoeller, info, IfStmt, logger.info("Found explicit default unit with name '" + defaultName + "' in persistence.xml - " + "overriding local default unit settings ('packagesToScan'/'mappingResources')");
557: Juergen Hoeller, debug, CatchClause, logger.debug("Failed to determine persistence unit root URL from orm.xml location", ex);
320: Juergen Hoeller, warn, IfStmt, logger.warn("Cannot resolve jar-file entry [" + value + "] in persistence unit '" + unitInfo.getPersistenceUnitName() + "' without root URL");
349: Juergen Hoeller, info, IfStmt, logger.info(resource.getFilename() + " should be located inside META-INF directory; cannot determine persistence unit root URL for " + resource);
357: Juergen Hoeller, info, IfStmt, logger.info(resource.getFilename() + " is not located in the root of META-INF directory; cannot determine persistence unit root URL for " + resource);
98: Violeta Georgieva, debug, IfStmt, logger.debug("Closing JPA EntityManager after async request timeout/error");
168: Rossen Stoyanchev, debug, IfStmt, logger.debug("Opening JPA EntityManager in OpenEntityManagerInViewFilter");
193: Rossen Stoyanchev, debug, IfStmt, logger.debug("Closing JPA EntityManager in OpenEntityManagerInViewFilter");
86: Arjen Poutsma, debug, IfStmt, logger.debug("Opening JPA EntityManager in OpenEntityManagerInViewInterceptor");
111: Arjen Poutsma, debug, IfStmt, logger.debug("Closing JPA EntityManager in OpenEntityManagerInViewInterceptor");
516: Juergen Hoeller, info, IfStmt, logger.info("Creating JAXBContext with context path [" + this.contextPath + "]");
540: Arjen Poutsma, info, IfStmt, logger.info("Creating JAXBContext with classes to be bound [" + StringUtils.arrayToCommaDelimitedString(classesToBeBound) + "]");
553: Arjen Poutsma, info, IfStmt, logger.info("Creating JAXBContext by scanning packages [" + StringUtils.arrayToCommaDelimitedString(packagesToScan) + "]");
559: Arjen Poutsma, debug, IfStmt, logger.debug("Found JAXB2 classes: [" + StringUtils.arrayToCommaDelimitedString(jaxb2Classes) + "]");
573: Juergen Hoeller, debug, IfStmt, logger.debug("Setting validation schema to " + StringUtils.arrayToCommaDelimitedString(this.schemaResources));
869: Arjen Poutsma, warn, CatchClause, logger.warn("Processing of external entities could not be disabled", ex);
237: Juergen Hoeller, info, IfStmt, logger.info("Configured for target package [" + this.targetPackage + "] using binding [" + this.bindingName + "]");
227: Arjen Poutsma, info, IfStmt, logger.info("Configured for target class [" + this.targetClass + "]");
221: Arjen Poutsma, info, IfStmt, logger.info("Configured for target class [" + this.targetClass + "] using binding [" + this.bindingName + "]");
737: Arjen Poutsma, debug, CatchClause, logger.debug("Could not flush HierarchicalStreamWriter", ex);
100: Chris Beams, debug, IfStmt, logger.debug("Listing name/class pairs under [" + root + "]");
108: Chris Beams, debug, IfStmt, logger.debug("Listing bindings under [" + root + "]");
123: Chris Beams, debug, IfStmt, logger.debug("Static JNDI lookup: [" + name + "]");
160: Chris Beams, info, IfStmt, logger.info("Static JNDI binding: [" + this.root + name + "] = [" + obj + "]");
168: Chris Beams, info, IfStmt, logger.info("Static JNDI remove: [" + this.root + name + "]");
144: Chris Beams, info, MethodDeclaration, logger.info("Activating simple JNDI environment");
168: Chris Beams, info, MethodDeclaration, logger.info("Deactivating simple JNDI environment");
187: Chris Beams, info, IfStmt, logger.info("Static JNDI binding: [" + name + "] = [" + obj + "]");
62: Sam Brannen, debug, IfStmt, logger.debug("MockRequestDispatcher: forwarding to [" + this.resource + "]");
72: Sam Brannen, debug, IfStmt, logger.debug("MockRequestDispatcher: including [" + this.resource + "]");
314: Juergen Hoeller, warn, CatchClause, logger.warn("Couldn't get resource paths for " + resource, ex);
333: Juergen Hoeller, warn, CatchClause, logger.warn("Couldn't get URL for " + resource, ex);
349: Juergen Hoeller, warn, CatchClause, logger.warn("Couldn't open InputStream for " + resource, ex);
438: Juergen Hoeller, info, MethodDeclaration, logger.info(message);
444: Juergen Hoeller, info, MethodDeclaration, logger.info(message, ex);
449: Juergen Hoeller, info, MethodDeclaration, logger.info(message, ex);
460: Juergen Hoeller, warn, CatchClause, logger.warn("Couldn't determine real path of resource " + resource, ex);
70: Juergen Hoeller, debug, IfStmt, logger.debug("Retrieved @ProfileValueSourceConfiguration [" + config + "] for test class [" + testClass.getName() + "]");
83: Juergen Hoeller, debug, IfStmt, logger.debug("Retrieved ProfileValueSource type [" + profileValueSourceType + "] for class [" + testClass.getName() + "]");
97: Juergen Hoeller, warn, IfStmt, logger.warn("Could not instantiate a ProfileValueSource of type [" + profileValueSourceType + "] for class [" + testClass.getName() + "]: using default.", ex);
80: Sam Brannen, debug, IfStmt, logger.debug(String.format("Instantiating BootstrapContext using constructor [%s]", constructor));
97: Sam Brannen, debug, IfStmt, logger.debug(String.format("Instantiating CacheAwareContextLoaderDelegate from class [%s]", clazz.getName()));
133: Sam Brannen, debug, IfStmt, logger.debug(String.format("Instantiating TestContextBootstrapper for test class [%s] from class [%s]", testClass.getName(), clazz.getName()));
159: Sam Brannen, debug, IfStmt, logger.debug(String.format("Test class [%s] has been configured with @ContextConfiguration's 'locations' (or 'value') %s " + "and 'classes' %s attributes. Most SmartContextLoader implementations support " + "only one declaration of resources per @ContextConfiguration annotation.", declaringClass.getName(), ObjectUtils.nullSafeToString(locations), ObjectUtils.nullSafeToString(classes)));
166: Juergen Hoeller, trace, IfStmt, logger.trace("Registering TestExecutionListener: " + listener);
209: Juergen Hoeller, trace, IfStmt, logger.trace("beforeTestClass(): class [" + testClass.getName() + "]");
240: Arjen Poutsma, trace, IfStmt, logger.trace("prepareTestInstance(): instance [" + testInstance + "]");
250: Juergen Hoeller, error, IfStmt, logger.error("Caught exception while allowing TestExecutionListener [" + testExecutionListener + "] to prepare test instance [" + testInstance + "]", ex);
481: Juergen Hoeller, trace, IfStmt, logger.trace("afterTestClass(): class [" + testClass.getName() + "]");
512: Sam Brannen, trace, IfStmt, logger.trace(String.format("%s(): instance [%s], method [%s]", callbackName, testInstance, testMethod));
521: Juergen Hoeller, trace, IfStmt, logger.trace(String.format("%s(): instance [%s], method [%s], exception [%s]", callbackName, testInstance, testMethod, exception));
538: Sam Brannen, warn, IfStmt, logger.warn(String.format("Caught exception while invoking '%s' callback on " + "TestExecutionListener [%s] for test class [%s]", callbackName, testExecutionListener, testClass), ex);
548: Sam Brannen, warn, IfStmt, logger.warn(String.format("Caught exception while invoking '%s' callback on " + "TestExecutionListener [%s] for test method [%s] and test instance [%s]", callbackName, testExecutionListener, testMethod, testInstance), ex);
570: Sam Brannen, info, IfStmt, logger.info(String.format("Failed to invoke copy constructor for [%s]; " + "concurrent test execution is therefore likely not supported.", testContext), ex);
130: Juergen Hoeller, debug, IfStmt, logger.debug(String.format("Retrieved ApplicationContext from cache with key [%s]", mergedContextConfiguration));
119: Juergen Hoeller, debug, IfStmt, logger.debug(String.format("Storing ApplicationContext in cache under key [%s]", mergedContextConfiguration));
290: Sam Brannen, debug, IfStmt, statsLogger.debug("Spring test ApplicationContext cache statistics: " + this);
165: Juergen Hoeller, debug, IfStmt, logger.debug(String.format("Processing %s for execution phase [%s] and test context %s.", mergedSqlConfig, executionPhase, testContext));
190: Sam Brannen, debug, IfStmt, logger.debug("Executing SQL scripts: " + ObjectUtils.nullSafeToString(scriptResources));
288: Sam Brannen, error, IfStmt, logger.error(msg);
279: Juergen Hoeller, info, IfStmt, logger.info(String.format("Detected default SQL script \"%s\" for test %s [%s]", prefixedResourcePath, elementType, elementName));
97: Sam Brannen, debug, IfStmt, logger.debug(reason);
125: Sam Brannen, debug, IfStmt, logger.debug(reason);
115: Sam Brannen, info, IfStmt, logger.info(reason);
152: Sam Brannen, warn, IfStmt, logger.warn(String.format("@%s(\"%s\") could not be evaluated on [%s] since the test " + "ApplicationContext [%s] is not a ConfigurableApplicationContext", annotationType.getSimpleName(), expression, element, contextType));
139: Juergen Hoeller, debug, IfStmt, logger.debug("SpringJUnit4ClassRunner constructor called with [" + clazz + "]");
377: Sam Brannen, error, IfStmt, logger.error(msg);
135: Juergen Hoeller, debug, IfStmt, logger.debug("Applying SpringClassRule to test class [" + testClass.getName() + "]");
143: Sam Brannen, debug, IfStmt, logger.debug("Applying SpringMethodRule to test method [" + testMethod + "]");
81: Sam Brannen, info, IfStmt, logger.info(String.format("Repetition %d of test %s#%s()", (i + 1), this.testMethod.getDeclaringClass().getSimpleName(), this.testMethod.getName()));
258: Juergen Hoeller, debug, IfStmt, logger.debug(String.format("Did not detect default resource location for test class [%s]: " + "%s does not exist", clazz.getName(), classPathResource));
252: Sam Brannen, info, IfStmt, logger.info(String.format("Detected default resource location \"%s\" for test class [%s]", prefixedResourcePath, clazz.getName()));
264: Juergen Hoeller, info, IfStmt, logger.info(String.format("Could not detect default resource locations for test class [%s]: " + "no resource found for suffixes %s.", clazz.getName(), ObjectUtils.nullSafeToString(suffixes)));
95: Juergen Hoeller, debug, IfStmt, logger.debug(String.format("Delegating to %s to process context configuration %s.", name(loader), configAttributes));
105: Sam Brannen, debug, IfStmt, logger.debug(String.format("Delegating to %s to load context from %s.", name(loader), mergedConfig));
175: Sam Brannen, info, IfStmt, logger.info(String.format("%s detected default locations for context configuration %s.", name(getXmlLoader()), configAttributes));
189: Juergen Hoeller, info, IfStmt, logger.info(String.format("%s detected default configuration classes for context configuration %s.", name(getAnnotationConfigLoader()), configAttributes));
203: Juergen Hoeller, error, IfStmt, logger.error(msg);
107: Sam Brannen, debug, IfStmt, logger.debug(String.format("%s test method: context %s, class annotated with @DirtiesContext [%s] " + "with mode [%s], method annotated with @DirtiesContext [%s] with mode [%s].", phase, testContext, classAnnotated, classMode, methodAnnotated, methodMode));
142: Sam Brannen, debug, IfStmt, logger.debug(String.format("%s test class: context %s, class annotated with @DirtiesContext [%s] with mode [%s].", phase, testContext, classAnnotated, classMode));
109: Sam Brannen, debug, IfStmt, logger.debug(String.format("Loading ApplicationContext for merged context configuration [%s].", mergedConfig));
184: Sam Brannen, debug, IfStmt, logger.debug(String.format("Loading ApplicationContext for locations [%s].", StringUtils.arrayToCommaDelimitedString(locations)));
137: Sam Brannen, trace, IfStmt, logger.trace(String.format("Retrieved @TestExecutionListeners [%s] for declaring class [%s].", testExecutionListeners, declaringClass.getName()));
151: Juergen Hoeller, debug, IfStmt, logger.debug(String.format("Merging default listeners with listeners configured via " + "@TestExecutionListeners for class [%s].", descriptor.getRootDeclaringClass().getName()));
125: Sam Brannen, debug, IfStmt, logger.debug(String.format("@TestExecutionListeners is not present for class [%s]: using defaults.", clazz.getName()));
177: Juergen Hoeller, info, IfStmt, logger.info("Using TestExecutionListeners: " + listeners);
192: Juergen Hoeller, debug, IfStmt, logger.debug(String.format("Skipping candidate TestExecutionListener [%s] due to a missing dependency. " + "Specify custom listener classes or make the default listener classes " + "and their required dependencies available. Offending class: [%s]", listenerClass.getName(), ex.getCause().getMessage()));
225: Juergen Hoeller, debug, IfStmt, logger.debug("Could not load default TestExecutionListener class [" + className + "]. Specify custom listener classes or make the default listener classes available.", ex);
248: Sam Brannen, info, IfStmt, logger.info(String.format("Loaded default TestExecutionListener class names from location [%s]: %s", SpringFactoriesLoader.FACTORIES_RESOURCE_LOCATION, classNames));
308: Phillip Webb, info, IfStmt, logger.info(String.format("Neither @ContextConfiguration nor @ContextHierarchy found for test class [%s], using %s", testClass.getName(), contextLoader.getClass().getSimpleName()));
355: Sam Brannen, trace, IfStmt, logger.trace(String.format("Processing locations and classes for context configuration attributes %s", configAttributes));
454: Sam Brannen, trace, IfStmt, logger.trace(String.format("Using ContextLoader class [%s] for test class [%s]", contextLoaderClass.getName(), testClass.getName()));
488: Sam Brannen, trace, IfStmt, logger.trace(String.format("Resolving ContextLoader for context configuration attributes %s", configAttributes));
494: Sam Brannen, debug, IfStmt, logger.debug(String.format("Found explicit ContextLoader class [%s] for context configuration attributes %s", contextLoaderClass.getName(), configAttributes));
79: Sam Brannen, debug, IfStmt, logger.debug(String.format("Could not find an 'annotation declaring class' for annotation type [%s] and class [%s]", annotationType.getName(), testClass.getName()));
90: Juergen Hoeller, trace, IfStmt, logger.trace(String.format("Retrieved @ActiveProfiles [%s] for declaring class [%s]", annotation, declaringClass.getName()));
106: Sam Brannen, error, CatchClause, logger.error(msg);
162: Sam Brannen, error, IfStmt, logger.error(msg);
184: Sam Brannen, debug, IfStmt, logger.debug("Registering annotated classes: " + ObjectUtils.nullSafeToString(annotatedClasses));
73: Sam Brannen, debug, IfStmt, logger.debug(String.format("Ignoring class [%s]; it must be static, non-private, non-final, and annotated " + "with @Configuration to be considered a default configuration class.", candidate.getName()));
83: Juergen Hoeller, info, IfStmt, logger.info(String.format("Could not detect default configuration classes for test class [%s]: " + "%s does not declare any static, non-private, non-final, nested classes " + "annotated with @Configuration.", declaringClass.getName(), declaringClass.getSimpleName()));
73: Juergen Hoeller, trace, IfStmt, logger.trace("Processing context initializers for configuration attributes " + configAttributes);
119: Sam Brannen, error, IfStmt, logger.error(msg);
144: Sam Brannen, error, IfStmt, logger.error(msg);
209: Sam Brannen, error, IfStmt, logger.error(msg);
262: Sam Brannen, trace, IfStmt, logger.trace(String.format("Retrieved @ContextConfiguration [%s] for declaring class [%s].", contextConfiguration, declaringClass.getName()));
268: Sam Brannen, trace, IfStmt, logger.trace("Resolved context configuration attributes: " + attributes);
78: Sam Brannen, trace, IfStmt, logger.trace(String.format("Retrieved @ActiveProfiles [%s] for declaring class [%s].", annotation, declaringClass.getName()));
68: Sam Brannen, debug, IfStmt, logger.debug(String.format("Could not find an 'annotation declaring class' for annotation type [%s] and class [%s]", annotationType.getName(), testClass.getName()));
81: Arjen Poutsma, debug, IfStmt, logger.debug("Performing dependency injection for test context [" + testContext + "].");
97: Arjen Poutsma, debug, IfStmt, logger.debug("Reinjecting dependencies for test context [" + testContext + "].");
67: Sam Brannen, error, IfStmt, logger.error(msg);
71: Sam Brannen, error, IfStmt, logger.error(msg);
174: Sam Brannen, error, IfStmt, logger.error(msg);
164: Sam Brannen, info, IfStmt, logger.info(String.format("Detected default properties file \"%s\" for test class [%s]", prefixedResourcePath, testClass.getName()));
97: Sam Brannen, trace, IfStmt, logger.trace(String.format("Retrieved @TestPropertySource [%s] for declaring class [%s].", testPropertySource, rootDeclaringClass.getName()));
103: Sam Brannen, trace, IfStmt, logger.trace("Resolved TestPropertySource attributes: " + attributes);
116: Sam Brannen, trace, IfStmt, logger.trace(String.format("Processing locations for TestPropertySource attributes %s", attrs));
132: Sam Brannen, trace, IfStmt, logger.trace(String.format("Processing inlined properties for TestPropertySource attributes %s", attrs));
244: Juergen Hoeller, debug, IfStmt, logger.debug("Adding inlined properties to environment: " + ObjectUtils.nullSafeToString(inlinedProperties));
100: Juergen Hoeller, error, CatchClause, logger.error(String.format("Failed to retrieve DataSource named '%s' for test context %s", name, testContext), ex);
173: Juergen Hoeller, error, CatchClause, logger.error(String.format("Failed to retrieve transaction manager named '%s' for test context %s", name, testContext), ex);
218: Sam Brannen, debug, IfStmt, logger.debug(String.format("Caught exception while retrieving %s for test context %s", beanType.getSimpleName(), testContext), ex);
176: Juergen Hoeller, debug, IfStmt, logger.debug("Explicit transaction definition [" + transactionAttribute + "] found for test context " + testContext);
247: Juergen Hoeller, error, IfStmt, logger.error("Exception encountered while executing @BeforeTransaction methods for test context " + testContext + ".", ex.getTargetException());
239: Sam Brannen, debug, IfStmt, logger.debug("Executing @BeforeTransaction method [" + method + "] for test context " + testContext);
279: Juergen Hoeller, error, CatchClause, logger.error("Exception encountered while executing @AfterTransaction method [" + method + "] for test context " + testContext, targetException);
286: Juergen Hoeller, error, CatchClause, logger.error("Exception encountered while executing @AfterTransaction method [" + method + "] for test context " + testContext, ex);
269: Sam Brannen, debug, IfStmt, logger.debug("Executing @AfterTransaction method [" + method + "] for test context " + testContext);
322: Juergen Hoeller, warn, IfStmt, logger.warn(String.format("Caught exception while retrieving transaction manager with qualifier '%s' for test context %s", qualifier, testContext), ex);
371: Juergen Hoeller, debug, IfStmt, logger.debug(String.format("Retrieved default @Rollback(%s) for test class [%s].", defaultRollback, testClass.getName()));
407: Sam Brannen, debug, IfStmt, logger.debug(String.format("No method-level @Rollback override: using default rollback [%s] for test context %s.", rollback, testContext));
399: Sam Brannen, debug, IfStmt, logger.debug(String.format("Method-level @Rollback(%s) overrides default rollback [%s] for test context %s.", rollbackOverride, rollback, testContext));
107: Sam Brannen, info, IfStmt, logger.info(String.format("Began transaction (%s) for test context %s; transaction manager [%s]; rollback [%s]", transactionsStarted, this.testContext, this.transactionManager, flaggedForRollback));
119: Sam Brannen, trace, IfStmt, logger.trace(String.format("Ending transaction for test context %s; transaction status [%s]; rollback [%s]", this.testContext, this.transactionStatus, this.flaggedForRollback));
139: Juergen Hoeller, info, IfStmt, logger.info((this.flaggedForRollback ? "Rolled back" : "Committed") + " transaction for test: " + this.testContext);
111: Sam Brannen, debug, IfStmt, logger.debug(String.format("Loading WebApplicationContext for merged context configuration %s.", webMergedConfig));
162: Sam Brannen, debug, IfStmt, logger.debug("Registering annotated classes: " + ObjectUtils.nullSafeToString(annotatedClasses));
180: Sam Brannen, error, IfStmt, logger.error(msg);
72: Sam Brannen, error, IfStmt, logger.error(msg);
166: Sam Brannen, debug, IfStmt, logger.debug(String.format("Resetting RequestContextHolder for test context %s.", testContext));
200: Sam Brannen, debug, IfStmt, logger.debug(String.format("Setting up MockHttpServletRequest, MockHttpServletResponse, ServletWebRequest, and RequestContextHolder for test context %s.", testContext));
92: Ian Brandt, info, IfStmt, logger.info("Deleted " + rowCount + " rows from table " + tableName);
126: Phillip Webb, info, IfStmt, logger.info("Deleted " + rowCount + " rows from table " + tableName);
140: Ian Brandt, info, IfStmt, logger.info("Dropped table " + tableName);
191: Sam Brannen, debug, IfStmt, logger.debug(String.format("Setting field '%s' of type [%s] on %s or target class [%s] to value [%s]", name, type, safeToString(targetObject), targetClass, value));
275: Sam Brannen, debug, IfStmt, logger.debug(String.format("Getting field '%s' from %s or target class [%s]", name, safeToString(targetObject), targetClass));
349: Sam Brannen, debug, IfStmt, logger.debug(String.format("Invoking setter method '%s' on %s with value [%s]", setterMethodName, safeToString(target), value));
397: Sam Brannen, debug, IfStmt, logger.debug(String.format("Invoking getter method '%s' on %s", getterMethodName, safeToString(target)));
433: Sam Brannen, debug, IfStmt, logger.debug(String.format("Invoking method '%s' on %s with arguments %s", name, safeToString(target), ObjectUtils.nullSafeToString(args)));
107: Rossen Stoyanchev, debug, IfStmt, logger.debug(String.format("%s %s \"%s\"", message, httpMethod, uri));
137: Sam Brannen, debug, IfStmt, logger.debug("MvcResult details:\n" + stringWriter);
89: Sam Brannen, info, MethodDeclaration, logger.info("beforeAllTests()");
94: Sam Brannen, info, MethodDeclaration, logger.info("afterTestSuite()");
99: Sam Brannen, info, MethodDeclaration, logger.info("setUp()");
104: Sam Brannen, info, MethodDeclaration, logger.info("tearDown()");
109: Sam Brannen, info, MethodDeclaration, logger.info("test1()");
115: Sam Brannen, info, MethodDeclaration, logger.info("test2()");
36: Sam Brannen, info, MethodDeclaration, logger.info("initializing");
41: Sam Brannen, info, MethodDeclaration, logger.info("destroying");
131: Arjen Poutsma, debug, IfStmt, logger.debug("----------------------------------------------------------------------");
132: Arjen Poutsma, debug, IfStmt, logger.debug("Configured locations: " + ObjectUtils.nullSafeToString(configuredLocations));
133: Arjen Poutsma, debug, IfStmt, logger.debug("Expected   locations: " + ObjectUtils.nullSafeToString(this.expectedLocations));
134: Arjen Poutsma, debug, IfStmt, logger.debug("Processed  locations: " + ObjectUtils.nullSafeToString(processedLocations));
160: Arjen Poutsma, debug, IfStmt, logger.debug("Acquired Connection [" + con + "] for local CCI transaction");
212: Arjen Poutsma, debug, IfStmt, logger.debug("Committing CCI local transaction on Connection [" + con + "]");
230: Arjen Poutsma, debug, IfStmt, logger.debug("Rolling back CCI local transaction on Connection [" + con + "]");
247: Arjen Poutsma, debug, IfStmt, logger.debug("Setting CCI local transaction [" + txObject.getConnectionHolder().getConnection() + "] rollback-only");
264: Arjen Poutsma, debug, IfStmt, logger.debug("Releasing CCI Connection [" + con + "] after transaction");
127: Arjen Poutsma, debug, MethodDeclaration, logger.debug("Opening CCI Connection");
131: Arjen Poutsma, debug, IfStmt, logger.debug("Registering transaction synchronization for CCI Connection");
171: Arjen Poutsma, debug, CatchClause, logger.debug("Could not close CCI Connection", ex);
175: Arjen Poutsma, debug, CatchClause, logger.debug("Unexpected exception on closing CCI Connection", ex);
158: Arjen Poutsma, info, IfStmt, logger.info("Established shared CCI Connection: " + this.target);
205: Arjen Poutsma, warn, CatchClause, logger.warn("Could not close shared CCI Connection", ex);
415: Arjen Poutsma, trace, CatchClause, logger.trace("Could not close CCI Interaction", ex);
419: Arjen Poutsma, trace, CatchClause, logger.trace("Unexpected exception on closing CCI Interaction", ex);
436: Arjen Poutsma, trace, CatchClause, logger.trace("Could not close CCI ResultSet", ex);
440: Arjen Poutsma, trace, CatchClause, logger.trace("Unexpected exception on closing CCI ResultSet", ex);
165: Arjen Poutsma, info, IfStmt, logger.info("Starting SpringContextResourceAdapter with BootstrapContext: " + bootstrapContext);
211: Arjen Poutsma, info, MethodDeclaration, logger.info("Stopping SpringContextResourceAdapter");
275: Juergen Hoeller, debug, MethodDeclaration, logger.debug("Transaction marked as rollback-only after endpoint exception", ex);
295: Juergen Hoeller, warn, CatchClause, logger.warn("Failed to complete transaction after endpoint delivery", ex);
308: Juergen Hoeller, warn, CatchClause, logger.warn("Could not complete unfinished transaction on endpoint release", ex);
76: Juergen Hoeller, debug, IfStmt, logger.debug("No transaction is active - skipping " + event);
69: Juergen Hoeller, warn, IfStmt, logger.warn("Processing " + event + " as a fallback execution on AFTER_ROLLBACK phase");
117: Juergen Hoeller, debug, IfStmt, logger.debug("Adding transactional method '" + methodIdentification + "' with attribute: " + txAttr);
174: Arjen Poutsma, debug, IfStmt, logger.debug("Keeping attribute for transactional method [" + method + "]: current name '" + name + "' is not more specific than '" + regMethodName + "'");
166: Arjen Poutsma, debug, IfStmt, logger.debug("Replacing attribute for transactional method [" + method + "]: current name '" + name + "' is more specific than '" + regMethodName + "'");
190: Arjen Poutsma, debug, IfStmt, logger.debug("Adding transactional method [" + method + "] with attribute [" + attr + "]");
95: Arjen Poutsma, debug, IfStmt, logger.debug("Adding transactional method [" + methodName + "] with attribute [" + attr + "]");
134: Arjen Poutsma, trace, IfStmt, logger.trace("Applying rules to determine whether transaction should rollback on " + ex);
151: Arjen Poutsma, trace, IfStmt, logger.trace("Winning rollback rule is: " + winner);
156: Arjen Poutsma, trace, IfStmt, logger.trace("No relevant rollback rule found: applying default rules");
350: Juergen Hoeller, error, IfStmt, logger.error("Application exception overridden by commit exception", throwableHolder.throwable);
357: Juergen Hoeller, error, IfStmt, logger.error("Application exception overridden by commit exception", throwableHolder.throwable);
478: Arjen Poutsma, debug, IfStmt, logger.debug("Skipping transactional joinpoint [" + joinpointIdentification + "] because no transaction manager has been configured");
511: Arjen Poutsma, trace, BlockStmt, logger.trace("Don't need to create transaction for [" + joinpointIdentification + "]: This method isn't transactional.");
502: Arjen Poutsma, trace, IfStmt, logger.trace("Getting transaction for [" + txInfo.getJoinpointIdentification() + "]");
530: Arjen Poutsma, trace, IfStmt, logger.trace("Completing transaction for [" + txInfo.getJoinpointIdentification() + "]");
545: Arjen Poutsma, trace, IfStmt, logger.trace("Completing transaction for [" + txInfo.getJoinpointIdentification() + "] after exception: " + ex);
569: Arjen Poutsma, error, CatchClause, logger.error("Application exception overridden by commit exception", ex);
574: Arjen Poutsma, error, CatchClause, logger.error("Application exception overridden by commit exception", ex);
553: Arjen Poutsma, error, CatchClause, logger.error("Application exception overridden by rollback exception", ex);
558: Arjen Poutsma, error, CatchClause, logger.error("Application exception overridden by rollback exception", ex);
501: Arjen Poutsma, info, IfStmt, logger.info("Using JTA UserTransaction: " + this.userTransaction);
516: Juergen Hoeller, warn, IfStmt, logger.warn("No JTA TransactionManager found: transaction suspension not available");
512: Arjen Poutsma, info, IfStmt, logger.info("Using JTA TransactionManager: " + this.transactionManager);
546: Arjen Poutsma, info, IfStmt, logger.info("Using JTA TransactionSynchronizationRegistry: " + this.transactionSynchronizationRegistry);
580: Arjen Poutsma, debug, IfStmt, logger.debug("Retrieving JTA UserTransaction from JNDI location [" + userTransactionName + "]");
604: Arjen Poutsma, debug, IfStmt, logger.debug("Retrieving JTA TransactionManager from JNDI location [" + transactionManagerName + "]");
627: Arjen Poutsma, debug, IfStmt, logger.debug("Retrieving JTA TransactionSynchronizationRegistry from JNDI location [" + registryName + "]");
697: Arjen Poutsma, debug, IfStmt, logger.debug("No JTA UserTransaction found at default JNDI location [" + jndiName + "]", ex);
690: Arjen Poutsma, debug, IfStmt, logger.debug("JTA UserTransaction found at default JNDI location [" + jndiName + "]");
715: Arjen Poutsma, debug, IfStmt, logger.debug("JTA UserTransaction object [" + ut + "] implements TransactionManager");
731: Arjen Poutsma, debug, IfStmt, logger.debug("No JTA TransactionManager found at fallback JNDI location [" + jndiName + "]", ex);
725: Arjen Poutsma, debug, IfStmt, logger.debug("JTA TransactionManager found at fallback JNDI location [" + jndiName + "]");
768: Juergen Hoeller, debug, IfStmt, logger.debug("No JTA TransactionSynchronizationRegistry found at default JNDI location [" + jndiName + "]", ex);
762: Juergen Hoeller, debug, IfStmt, logger.debug("JTA TransactionSynchronizationRegistry found at default JNDI location [" + jndiName + "]");
1029: Arjen Poutsma, debug, IfStmt, logger.debug("Rollback failure with transaction already marked as rolled back: " + ex);
1067: Arjen Poutsma, debug, IfStmt, logger.debug("Rollback failure with transaction already marked as rolled back: " + ex);
1085: Arjen Poutsma, debug, IfStmt, logger.debug("Setting JTA transaction rollback-only");
1107: Arjen Poutsma, debug, MethodDeclaration, logger.debug("Registering after-completion synchronization with existing JTA transaction");
1124: Juergen Hoeller, debug, IfStmt, logger.debug("Participating in existing JTA transaction, but unexpected internal transaction " + "state encountered: cannot register Spring after-completion callbacks with outer JTA " + "transaction - processing Spring after-completion callbacks with outcome status 'unknown'" + "Original exception: " + ex);
1117: Juergen Hoeller, debug, IfStmt, logger.debug("Participating in existing JTA transaction that has been marked for rollback: " + "cannot register Spring after-completion callbacks with outer JTA transaction - " + "immediately performing Spring after-completion callbacks with outcome status 'rollback'. " + "Original exception: " + ex);
1178: Arjen Poutsma, warn, IfStmt, logger.warn("Participating in existing JTA transaction, but no JTA TransactionManager available: " + "cannot register Spring after-completion callbacks with outer JTA transaction - " + "processing Spring after-completion callbacks with outcome status 'unknown'");
1193: Juergen Hoeller, debug, CatchClause, logger.debug("Failed to reset transaction timeout after JTA completion", ex);
160: Arjen Poutsma, debug, IfStmt, logger.debug("No JTA transaction handle available and/or running on WebLogic - " + "relying on JTA provider to mark the transaction as rollback-only based on " + "the exception thrown from beforeCompletion");
151: Arjen Poutsma, debug, CatchClause, logger.debug("JTA transaction handle does not support setRollbackOnly method - " + "relying on JTA provider to mark the transaction as rollback-only based on " + "the exception thrown from beforeCompletion", ex);
156: Arjen Poutsma, error, CatchClause, logger.error("Could not set JTA transaction rollback-only", ex);
120: Juergen Hoeller, debug, TryStmt, logger.debug("Retrieving JTA UserTransaction from WebLogic TransactionHelper");
139: Juergen Hoeller, debug, TryStmt, logger.debug("Retrieving JTA TransactionManager from WebLogic TransactionHelper");
161: Juergen Hoeller, debug, TryStmt, logger.debug("WebLogic TransactionHelper found");
186: Arjen Poutsma, info, IfStmt, logger.info("Support for WebLogic transaction names not available");
183: Arjen Poutsma, info, IfStmt, logger.info("Support for WebLogic transaction names available");
192: Juergen Hoeller, debug, TryStmt, logger.debug("WebLogic ClientTransactionManager found");
202: Arjen Poutsma, warn, IfStmt, logger.warn("Support for WebLogic forceResume not available");
199: Arjen Poutsma, debug, IfStmt, logger.debug("Support for WebLogic forceResume available");
302: Arjen Poutsma, debug, IfStmt, logger.debug("Standard JTA resume threw InvalidTransactionException: " + ex.getMessage() + " - trying WebLogic JTA forceResume");
171: Arjen Poutsma, debug, IfStmt, logger.debug("Retrieving WebSphere UOWManager from JNDI location [" + uowManagerName + "]");
194: Juergen Hoeller, debug, CatchClause, logger.debug("WebSphere UOWManager is not available at default JNDI location [" + DEFAULT_UOW_MANAGER_NAME + "] - falling back to UOWManagerFactory lookup");
190: Juergen Hoeller, debug, TryStmt, logger.debug("Retrieving WebSphere UOWManager from default JNDI location [" + DEFAULT_UOW_MANAGER_NAME + "]");
293: Arjen Poutsma, Debug, MethodDeclaration, boolean debug = logger.isDebugEnabled();
295: Arjen Poutsma, debug, IfStmt, logger.debug("Creating new transaction with name [" + definition.getName() + "]: " + definition);
319: Juergen Hoeller, error, IfStmt, logger.error("Application exception overridden by rollback exception", appEx);
304: Arjen Poutsma, debug, IfStmt, logger.debug("Invoking WebSphere UOW action: type=" + uowType + ", join=" + joinTx);
310: Arjen Poutsma, debug, IfStmt, logger.debug("Returned from WebSphere UOW action: type=" + uowType + ", join=" + joinTx);
379: Juergen Hoeller, debug, IfStmt, logger.debug("Rolling back on application exception from transaction callback", ex);
386: Juergen Hoeller, debug, IfStmt, logger.debug("Transaction callback has explicitly requested rollback");
345: Arjen Poutsma, Debug, MethodDeclaration, boolean debugEnabled = logger.isDebugEnabled();
390: Juergen Hoeller, warn, IfStmt, logger.warn("Custom isolation level specified but no actual transaction initiated; " + "isolation level will effectively be ignored: " + definition);
372: Juergen Hoeller, debug, IfStmt, logger.debug("Creating new transaction with name [" + definition.getName() + "]: " + definition);
412: Arjen Poutsma, debug, IfStmt, logger.debug("Suspending current transaction");
422: Arjen Poutsma, debug, IfStmt, logger.debug("Suspending current transaction, creating new transaction with name [" + definition.getName() + "]");
447: Arjen Poutsma, debug, IfStmt, logger.debug("Creating nested transaction with name [" + definition.getName() + "]");
473: Arjen Poutsma, debug, IfStmt, logger.debug("Participating in existing transaction");
647: Arjen Poutsma, error, CatchClause, logger.error(exMessage, beginEx);
700: Arjen Poutsma, debug, IfStmt, logger.debug("Transactional code has requested rollback");
708: Arjen Poutsma, debug, IfStmt, logger.debug("Global transaction is marked as rollback-only but transactional code requested commit");
743: Arjen Poutsma, debug, IfStmt, logger.debug("Initiating transaction commit");
736: Arjen Poutsma, debug, IfStmt, logger.debug("Releasing transaction savepoint");
856: Juergen Hoeller, debug, IfStmt, logger.debug("Should roll back transaction but cannot - no transaction available");
851: Juergen Hoeller, debug, IfStmt, logger.debug("Participating transaction failed - letting transaction originator decide on rollback");
845: Juergen Hoeller, debug, IfStmt, logger.debug("Participating transaction failed - marking existing transaction as rollback-only");
836: Arjen Poutsma, debug, IfStmt, logger.debug("Initiating transaction rollback");
830: Arjen Poutsma, debug, IfStmt, logger.debug("Rolling back transaction to savepoint");
905: Arjen Poutsma, error, CatchClause, logger.error("Commit exception overridden by rollback exception", ex);
899: Arjen Poutsma, debug, IfStmt, logger.debug("Marking existing transaction as rollback-only after commit exception", ex);
893: Arjen Poutsma, debug, IfStmt, logger.debug("Initiating transaction rollback after commit exception", ex);
920: Arjen Poutsma, trace, IfStmt, logger.trace("Triggering beforeCommit synchronization");
933: Arjen Poutsma, trace, IfStmt, logger.trace("Triggering beforeCompletion synchronization");
946: Arjen Poutsma, trace, IfStmt, logger.trace("Triggering afterCommit synchronization");
963: Arjen Poutsma, trace, IfStmt, logger.trace("Triggering afterCompletion synchronization");
1011: Juergen Hoeller, debug, IfStmt, logger.debug("Resuming suspended transaction after completion of inner transaction");
1243: Arjen Poutsma, debug, MethodDeclaration, logger.debug("Cannot register Spring after-completion synchronization with existing transaction - " + "processing Spring after-completion callbacks immediately, with outcome status 'unknown'");
142: Arjen Poutsma, trace, IfStmt, logger.trace("Retrieved value [" + value + "] for key [" + actualKey + "] bound to thread [" + Thread.currentThread().getName() + "]");
196: Arjen Poutsma, trace, IfStmt, logger.trace("Bound value [" + value + "] for key [" + actualKey + "] to thread [" + Thread.currentThread().getName() + "]");
248: Arjen Poutsma, trace, IfStmt, logger.trace("Removed value [" + value + "] for key [" + actualKey + "] from thread [" + Thread.currentThread().getName() + "]");
277: Arjen Poutsma, trace, MethodDeclaration, logger.trace("Initializing transaction synchronization");
336: Arjen Poutsma, trace, MethodDeclaration, logger.trace("Clearing transaction synchronization");
110: Arjen Poutsma, error, CatchClause, logger.error("TransactionSynchronization.beforeCompletion threw exception", tsex);
174: Arjen Poutsma, error, CatchClause, logger.error("TransactionSynchronization.afterCompletion threw exception", tsex);
166: Arjen Poutsma, debug, MethodDeclaration, logger.debug("Initiating transaction rollback on application exception", ex);
171: Arjen Poutsma, error, CatchClause, logger.error("Application exception overridden by rollback exception", ex);
176: Arjen Poutsma, error, CatchClause, logger.error("Application exception overridden by rollback exception", ex);
87: Arjen Poutsma, debug, IfStmt, logger.debug("Created asynchronous " + method.name() + " request for \"" + url + "\"");
89: Arjen Poutsma, debug, IfStmt, logger.debug("Created " + method.name() + " request for \"" + url + "\"");
205: Sebastien Deleuze, warn, IfStmt, logger.warn(msg + ": " + cause);
202: Sebastien Deleuze, warn, IfStmt, logger.warn(msg, cause);
199: Juergen Hoeller, debug, IfStmt, logger.debug(msg, cause);
771: Juergen Hoeller, warn, IfStmt, logger.warn("For Jackson Kotlin classes support please add " + "\"com.fasterxml.jackson.module:jackson-module-kotlin\" to the classpath");
171: Rossen Stoyanchev, warn, CatchClause, logger.warn("Processing of external entities could not be disabled", ex);
84: Rossen Stoyanchev, trace, MethodDeclaration, this.logger.trace("I/O event onDataAvailable");
93: Rossen Stoyanchev, trace, MethodDeclaration, this.logger.trace("I/O event onAllDataRead");
102: Rossen Stoyanchev, trace, IfStmt, this.logger.trace("I/O event onError: " + ex);
159: Rossen Stoyanchev, trace, IfStmt, logger.trace("No more data to read");
153: Rossen Stoyanchev, trace, IfStmt, logger.trace("Data item read, publishing..");
170: Rossen Stoyanchev, trace, IfStmt, logger.trace(oldState + " -> " + newState);
200: Rossen Stoyanchev, trace, IfStmt, logger.trace("Signal request(" + n + ")");
208: Rossen Stoyanchev, trace, IfStmt, logger.trace("Signal cancel()");
247: Rossen Stoyanchev, trace, IfStmt, publisher.logger.trace("Completed before demand");
253: Rossen Stoyanchev, trace, IfStmt, publisher.logger.trace("Completed with error before demand: " + ex);
65: Rossen Stoyanchev, trace, MethodDeclaration, logger.trace("Received onNext publisher");
76: Rossen Stoyanchev, trace, IfStmt, logger.trace("Received onError: " + ex);
87: Rossen Stoyanchev, trace, MethodDeclaration, logger.trace("Received onComplete");
105: Rossen Stoyanchev, trace, MethodDeclaration, this.logger.trace("Received request to cancel");
162: Rossen Stoyanchev, trace, IfStmt, logger.trace(oldState + " -> " + newState);
170: Rossen Stoyanchev, trace, IfStmt, logger.trace("isWritePossible[" + result + "]");
372: Rossen Stoyanchev, trace, IfStmt, this.processor.logger.trace(this.processor.state + " writeComplete");
70: Rossen Stoyanchev, trace, MethodDeclaration, logger.trace("Received onNext data item");
81: Rossen Stoyanchev, trace, IfStmt, logger.trace("Received onError: " + ex);
92: Rossen Stoyanchev, trace, MethodDeclaration, logger.trace("Received onComplete");
102: Rossen Stoyanchev, trace, MethodDeclaration, this.logger.trace("Received onWritePossible");
111: Rossen Stoyanchev, trace, MethodDeclaration, this.logger.trace("Received request to cancel");
195: Rossen Stoyanchev, trace, IfStmt, logger.trace(oldState + " -> " + newState);
219: Rossen Stoyanchev, trace, IfStmt, logger.trace("isWritePossible[" + result + "]");
132: Rossen Stoyanchev, warn, IfStmt, logger.warn("Could not decode query param [" + value + "] as 'UTF-8'. " + "Falling back on default encoding; exception message: " + ex.getMessage());
94: Rossen Stoyanchev, trace, IfStmt, logger.trace("HTTP response already committed. " + "Status not set to " + (statusCode != null ? statusCode.toString() : "null"));
207: Rossen Stoyanchev, debug, IfStmt, logger.debug("Skipping doCommit (response already committed).");
65: Juergen Hoeller, warn, IfStmt, logger.warn("Invalid URL for incoming request: " + ex.getMessage());
77: Rossen Stoyanchev, debug, MethodCallExpr, logger.debug("Handling completed with success");
76: sdeleuze, warn, MethodCallExpr, logger.warn("Handling completed with error: " + ex.getMessage());
143: Juergen Hoeller, info, IfStmt, logger.info("Found Servlet mapping '" + path + "' for Servlet '" + name + "'");
235: Rossen Stoyanchev, debug, MethodDeclaration, logger.debug("Timeout notification from Servlet container");
242: Rossen Stoyanchev, Error, MethodDeclaration, logger.debug("Error notification from Servlet container");
282: sdeleuze, warn, MethodDeclaration, logger.warn("Handling completed with error: " + ex.getMessage());
291: Rossen Stoyanchev, debug, TryStmt, logger.debug("Setting response status code to 500");
285: Rossen Stoyanchev, debug, IfStmt, logger.debug("Dispatching into container to raise error");
304: Rossen Stoyanchev, debug, MethodDeclaration, logger.debug("Handling completed with success");
208: Rossen Stoyanchev, trace, IfStmt, logger.trace("InputStream read returned " + read + (read != -1 ? " bytes" : ""));
278: Rossen Stoyanchev, trace, IfStmt, logger.trace("flush");
311: Arjen Poutsma, trace, IfStmt, logger.trace("flush");
317: Arjen Poutsma, trace, IfStmt, this.logger.trace("write: " + dataBuffer + " ready: " + ready);
323: Rossen Stoyanchev, trace, IfStmt, this.logger.trace("written: " + written + " total: " + remaining);
327: Rossen Stoyanchev, trace, IfStmt, logger.trace("releaseData: " + dataBuffer);
87: Arjen Poutsma, trace, IfStmt, logger.trace("read:" + read);
100: sdeleuze, warn, MethodDeclaration, logger.warn("Handling completed with error: " + ex.getMessage());
111: Rossen Stoyanchev, debug, IfStmt, logger.debug("Setting response status code to 500");
103: Rossen Stoyanchev, debug, TryStmt, logger.debug("Closing connection");
119: Rossen Stoyanchev, debug, MethodDeclaration, logger.debug("Handling completed with success");
174: Rossen Stoyanchev, trace, IfStmt, logger.trace("Channel read returned " + read + (read != -1 ? " bytes" : ""));
171: Arjen Poutsma, trace, IfStmt, logger.trace("write: " + dataBuffer);
181: Arjen Poutsma, trace, IfStmt, logger.trace("written: " + written + " total: " + total);
191: Rossen Stoyanchev, trace, IfStmt, logger.trace("releaseData: " + dataBuffer);
246: Arjen Poutsma, trace, IfStmt, logger.trace("flush");
57: Arjen Poutsma, trace, IfStmt, logger.trace(this.state + " subscribe: " + subscriber);
67: Arjen Poutsma, trace, IfStmt, logger.trace(this.state + " publishComplete");
77: Arjen Poutsma, trace, IfStmt, logger.trace(this.state + " publishError: " + t);
102: Arjen Poutsma, trace, IfStmt, logger.trace(state() + " request: " + n);
110: Arjen Poutsma, trace, IfStmt, logger.trace(state() + " cancel");
68: Juergen Hoeller, error, CatchClause, logger.error("Hessian skeleton invocation failed", ex);
137: Arjen Poutsma, debug, IfStmt, logger.debug("Sending HTTP invoker request for service at [" + config.getServiceUrl() + "], with size " + baos.size());
80: Juergen Hoeller, error, CatchClause, logger.error("Class not found during deserialization", ex);
168: Arjen Poutsma, info, IfStmt, this.logger.info("Starting HttpServer at address " + address);
221: Arjen Poutsma, info, IfStmt, logger.info("Stopping HttpServer");
142: Rossen Stoyanchev, trace, IfStmt, logger.trace("Requested MediaType='" + mediaType + "' based on key='" + key + "'.");
73: Ryan O'Meara, debug, IfStmt, logger.debug("Requested media types: " + this.contentTypes);
90: Rossen Stoyanchev, warn, IfStmt, logger.warn("An HttpServletRequest is required to determine the media type key");
299: Juergen Hoeller, debug, IfStmt, logger.debug("Failed to create default value - falling back to null: " + ex.getMessage());
552: Juergen Hoeller, debug, TryStmt, logger.debug("Async " + method.name() + " request for \"" + url + "\" resulted in " + response.getRawStatusCode() + " (" + response.getStatusText() + ")");
564: Juergen Hoeller, warn, TryStmt, logger.warn("Async " + method.name() + " request for \"" + url + "\" resulted in " + response.getRawStatusCode() + " (" + response.getStatusText() + "); invoking error handler");
97: Brian Clozel, debug, IfStmt, logger.debug("Reading [" + this.responseType + "] as \"" + contentType + "\" using [" + messageConverter + "]");
106: Brian Clozel, debug, IfStmt, logger.debug("Reading [" + this.responseClass.getName() + "] as \"" + contentType + "\" using [" + messageConverter + "]");
127: Arjen Poutsma, trace, IfStmt, logger.trace("No Content-Type header found, defaulting to application/octet-stream");
768: Arjen Poutsma, debug, TryStmt, logger.debug(method.name() + " request for \"" + url + "\" resulted in " + response.getRawStatusCode() + " (" + response.getStatusText() + ")" + (hasError ? "; invoking error handler" : ""));
848: Brian Clozel, debug, IfStmt, logger.debug("Setting request Accept header to " + allSupportedMediaTypes);
957: Arjen Poutsma, debug, IfStmt, logger.debug("Writing [" + requestBody + "] using [" + messageConverter + "]");
953: Rossen Stoyanchev, debug, IfStmt, logger.debug("Writing [" + requestBody + "] as \"" + requestContentType + "\" using [" + messageConverter + "]");
939: Sebastien Deleuze, debug, IfStmt, logger.debug("Writing [" + requestBody + "] using [" + messageConverter + "]");
935: Sebastien Deleuze, debug, IfStmt, logger.debug("Writing [" + requestBody + "] as \"" + requestContentType + "\" using [" + messageConverter + "]");
67: Arjen Poutsma, debug, IfStmt, logger.debug("No ContextLoaderListener registered, as " + "createRootApplicationContext() did not return an application context");
72: Chris Beams, error, CatchClause, logger.error("Couldn't invoke destroy method of attribute with name '" + attrName + "'", ex);
270: Arjen Poutsma, info, IfStmt, logger.info("Root WebApplicationContext: initialization started");
316: Arjen Poutsma, error, CatchClause, logger.error("Context initialization failed", ex);
321: Arjen Poutsma, error, CatchClause, logger.error("Context initialization failed", err);
305: Arjen Poutsma, debug, IfStmt, logger.debug("Published root WebApplicationContext as ServletContext attribute with name [" + WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE + "]");
310: Arjen Poutsma, info, IfStmt, logger.info("Root WebApplicationContext: initialization completed in " + elapsedTime + " ms");
127: Arjen Poutsma, warn, IfStmt, logger.warn("Could not register destruction callback [" + callback + "] for attribute '" + name + "' because FacesRequestAttributes does not support such callbacks");
78: Rossen Stoyanchev, error, IfStmt, logger.error("postProcess error", t);
144: Rossen Stoyanchev, error, CatchClause, logger.error("afterCompletion error", t);
212: Juergen Hoeller, debug, CatchClause, logger.debug("Failed to handle existing result", ex);
289: Juergen Hoeller, debug, CatchClause, logger.debug("Failed to handle timeout result", ex);
307: Violeta Georgieva, debug, CatchClause, logger.debug("Failed to handle error result", ex);
109: Rossen Stoyanchev, error, CatchClause, logger.error("afterCompletion error", t);
293: diguage, debug, LambdaExpr, logger.debug("Processing timeout");
301: Violeta Georgieva, debug, LambdaExpr, logger.debug("Processing error");
345: Rossen Stoyanchev, error, IfStmt, logger.error("Could not complete async processing due to timeout or network error");
350: Juergen Hoeller, debug, IfStmt, logger.debug("Concurrent result value [" + this.concurrentResult + "] - dispatching request to resume processing");
438: Juergen Hoeller, debug, IfStmt, logger.debug("Concurrent handling starting for " + request.getMethod() + " [" + requestUri + "]");
213: Chris Beams, info, IfStmt, logger.info("Registering annotated classes: [" + StringUtils.collectionToCommaDelimitedString(this.annotatedClasses) + "]");
221: Chris Beams, info, IfStmt, logger.info("Scanning base packages: [" + StringUtils.collectionToCommaDelimitedString(this.basePackages) + "]");
239: Juergen Hoeller, debug, IfStmt, logger.debug("Could not load class for config location [" + configLocation + "] - trying package scan. " + ex);
248: Juergen Hoeller, info, IfStmt, logger.info("Found " + count + " annotated classes in package [" + configLocation + "]");
245: Juergen Hoeller, info, IfStmt, logger.info("No annotated classes found for specified class/package [" + configLocation + "]");
233: Juergen Hoeller, info, IfStmt, logger.info("Successfully resolved class for [" + configLocation + "]");
75: Juergen Hoeller, warn, IfStmt, logger.warn("Replacing existing ServletContext attribute with name '" + attributeName + "'");
80: Juergen Hoeller, info, IfStmt, logger.info("Exported ServletContext attribute with name '" + attributeName + "'");
159: Juergen Hoeller, debug, IfStmt, logger.debug("Searching jar file [" + jarFilePath + "] for entries matching [" + entryPattern + "]");
180: Juergen Hoeller, warn, IfStmt, logger.warn("Cannot search for matching resources in jar file [" + jarFilePath + "] because the jar cannot be opened through the file system", ex);
89: Arjen Poutsma, debug, IfStmt, logger.debug("Current WebApplicationContext is not available for processing of " + ClassUtils.getShortName(target.getClass()) + ": " + "Make sure this class gets constructed in a Spring web application. Proceeding without injection.");
71: Juergen Hoeller, debug, IfStmt, logger.debug("Skip CORS processing: response already contains \"Access-Control-Allow-Origin\" header");
77: Juergen Hoeller, debug, IfStmt, logger.debug("Skip CORS processing: request is from same origin");
129: Sebastien Deleuze, debug, IfStmt, logger.debug("Rejecting CORS request because '" + requestOrigin + "' origin is not allowed");
137: Sebastien Deleuze, debug, IfStmt, logger.debug("Rejecting CORS request because '" + requestMethod + "' request method is not allowed");
145: Sebastien Deleuze, debug, IfStmt, logger.debug("Rejecting CORS request because '" + requestHeaders + "' request headers are not allowed");
66: Rossen Stoyanchev, debug, IfStmt, logger.debug("Skip CORS: response already contains \"Access-Control-Allow-Origin\" header");
71: Rossen Stoyanchev, debug, IfStmt, logger.debug("Skip CORS: request is from same origin");
98: Sebastien Deleuze, debug, MethodDeclaration, logger.debug("Invalid CORS request");
117: Sebastien Deleuze, debug, IfStmt, logger.debug("Rejecting CORS request because '" + requestOrigin + "' origin is not allowed");
125: Sebastien Deleuze, debug, IfStmt, logger.debug("Rejecting CORS request because '" + requestMethod + "' request method is not allowed");
133: Sebastien Deleuze, debug, IfStmt, logger.debug("Rejecting CORS request because '" + requestHeaders + "' request headers are not allowed");
47: Juergen Hoeller, debug, MethodDeclaration, logger.debug(message);
55: Juergen Hoeller, debug, MethodDeclaration, logger.debug(message);
213: Arjen Poutsma, debug, IfStmt, logger.debug("Initializing filter '" + filterConfig.getFilterName() + "'");
235: Juergen Hoeller, error, CatchClause, logger.error(msg, ex);
244: Arjen Poutsma, debug, IfStmt, logger.debug("Filter '" + filterConfig.getFilterName() + "' configured successfully");
104: Arjen Poutsma, debug, IfStmt, logger.debug("Cleared thread-bound request context: " + request);
114: Rossen Stoyanchev, debug, IfStmt, logger.debug("Bound request context to thread: " + request);
146: Arjen Poutsma, trace, IfStmt, logger.trace("Response with status code [" + statusCode + "] not eligible for ETag");
138: Arjen Poutsma, trace, IfStmt, logger.trace("ETag [" + responseETag + "] not equal to If-None-Match [" + requestETag + "], sending normal response");
132: Arjen Poutsma, trace, IfStmt, logger.trace("ETag [" + responseETag + "] equal to If-None-Match, sending 304");
77: Arjen Poutsma, trace, IfStmt, logger.trace("Attempting to resolve property '" + beanName + "' in root WebApplicationContext");
81: Arjen Poutsma, debug, IfStmt, logger.debug("Successfully resolved property '" + beanName + "' in root WebApplicationContext");
115: Arjen Poutsma, debug, IfStmt, logger.debug("Attempting to resolve property '" + beanName + "' in root WebApplicationContext");
119: Arjen Poutsma, debug, IfStmt, logger.debug("Successfully resolved property '" + beanName + "' in root WebApplicationContext");
84: Rossen Stoyanchev, Error, CatchClause, logger.debug("Error in checking support for parameter [" + parameter + "], message: " + ex.getMessage());
159: Rossen Stoyanchev, trace, IfStmt, logger.trace("Selected @ModelAttribute method " + modelMethod);
167: Rossen Stoyanchev, trace, IfStmt, logger.trace("Selected @ModelAttribute method (not present: " + modelMethod.getUnresolvedDependencies(container) + ") " + modelMethod);
136: Rossen Stoyanchev, trace, IfStmt, logger.trace("Testing if argument resolver [" + methodArgumentResolver + "] supports [" + parameter.getGenericParameterType() + "]");
133: Juergen Hoeller, trace, IfStmt, logger.trace("Invoking '" + ClassUtils.getQualifiedMethodName(getMethod(), getBeanType()) + "' with arguments " + Arrays.toString(args));
138: Juergen Hoeller, trace, IfStmt, logger.trace("Method [" + ClassUtils.getQualifiedMethodName(getMethod(), getBeanType()) + "] returned [" + returnValue + "]");
167: Juergen Hoeller, Error, IfStmt, logger.debug(getArgumentResolutionErrorMessage("Failed to resolve", i), ex);
285: Keith Donald, debug, IfStmt, logger.debug("Found multipart file [" + file.getName() + "] of size " + file.getSize() + " bytes with original filename [" + file.getOriginalFilename() + "], stored " + file.getStorageDescription());
263: Juergen Hoeller, warn, IfStmt, logger.warn("Could not decode multipart item '" + fileItem.getFieldName() + "' with encoding '" + partEncoding + "': using platform default");
322: Juergen Hoeller, debug, IfStmt, logger.debug("Cleaning up multipart file [" + cmf.getName() + "] with original filename [" + cmf.getOriginalFilename() + "], stored " + cmf.getStorageDescription());
170: Keith Donald, debug, IfStmt, logger.debug("Multipart file '" + getName() + "' with original filename [" + getOriginalFilename() + "], stored " + getStorageDescription() + ": " + action + " to [" + dest.getAbsolutePath() + "]");
198: Juergen Hoeller, warn, CatchClause, logger.warn("Failed to perform multipart cleanup for servlet request", ex);
118: Keith Donald, debug, IfStmt, logger.debug("Request [" + processedRequest.getRequestURI() + "] is not a multipart request");
110: Keith Donald, debug, IfStmt, logger.debug("Resolving multipart request [" + processedRequest.getRequestURI() + "] with MultipartFilter");
157: Juergen Hoeller, debug, IfStmt, logger.debug("Using MultipartResolver '" + beanName + "' for MultipartFilter");
110: Juergen Hoeller, warn, CatchClause, LogFactory.getLog(getClass()).warn("Failed to perform cleanup of multipart items", ex);
200: Juergen Hoeller, debug, IfStmt, disconnectedClientLogger.debug("Looks like the client has gone away: " + ex + " (For a full stack trace, set the log category '" + DISCONNECTED_CLIENT_LOG_CATEGORY + "' to TRACE level.)");
197: Rossen Stoyanchev, trace, IfStmt, disconnectedClientLogger.trace("Looks like the client has gone away", ex);
207: sdeleuze, error, IfStmt, logger.error("Failed to handle request [" + request.getMethod() + " " + request.getURI() + "]", ex);
213: Rossen Stoyanchev, error, MethodDeclaration, logger.error("Unhandled failure: " + ex.getMessage() + ", response already set (status=" + status + ")");
53: Rossen Stoyanchev, trace, IfStmt, logger.trace(buildMessage(exchange.getRequest(), ex));
50: Rossen Stoyanchev, warn, IfStmt, logger.warn(buildMessage(exchange.getRequest(), ex));
47: Rossen Stoyanchev, error, IfStmt, logger.error(buildMessage(exchange.getRequest(), ex));
199: Arjen Poutsma, debug, IfStmt, logger.debug("Added cookie with name [" + getCookieName() + "] and value [" + cookieValue + "]");
224: Arjen Poutsma, debug, IfStmt, logger.debug("Removed cookie with name [" + getCookieName() + "]");
468: Rossen Stoyanchev, warn, IfStmt, logger.warn("Could not decode request string [" + source + "] with encoding '" + enc + "': falling back to platform default encoding; exception message: " + ex.getMessage());
597: Juergen Hoeller, debug, IfStmt, logger.debug("Could not introspect WebSphere web container properties: " + ex);
120: Juergen Hoeller, debug, IfStmt, logger.debug("Starting " + serverName + "...");
129: Juergen Hoeller, debug, IfStmt, logger.debug("Server started on port " + getPort() + "(" + millis + " millis).");
147: Rossen Stoyanchev, debug, IfStmt, logger.debug("Stopping " + serverName + "...");
153: Rossen Stoyanchev, debug, TryStmt, logger.debug("Server stopped (" + stopWatch.getTotalTimeMillis() + " millis).");
62: Sam Brannen, debug, IfStmt, logger.debug("MockRequestDispatcher: forwarding to [" + this.resource + "]");
72: Sam Brannen, debug, IfStmt, logger.debug("MockRequestDispatcher: including [" + this.resource + "]");
308: Chris Beams, warn, CatchClause, logger.warn("Couldn't get resource paths for " + resource, ex);
326: Chris Beams, warn, CatchClause, logger.warn("Couldn't get URL for " + resource, ex);
341: Chris Beams, warn, CatchClause, logger.warn("Couldn't open InputStream for " + resource, ex);
429: Chris Beams, info, MethodDeclaration, logger.info(message);
435: Chris Beams, info, MethodDeclaration, logger.info(message, ex);
440: Chris Beams, info, MethodDeclaration, logger.info(message, ex);
450: Chris Beams, warn, CatchClause, logger.warn("Couldn't determine real path of resource " + resource, ex);
649: Rossen Stoyanchev, debug, CatchClause, logger.debug("Objenesis failed, falling back to default constructor", ex);
140: Rossen Stoyanchev, debug, IfStmt, logger.debug(sb);
168: Rossen Stoyanchev, debug, LambdaExpr, logger.debug("Async result: " + asyncResult);
210: Rossen Stoyanchev, trace, MethodDeclaration, logger.trace("StubHandler invoked.");
151: Arjen Poutsma, debug, IfStmt, logger.debug("Processing " + request.getMethodValue() + " request for [" + request.getURI() + "]");
75: Rossen Stoyanchev, debug, IfStmt, logger.debug("Requested media types: " + this.contentTypes);
88: Juergen Hoeller, debug, IfStmt, logger.debug("Response received, status: " + status + (resolvedStatus != null ? " " + resolvedStatus.getReasonPhrase() : ""));
83: Rossen Stoyanchev, debug, MethodCallExpr, logger.debug("Cancelling request");
82: Rossen Stoyanchev, debug, MethodCallExpr, logger.debug("Demand signaled");
81: Rossen Stoyanchev, debug, MethodCallExpr, logger.debug("Subscriber present");
309: Arjen Poutsma, trace, IfStmt, logger.trace(message);
398: Juergen Hoeller, debug, IfStmt, logger.debug(String.format("Predicate \"%s\" matches against \"%s\"", this.predicate, request));
433: Arjen Poutsma, debug, IfStmt, logger.debug(String.format("Nested predicate \"%s\" matches against \"%s\"", this.predicate, serverRequest));
109: Arjen Poutsma, debug, IfStmt, logger.debug("Looking for router functions in application context: " + getApplicationContext());
115: igor-suhorukov, info, IfStmt, routerFunctions.forEach(routerFunction -> logger.info("Mapped " + routerFunction));
98: Rossen Stoyanchev, trace, IfStmt, logger.trace("No handler mapping found for [" + lookupPath + "]");
95: Rossen Stoyanchev, debug, IfStmt, logger.debug("Mapping [" + lookupPath + "] to " + handler);
124: Rossen Stoyanchev, debug, IfStmt, logger.debug("Matching pattern for request [" + lookupPath + "] is " + pattern);
211: Rossen Stoyanchev, info, IfStmt, logger.info("Mapped URL path [" + urlPath + "] onto " + getHandlerDescription(handler));
113: Rossen Stoyanchev, warn, IfStmt, logger.warn("Neither 'urlMap' nor 'mappings' set on SimpleUrlHandlerMapping");
45: Rossen Stoyanchev, trace, IfStmt, logger.trace("Resolving resource for request path \"" + requestPath + "\"");
55: Rossen Stoyanchev, trace, IfStmt, logger.trace("Resolving public URL for resource path \"" + resourceUrlPath + "\"");
130: Rossen Stoyanchev, trace, IfStmt, logger.trace("Manifest should start with 'CACHE MANIFEST', skip: " + resource);
135: Rossen Stoyanchev, trace, IfStmt, logger.trace("Transforming resource: " + resource);
147: Rossen Stoyanchev, trace, IfStmt, logger.trace("AppCache file: [" + resource.getFilename() + "] hash: [" + hash + "]");
174: Rossen Stoyanchev, trace, IfStmt, logger.trace("Link modified: " + path + " (original: " + info.getLine() + ")");
79: Rossen Stoyanchev, trace, IfStmt, logger.trace("Found match: " + cachedResource);
87: Rossen Stoyanchev, trace, IfStmt, logger.trace("Putting resolved resource in cache: " + resource);
114: Rossen Stoyanchev, trace, IfStmt, logger.trace("Found match: \"" + cachedUrlPath + "\"");
122: Rossen Stoyanchev, trace, IfStmt, logger.trace("Putting resolved resource URL path in cache: \"" + resolvedPath + "\"");
73: Rossen Stoyanchev, trace, IfStmt, logger.trace("Found match: " + cachedResource);
81: Rossen Stoyanchev, trace, IfStmt, logger.trace("Putting transformed resource in cache: " + transformed);
86: Rossen Stoyanchev, trace, IfStmt, logger.trace("Transforming resource: " + ouptputResource);
108: Rossen Stoyanchev, trace, IfStmt, logger.trace("No links found.");
230: Rossen Stoyanchev, error, IfStmt, logger.error("Unexpected syntax for @import link at index " + position);
60: Rossen Stoyanchev, trace, CatchClause, logger.trace("No gzipped resource for [" + resource.getFilename() + "]", ex);
134: Rossen Stoyanchev, trace, IfStmt, logger.trace("Failure checking for relative resource under location + " + location, ex);
128: Rossen Stoyanchev, trace, IfStmt, logger.trace("No match for location: " + location);
121: Juergen Hoeller, trace, IfStmt, logger.trace("Resource path \"" + resourcePath + "\" was successfully resolved " + "but resource \"" + resource.getURL() + "\" is neither under the " + "current location \"" + location.getURL() + "\" nor under any of the " + "allowed locations " + (allowedLocations != null ? Arrays.asList(allowedLocations) : "[]"));
115: Rossen Stoyanchev, trace, IfStmt, logger.trace("Found match: " + resource);
198: Juergen Hoeller, trace, IfStmt, logger.trace("Resolved resource path contains encoded \"../\" or \"..\\\": " + resourcePath);
91: Brian Clozel, debug, IfStmt, logger.debug("No resource handling mappings found");
97: Rossen Stoyanchev, debug, MethodDeclaration, logger.debug("Looking for resource handler mappings");
108: Rossen Stoyanchev, debug, IfStmt, logger.debug("Found resource handler mapping: URL pattern=\"" + pattern + "\", " + "locations=" + resourceHandler.getLocations() + ", " + "resolvers=" + resourceHandler.getResourceResolvers());
128: Rossen Stoyanchev, trace, IfStmt, logger.trace("Getting resource URL for request URL \"" + uriString + "\"");
136: Rossen Stoyanchev, trace, IfStmt, logger.trace("Getting resource URL for lookup path \"" + lookupPath + "\"");
166: Rossen Stoyanchev, trace, IfStmt, logger.trace("Invoking ResourceResolverChain for URL pattern " + "\"" + entry.getKey() + "\"");
175: Rossen Stoyanchev, trace, IfStmt, logger.trace("Resolved public resource URL path \"" + resolvedPath + "\"");
216: Juergen Hoeller, warn, IfStmt, logger.warn("Locations list is empty. No resources will be served unless a " + "custom ResourceResolver is configured as an alternative to PathResourceResolver.");
268: Rossen Stoyanchev, trace, IfStmt, logger.trace("Resource not modified - returning 304");
289: Rossen Stoyanchev, trace, IfStmt, logger.trace("No media type found " + "for " + resource + " - not sending a content-type header");
284: Rossen Stoyanchev, trace, IfStmt, logger.trace("Determined media type '" + mediaType + "' for " + resource);
298: Rossen Stoyanchev, trace, IfStmt, logger.trace("HEAD request - skipping content");
249: Rossen Stoyanchev, trace, LambdaExpr, logger.trace("No matching resource found - returning 404");
322: Rossen Stoyanchev, trace, IfStmt, logger.trace("Ignoring invalid resource path [" + path + "]");
328: Juergen Hoeller, trace, IfStmt, logger.trace("Ignoring invalid resource path with escape sequences [" + path + "]");
394: Rossen Stoyanchev, trace, IfStmt, logger.trace("Path after trimming leading '/' and control characters: " + path);
444: Rossen Stoyanchev, trace, IfStmt, logger.trace("Applying \"invalid path\" checks to path: " + path);
448: Rossen Stoyanchev, trace, IfStmt, logger.trace("Path contains \"WEB-INF\" or \"META-INF\".");
456: Rossen Stoyanchev, trace, IfStmt, logger.trace("Path represents URL or has \"url:\" prefix.");
465: Rossen Stoyanchev, trace, IfStmt, logger.trace("Path contains \"../\" after call to StringUtils#cleanPath.");
177: Rossen Stoyanchev, trace, IfStmt, logger.trace("No version found in path \"" + requestPath + "\"");
184: Rossen Stoyanchev, trace, IfStmt, logger.trace("Extracted version from path, re-resolving without version: \"" + simplePath + "\"");
198: Rossen Stoyanchev, trace, IfStmt, logger.trace("Potential resource found for \"" + requestPath + "\", " + "but version [" + candidate + "] does not match");
192: Rossen Stoyanchev, trace, IfStmt, logger.trace("Resource matches extracted version [" + candidate + "]");
219: Rossen Stoyanchev, trace, IfStmt, logger.trace("Getting the original resource to determine version " + "for path \"" + resourceUrlPath + "\"");
226: Rossen Stoyanchev, trace, IfStmt, logger.trace("Determined version [" + version + "] for " + resource);
120: Rossen Stoyanchev, warn, IfStmt, logger.warn("WebJar version conflict for \"" + path + "\"", ex);
125: Rossen Stoyanchev, trace, IfStmt, logger.trace("No WebJar resource found for \"" + path + "\"");
156: Rossen Stoyanchev, debug, IfStmt, logger.debug("Looking for request mappings in application context: " + getApplicationContext());
169: Rossen Stoyanchev, debug, IfStmt, logger.debug("Could not resolve target class for bean with name '" + beanName + "'", ex);
193: Juergen Hoeller, debug, IfStmt, logger.debug(methods.size() + " request handler methods found on " + userType + ": " + methods);
259: Rossen Stoyanchev, debug, IfStmt, logger.debug("Looking up handler method for path " + exchange.getRequest().getPath().value());
276: Rossen Stoyanchev, debug, IfStmt, logger.debug("Did not find handler method for " + "[" + exchange.getRequest().getPath().value() + "]");
273: Rossen Stoyanchev, debug, IfStmt, logger.debug("Returning handler method [" + handlerMethod + "]");
307: Rossen Stoyanchev, trace, IfStmt, logger.trace("Found " + matches.size() + " matching mapping(s) for [" + exchange.getRequest().getPath() + "] : " + matches);
468: Brian Clozel, info, IfStmt, logger.info("Mapped \"" + mapping + "\" onto " + handlerMethod);
149: Rossen Stoyanchev, debug, IfStmt, logger.debug("Response fully handled in controller method");
218: Juergen Hoeller, Error, IfStmt, logger.debug(getDetailedErrorMessage("Failed to resolve", parameter), cause);
239: Juergen Hoeller, trace, IfStmt, logger.trace("Invoking '" + ClassUtils.getQualifiedMethodName(getMethod(), getBeanType()) + "' with arguments " + Arrays.toString(args));
245: Juergen Hoeller, trace, IfStmt, logger.trace("Method [" + ClassUtils.getQualifiedMethodName(getMethod(), getBeanType()) + "] returned [" + returnValue + "]");
181: Rossen Stoyanchev, info, IfStmt, logger.info("Looking for @ControllerAdvice: " + applicationContext);
194: Juergen Hoeller, info, IfStmt, logger.info("Detected @ModelAttribute methods in " + bean);
201: Juergen Hoeller, info, IfStmt, logger.info("Detected @InitBinder methods in " + bean);
208: Juergen Hoeller, info, IfStmt, logger.info("Detected @ExceptionHandler methods in " + bean);
226: Rossen Stoyanchev, warn, IfStmt, logger.warn("Failed to invoke: " + invocable.getMethod(), invocationEx);
213: Rossen Stoyanchev, debug, IfStmt, logger.debug("Invoking @ExceptionHandler method: " + invocable.getMethod());
170: Arjen Poutsma, trace, IfStmt, logger.trace("Rendering view with model " + model);
108: Rossen Stoyanchev, info, MethodDeclaration, logger.info("ClassTemplateLoader for Spring macros added to FreeMarker configuration");
171: Rossen Stoyanchev, debug, IfStmt, logger.debug("No FreeMarker view found for URL: " + getUrl());
192: Rossen Stoyanchev, debug, IfStmt, logger.debug("Rendering FreeMarker template [" + getUrl() + "].");
234: Rossen Stoyanchev, trace, IfStmt, logger.trace("checkOnDataAvailable, no pending messages");
230: Rossen Stoyanchev, trace, IfStmt, logger.trace("checkOnDataAvailable, processing pending messages");
251: Rossen Stoyanchev, trace, IfStmt, logger.trace("Received message: " + message);
269: Rossen Stoyanchev, trace, IfStmt, logger.trace("Sending message " + message);
291: Rossen Stoyanchev, trace, IfStmt, logger.trace("Send succeeded, ready to send again");
46: Rossen Stoyanchev, debug, IfStmt, logger.debug("Executing handshake to " + url);
53: Rossen Stoyanchev, debug, IfStmt, logger.debug("Handshake response: " + url + ", " + responseHeaders);
180: Rossen Stoyanchev, debug, IfStmt, logger.debug("Handling " + request.getURI() + " with headers: " + headers);
208: Rossen Stoyanchev, debug, IfStmt, logger.debug(reason);
68: Rossen Stoyanchev, debug, LambdaExpr, logger.debug("Starting to send messages");
76: Rossen Stoyanchev, debug, MethodCallExpr, logger.debug("Done with " + (ex != null ? ex.getMessage() : "success"));
73: Rossen Stoyanchev, debug, MethodCallExpr, logger.debug("inbound " + s);
70: Rossen Stoyanchev, debug, MethodCallExpr, logger.debug("outbound " + s);
525: Arjen Poutsma, debug, IfStmt, logger.debug("Unable to locate MultipartResolver with name '" + MULTIPART_RESOLVER_BEAN_NAME + "': no multipart request handling provided");
518: Arjen Poutsma, debug, IfStmt, logger.debug("Using MultipartResolver [" + this.multipartResolver + "]");
547: Arjen Poutsma, debug, IfStmt, logger.debug("Unable to locate LocaleResolver with name '" + LOCALE_RESOLVER_BEAN_NAME + "': using default [" + this.localeResolver + "]");
540: Arjen Poutsma, debug, IfStmt, logger.debug("Using LocaleResolver [" + this.localeResolver + "]");
569: Juergen Hoeller, debug, IfStmt, logger.debug("Unable to locate ThemeResolver with name '" + THEME_RESOLVER_BEAN_NAME + "': using default [" + this.themeResolver + "]");
562: Arjen Poutsma, debug, IfStmt, logger.debug("Using ThemeResolver [" + this.themeResolver + "]");
608: Arjen Poutsma, debug, IfStmt, logger.debug("No HandlerMappings found in servlet '" + getServletName() + "': using default");
646: Arjen Poutsma, debug, IfStmt, logger.debug("No HandlerAdapters found in servlet '" + getServletName() + "': using default");
685: Arjen Poutsma, debug, IfStmt, logger.debug("No HandlerExceptionResolvers found in servlet '" + getServletName() + "': using default");
706: Arjen Poutsma, debug, IfStmt, logger.debug("Unable to locate RequestToViewNameTranslator with name '" + REQUEST_TO_VIEW_NAME_TRANSLATOR_BEAN_NAME + "': using default [" + this.viewNameTranslator + "]");
699: Arjen Poutsma, debug, IfStmt, logger.debug("Using RequestToViewNameTranslator [" + this.viewNameTranslator + "]");
746: Arjen Poutsma, debug, IfStmt, logger.debug("No ViewResolvers found in servlet '" + getServletName() + "': using default");
767: Rossen Stoyanchev, debug, IfStmt, logger.debug("Unable to locate FlashMapManager with name '" + FLASH_MAP_MANAGER_BEAN_NAME + "': using default [" + this.flashMapManager + "]");
760: Rossen Stoyanchev, debug, IfStmt, logger.debug("Using FlashMapManager [" + this.flashMapManager + "]");
891: Rossen Stoyanchev, debug, IfStmt, logger.debug("DispatcherServlet with name '" + getServletName() + "'" + resumed + " processing " + request.getMethod() + " request for [" + getRequestUri(request) + "]");
979: Juergen Hoeller, debug, IfStmt, logger.debug("Last-Modified value for [" + getRequestUri(request) + "] is: " + lastModified);
1057: Rossen Stoyanchev, debug, IfStmt, logger.debug("ModelAndViewDefiningException encountered", exception);
1076: Rossen Stoyanchev, debug, IfStmt, logger.debug("Null ModelAndView returned to DispatcherServlet with name '" + getServletName() + "': assuming HandlerAdapter completed request handling");
1132: Juergen Hoeller, debug, IfStmt, logger.debug("Multipart resolution failed for error dispatch", ex);
1123: Juergen Hoeller, debug, IfStmt, logger.debug("Multipart resolution failed for current request before - " + "skipping re-resolution for undisturbed error rendering");
1119: Arjen Poutsma, debug, IfStmt, logger.debug("Request is already a MultipartHttpServletRequest - if not in a forward, " + "this typically results from an additional MultipartFilter in web.xml");
1185: Juergen Hoeller, trace, IfStmt, logger.trace("Testing handler map [" + hm + "] in DispatcherServlet with name '" + getServletName() + "'");
1205: Juergen Hoeller, warn, IfStmt, pageNotFoundLogger.warn("No mapping found for HTTP request with URI [" + getRequestUri(request) + "] in DispatcherServlet with name '" + getServletName() + "'");
1226: Juergen Hoeller, trace, IfStmt, logger.trace("Testing handler adapter [" + ha + "]");
1274: Juergen Hoeller, debug, IfStmt, logger.debug("Handler execution resulted in exception - forwarding to resolved error view: " + exMv, ex);
1319: Arjen Poutsma, debug, IfStmt, logger.debug("Rendering view [" + view + "] in DispatcherServlet with name '" + getServletName() + "'");
1329: Juergen Hoeller, Error, IfStmt, logger.debug("Error rendering view [" + view + "] in DispatcherServlet with name '" + getServletName() + "'", ex);
494: Arjen Poutsma, info, IfStmt, this.logger.info("FrameworkServlet '" + getServletName() + "': initialization started");
503: Arjen Poutsma, error, CatchClause, this.logger.error("Context initialization failed", ex);
509: Arjen Poutsma, info, IfStmt, this.logger.info("FrameworkServlet '" + getServletName() + "': initialization completed in " + elapsedTime + " ms");
569: Arjen Poutsma, debug, IfStmt, this.logger.debug("Published WebApplicationContext of servlet '" + getServletName() + "' as ServletContext attribute with name [" + attrName + "]");
619: Arjen Poutsma, debug, IfStmt, this.logger.debug("Servlet with name '" + getServletName() + "' will try to create custom WebApplicationContext context of class '" + contextClass.getName() + "'" + ", using parent context [" + parent + "]");
1000: Rossen Stoyanchev, debug, IfStmt, this.logger.debug("Successfully completed request");
997: Juergen Hoeller, debug, IfStmt, logger.debug("Leaving response open for concurrent processing");
993: Rossen Stoyanchev, debug, IfStmt, this.logger.debug("Could not complete request", failureCause);
1054: Rossen Stoyanchev, trace, IfStmt, logger.trace("Bound request context to thread: " + request);
1064: Rossen Stoyanchev, trace, IfStmt, logger.trace("Cleared thread-bound request context: " + request);
177: Juergen Hoeller, error, CatchClause, logger.error("HandlerInterceptor.afterCompletion threw exception", ex2);
196: Juergen Hoeller, error, CatchClause, logger.error("Interceptor [" + interceptors[i] + "] failed in afterConcurrentHandlingStarted", ex);
150: Arjen Poutsma, debug, IfStmt, logger.debug("Initializing servlet '" + getServletName() + "'");
165: Juergen Hoeller, error, IfStmt, logger.error("Failed to set bean properties on servlet '" + getServletName() + "'", ex);
175: Arjen Poutsma, debug, IfStmt, logger.debug("Servlet '" + getServletName() + "' configured successfully");
73: Juergen Hoeller, debug, IfStmt, logger.debug("Looking for URL mappings in application context: " + applicationContext);
88: Juergen Hoeller, debug, IfStmt, logger.debug("Rejected bean name '" + beanName + "': no URL paths identified");
137: Sebastien Deleuze, debug, IfStmt, this.logger.debug("Resolving exception from handler [" + handler + "]: " + ex);
193: Sebastien Deleuze, warn, IfStmt, this.warnLogger.warn(buildLogMessage(ex, request));
199: Rossen Stoyanchev, debug, IfStmt, logger.debug("Looking for request mappings in application context: " + getApplicationContext());
214: Juergen Hoeller, debug, IfStmt, logger.debug("Could not resolve target class for bean with name '" + beanName + "'", ex);
246: Juergen Hoeller, debug, IfStmt, logger.debug(methods.size() + " request handler methods found on " + userType + ": " + methods);
312: Rossen Stoyanchev, debug, IfStmt, logger.debug("Looking up handler method for path " + lookupPath);
322: Rossen Stoyanchev, debug, IfStmt, logger.debug("Did not find handler method for [" + lookupPath + "]");
319: Rossen Stoyanchev, debug, IfStmt, logger.debug("Returning handler method [" + handlerMethod + "]");
357: Juergen Hoeller, trace, IfStmt, logger.trace("Found " + matches.size() + " matching mapping(s) for [" + lookupPath + "] : " + matches);
547: Rossen Stoyanchev, info, IfStmt, logger.info("Mapped \"" + mapping + "\" onto " + handlerMethod);
607: Juergen Hoeller, trace, IfStmt, logger.trace("Mapping name '" + name + "'");
617: Juergen Hoeller, trace, IfStmt, logger.trace("Mapping name clash for handlerMethods " + newList + ". Consider assigning explicit names.");
149: Arjen Poutsma, trace, IfStmt, logger.trace("No handler mapping found for [" + lookupPath + "]");
146: Juergen Hoeller, debug, IfStmt, logger.debug("Mapping [" + lookupPath + "] to " + handler);
199: Arjen Poutsma, debug, IfStmt, logger.debug("Matching patterns for request [" + urlPath + "] are " + matchingPatterns);
233: Arjen Poutsma, debug, IfStmt, logger.debug("URI Template variables for request [" + urlPath + "] are " + uriTemplateVariables);
373: Juergen Hoeller, info, IfStmt, logger.info("Mapped URL path [" + urlPath + "] onto " + getHandlerDescription(handler));
366: Juergen Hoeller, info, IfStmt, logger.info("Default mapping to " + getHandlerDescription(handler));
360: Juergen Hoeller, info, IfStmt, logger.info("Root mapping to " + getHandlerDescription(handler));
228: Arjen Poutsma, debug, IfStmt, logger.debug("Resolving to default view '" + this.defaultErrorView + "' for exception of type [" + ex.getClass().getName() + "]");
259: Arjen Poutsma, debug, IfStmt, logger.debug("Resolving to view '" + viewName + "' for exception of type [" + ex.getClass().getName() + "], based on exception mapping [" + dominantMapping + "]");
320: Arjen Poutsma, debug, IfStmt, logger.debug("Applying HTTP status code " + statusCode);
352: Arjen Poutsma, debug, IfStmt, logger.debug("Exposing Exception as model attribute '" + this.exceptionAttribute + "'");
114: Arjen Poutsma, warn, IfStmt, logger.warn("Neither 'urlMap' nor 'mappings' set on SimpleUrlHandlerMapping");
211: Juergen Hoeller, debug, IfStmt, logger.debug("Ignoring invalid locale cookie '" + cookieName + "' with value [" + value + "] due to error dispatch: " + ex.getMessage());
221: Juergen Hoeller, debug, IfStmt, logger.debug("Parsed cookie value [" + cookie.getValue() + "] into locale '" + locale + "'" + (timeZone != null ? " and time zone '" + timeZone.getID() + "'" : ""));
152: Juergen Hoeller, debug, IfStmt, logger.debug("Ignoring invalid locale value [" + newLocale + "]: " + ex.getMessage());
106: Arjen Poutsma, debug, IfStmt, logger.debug("Returning view name '" + viewName + "' for lookup path [" + lookupPath + "]");
143: Arjen Poutsma, debug, IfStmt, logger.debug("Forwarded to servlet [" + this.servletName + "] in ServletForwardingController '" + this.beanName + "'");
136: Arjen Poutsma, debug, IfStmt, logger.debug("Included servlet [" + this.servletName + "] in ServletForwardingController '" + this.beanName + "'");
174: Arjen Poutsma, debug, IfStmt, logger.debug("Looking up cache seconds for [" + lookupPath + "]");
193: Arjen Poutsma, debug, IfStmt, logger.debug("Applying default cache seconds to [" + lookupPath + "]");
187: Brian Clozel, debug, IfStmt, logger.debug("Applying CacheControl to [" + lookupPath + "]");
181: Brian Clozel, debug, IfStmt, logger.debug("Applying CacheControl to [" + lookupPath + "]");
89: Rossen Stoyanchev, warn, CatchClause, logger.warn("Handling of @ResponseStatus resulted in Exception", resolveEx);
79: Rossen Stoyanchev, debug, IfStmt, logger.debug("Ignoring invalid jsonp parameter value: " + value);
201: Juergen Hoeller, debug, IfStmt, logger.debug("Read [" + targetType + "] as \"" + contentType + "\" with [" + converter + "]");
278: Juergen Hoeller, debug, IfStmt, logger.debug("Written [" + outputValue + "] as \"" + selectedMediaType + "\" using [" + converter + "]");
273: Rossen Stoyanchev, debug, IfStmt, logger.debug("Looking for exception mappings: " + getApplicationContext());
288: Juergen Hoeller, info, IfStmt, logger.info("Detected @ExceptionHandler methods in " + adviceBean);
294: Juergen Hoeller, info, IfStmt, logger.info("Detected ResponseBodyAdvice implementation in " + adviceBean);
411: Juergen Hoeller, warn, IfStmt, logger.warn("Failed to invoke @ExceptionHandler method: " + exceptionHandlerMethod, invocationEx);
395: Rossen Stoyanchev, debug, IfStmt, logger.debug("Invoking @ExceptionHandler method: " + exceptionHandlerMethod);
70: diguage, warn, IfStmt, logger.warn("Skipping URI variable '" + name + "' since the request contains a bind value with the same name.");
448: Rossen Stoyanchev, warn, IfStmt, logger.warn("Multiple paths on controller " + controllerType.getName() + ", using first one");
464: Rossen Stoyanchev, warn, IfStmt, logger.warn("Multiple paths on method " + method.toGenericString() + ", using first one");
493: Rossen Stoyanchev, debug, IfStmt, logger.debug("Using default CompositeUriComponentsContributor");
526: Rossen Stoyanchev, debug, IfStmt, logger.debug("No CompositeUriComponentsContributor bean with name '" + MVC_URI_COMPONENTS_CONTRIBUTOR_BEAN_NAME + "'");
551: Juergen Hoeller, debug, IfStmt, logger.debug("No request bound to the current thread: not in a DispatcherServlet request?");
559: Rossen Stoyanchev, debug, IfStmt, logger.debug("No WebApplicationContext found: not in a DispatcherServlet request?");
638: Juergen Hoeller, debug, CatchClause, logger.debug("Unable to instantiate controller proxy using Objenesis, " + "falling back to regular construction", ex);
215: Rossen Stoyanchev, debug, IfStmt, logger.debug("Subscribed to Publisher for " + this.emitter);
219: Rossen Stoyanchev, debug, IfStmt, logger.debug("Connection timed out for " + this.emitter);
288: Rossen Stoyanchev, debug, IfStmt, logger.debug("Send error for " + this.emitter, ex);
307: akarnokd, debug, IfStmt, logger.debug("Publishing completed for " + this.emitter);
301: akarnokd, debug, IfStmt, logger.debug("Publisher error for " + this.emitter, ex);
574: Rossen Stoyanchev, info, IfStmt, logger.info("Looking for @ControllerAdvice: " + getApplicationContext());
591: Juergen Hoeller, info, IfStmt, logger.info("Detected @ModelAttribute methods in " + adviceBean);
598: Juergen Hoeller, info, IfStmt, logger.info("Detected @InitBinder methods in " + adviceBean);
604: Juergen Hoeller, info, IfStmt, logger.info("Detected RequestBodyAdvice bean in " + adviceBean);
610: Juergen Hoeller, info, IfStmt, logger.info("Detected ResponseBodyAdvice bean in " + adviceBean);
872: Rossen Stoyanchev, debug, IfStmt, logger.debug("Found concurrent result value [" + result + "]");
196: Rossen Stoyanchev, trace, IfStmt, logger.trace("Writing [" + data + "]");
189: Juergen Hoeller, warn, IfStmt, logger.warn("Unknown exception type: " + ex.getClass().getName());
229: Rossen Stoyanchev, warn, MethodDeclaration, pageNotFoundLogger.warn(ex.getMessage());
461: Rossen Stoyanchev, debug, IfStmt, logger.debug("Async timeout for " + request.getMethod() + " [" + request.getRequestURI() + "]");
124: Rossen Stoyanchev, Error, IfStmt, logger.trace(getReturnValueHandlingErrorMessage("Error handling return value", returnValue), ex);
228: Juergen Hoeller, warn, IfStmt, logger.warn("Handling of [" + ex.getClass().getName() + "] resulted in Exception", handlerException);
250: Arjen Poutsma, warn, MethodDeclaration, pageNotFoundLogger.warn(ex.getMessage());
375: Juergen Hoeller, warn, IfStmt, logger.warn("Failed to convert request element: " + ex);
396: Juergen Hoeller, warn, IfStmt, logger.warn("Failed to bind request element: " + ex);
419: Juergen Hoeller, warn, IfStmt, logger.warn("Failed to read HTTP message: " + ex);
442: Juergen Hoeller, warn, IfStmt, logger.warn("Failed to write HTTP message: " + ex);
540: Rossen Stoyanchev, debug, IfStmt, logger.debug("Async timeout for " + request.getMethod() + " [" + request.getRequestURI() + "]");
46: Juergen Hoeller, trace, IfStmt, logger.trace("Resolving resource for request path \"" + requestPath + "\"");
57: Juergen Hoeller, trace, IfStmt, logger.trace("Resolving public URL for resource path \"" + resourceUrlPath + "\"");
112: Rossen Stoyanchev, trace, IfStmt, logger.trace("Manifest should start with 'CACHE MANIFEST', skip: " + resource);
118: Brian Clozel, trace, IfStmt, logger.trace("Transforming resource: " + resource);
160: Juergen Hoeller, trace, IfStmt, logger.trace("Link not modified: " + path);
157: Juergen Hoeller, trace, IfStmt, logger.trace("Link modified: " + path + " (original: " + path + ")");
265: Rossen Stoyanchev, trace, IfStmt, logger.trace("AppCache file: [" + resource.getFilename() + "] hash: [" + hash + "]");
78: Juergen Hoeller, trace, IfStmt, logger.trace("Found match: " + resource);
86: Juergen Hoeller, trace, IfStmt, logger.trace("Putting resolved resource in cache: " + resource);
115: Juergen Hoeller, trace, IfStmt, logger.trace("Found match: \"" + resolvedUrlPath + "\"");
123: Juergen Hoeller, trace, IfStmt, logger.trace("Putting resolved resource URL path in cache: \"" + resolvedUrlPath + "\"");
75: Juergen Hoeller, trace, IfStmt, logger.trace("Found match: " + transformed);
83: Juergen Hoeller, trace, IfStmt, logger.trace("Putting transformed resource in cache: " + transformed);
78: Rossen Stoyanchev, trace, IfStmt, logger.trace("Transforming resource: " + resource);
91: Rossen Stoyanchev, trace, IfStmt, logger.trace("No links found.");
111: Rossen Stoyanchev, trace, IfStmt, logger.trace("Link not modified: " + link);
108: Rossen Stoyanchev, trace, IfStmt, logger.trace("Link modified: " + newLink + " (original: " + link + ")");
199: Rossen Stoyanchev, error, IfStmt, logger.error("Unexpected syntax for @import link at index " + index);
62: Juergen Hoeller, trace, CatchClause, logger.trace("No gzipped resource for [" + resource.getFilename() + "]", ex);
169: Juergen Hoeller, trace, CatchClause, logger.trace("Failure checking for relative resource - trying next location", ex);
154: Juergen Hoeller, trace, IfStmt, logger.trace("Checking location: " + location);
165: Juergen Hoeller, trace, IfStmt, logger.trace("No match for location: " + location);
160: Juergen Hoeller, trace, IfStmt, logger.trace("Found match: " + resource);
192: Juergen Hoeller, trace, IfStmt, logger.trace("Resource path \"" + resourcePath + "\" was successfully resolved " + "but resource \"" + resource.getURL() + "\" is neither under the " + "current location \"" + location.getURL() + "\" nor under any of the " + "allowed locations " + (allowedLocations != null ? Arrays.asList(allowedLocations) : "[]"));
289: Juergen Hoeller, trace, IfStmt, logger.trace("Resolved resource path contains encoded \"../\" or \"..\\\": " + resourcePath);
317: Rossen Stoyanchev, warn, IfStmt, logger.warn("Locations list is empty. No resources will be served unless a " + "custom ResourceResolver is configured as an alternative to PathResourceResolver.");
441: matthew-pearson, trace, IfStmt, logger.trace("No matching resource found - returning 404");
456: Arjen Poutsma, trace, IfStmt, logger.trace("Resource not modified - returning 304");
472: Rossen Stoyanchev, trace, IfStmt, logger.trace("No media type found for " + resource + " - not sending a content-type header");
467: Rossen Stoyanchev, trace, IfStmt, logger.trace("Determined media type '" + mediaType + "' for " + resource);
479: Juergen Hoeller, trace, IfStmt, logger.trace("HEAD request - skipping content");
517: Rossen Stoyanchev, trace, IfStmt, logger.trace("Ignoring invalid resource path [" + path + "]");
523: Juergen Hoeller, trace, IfStmt, logger.trace("Ignoring invalid resource path with escape sequences [" + path + "]");
593: Juergen Hoeller, trace, IfStmt, logger.trace("Path after trimming leading '/' and control characters: [" + path + "]");
644: Juergen Hoeller, trace, IfStmt, logger.trace("Path contains \"WEB-INF\" or \"META-INF\".");
650: Juergen Hoeller, trace, IfStmt, logger.trace("Path represents URL or has \"url:\" prefix.");
657: Juergen Hoeller, trace, IfStmt, logger.trace("Path contains \"../\" after call to StringUtils#cleanPath.");
83: Juergen Hoeller, debug, IfStmt, logger.debug("Request attribute exposing ResourceUrlProvider not found");
133: Rossen Stoyanchev, debug, IfStmt, logger.debug("No resource handling mappings found");
143: Rossen Stoyanchev, debug, MethodDeclaration, logger.debug("Looking for resource handler mappings");
155: Rossen Stoyanchev, debug, IfStmt, logger.debug("Found resource handler mapping: URL pattern=\"" + pattern + "\", " + "locations=" + resourceHandler.getLocations() + ", " + "resolvers=" + resourceHandler.getResourceResolvers());
176: Juergen Hoeller, trace, IfStmt, logger.trace("Getting resource URL for request URL \"" + requestUrl + "\"");
233: Juergen Hoeller, trace, IfStmt, logger.trace("Getting resource URL for lookup path \"" + lookupPath + "\"");
250: Juergen Hoeller, trace, IfStmt, logger.trace("Invoking ResourceResolverChain for URL pattern \"" + pattern + "\"");
259: Juergen Hoeller, trace, IfStmt, logger.trace("Resolved public resource URL path \"" + resolved + "\"");
266: Juergen Hoeller, debug, IfStmt, logger.debug("No matching resource mapping for lookup path \"" + lookupPath + "\"");
173: Juergen Hoeller, trace, IfStmt, logger.trace("No version found in path \"" + requestPath + "\"");
180: Juergen Hoeller, trace, IfStmt, logger.trace("Extracted version from path, re-resolving without version: \"" + simplePath + "\"");
197: Juergen Hoeller, trace, IfStmt, logger.trace("Potential resource found for \"" + requestPath + "\", but version [" + candidateVersion + "] does not match");
191: Brian Clozel, trace, IfStmt, logger.trace("Resource matches extracted version [" + candidateVersion + "]");
215: Juergen Hoeller, trace, IfStmt, logger.trace("Getting the original resource to determine version for path \"" + resourceUrlPath + "\"");
221: Juergen Hoeller, trace, IfStmt, logger.trace("Determined version [" + version + "] for " + resource);
99: Juergen Hoeller, debug, IfStmt, logger.debug("Retrieved FlashMap(s): " + allFlashMaps);
109: Rossen Stoyanchev, debug, IfStmt, logger.debug("Removing FlashMap(s): " + mapsToRemove);
158: Rossen Stoyanchev, debug, IfStmt, logger.debug("Found matching FlashMap(s): " + result);
208: Rossen Stoyanchev, debug, IfStmt, logger.debug("Saving FlashMap=" + flashMap);
86: Arjen Poutsma, error, CatchClause, logger.error(ex.getMessage(), ex);
90: Arjen Poutsma, error, CatchClause, logger.error(ex.getMessage(), ex);
168: Juergen Hoeller, trace, IfStmt, logger.trace("Cached view [" + cacheKey + "]");
215: Arjen Poutsma, debug, IfStmt, logger.debug("Cache for view " + cacheKey + " has been cleared");
212: Arjen Poutsma, debug, IfStmt, logger.debug("No cached instance for view '" + cacheKey + "' was found");
200: Phillip Webb, warn, IfStmt, logger.warn("View caching is SWITCHED OFF -- removal not necessary");
226: Arjen Poutsma, debug, MethodDeclaration, logger.debug("Clearing entire view cache");
126: Arjen Poutsma, debug, IfStmt, logger.debug("Exposing request attribute '" + attribute + "' with value [" + attributeValue + "] to model");
144: Arjen Poutsma, debug, IfStmt, logger.debug("Exposing session attribute '" + attribute + "' with value [" + attributeValue + "] to model");
308: Arjen Poutsma, trace, IfStmt, logger.trace("Rendering view with name '" + this.beanName + "' with model " + model + " and static attributes " + this.staticAttributes);
451: Arjen Poutsma, debug, IfStmt, logger.debug("Removed model object '" + modelName + "' from request in view with name '" + getBeanName() + "'");
444: Arjen Poutsma, debug, IfStmt, logger.debug("Added model object '" + modelName + "' of type [" + modelValue.getClass().getName() + "] to request in view with name '" + getBeanName() + "'");
81: Juergen Hoeller, debug, IfStmt, logger.debug("No matching bean found for view name '" + viewName + "'");
88: Juergen Hoeller, debug, IfStmt, logger.debug("Found matching bean for view name '" + viewName + "' - to be ignored since it does not implement View");
206: Arjen Poutsma, warn, IfStmt, logger.warn("Did not find any ViewResolvers to delegate to; please configure them using the " + "'viewResolvers' property on the ContentNegotiatingViewResolver");
241: Juergen Hoeller, debug, IfStmt, logger.debug("No acceptable view found; returning null");
236: Juergen Hoeller, debug, IfStmt, logger.debug("No acceptable view found; returning 406 (Not Acceptable) status code");
269: Rossen Stoyanchev, debug, IfStmt, logger.debug("Requested media types are " + selectedMediaTypes + " based on Accept header types " + "and producible media types " + producibleMediaTypes + ")");
336: Rossen Stoyanchev, debug, IfStmt, logger.debug("Returning redirect view [" + candidateView + "]");
348: Juergen Hoeller, debug, IfStmt, logger.debug("Returning [" + candidateView + "] based on requested media type '" + mediaType + "'");
168: Arjen Poutsma, debug, IfStmt, logger.debug("Forwarding to resource [" + getUrl() + "] in InternalResourceView '" + getBeanName() + "'");
160: Arjen Poutsma, debug, IfStmt, logger.debug("Including resource [" + getUrl() + "] in InternalResourceView '" + getBeanName() + "'");
131: Arjen Poutsma, info, MethodDeclaration, logger.info("ClassTemplateLoader for Spring macros added to FreeMarker configuration");
232: Juergen Hoeller, debug, IfStmt, logger.debug("No FreeMarker view found for URL: " + url);
305: Arjen Poutsma, debug, IfStmt, logger.debug("Rendering FreeMarker template [" + getUrl() + "] in FreeMarkerView '" + getBeanName() + "'");
191: Rossen Stoyanchev, debug, IfStmt, logger.debug("Ignoring invalid jsonp parameter value: " + value);
432: Arjen Poutsma, debug, IfStmt, logger.debug("Loading templates '" + templates + "'");
469: Arjen Poutsma, debug, IfStmt, logger.debug("Loading XSLT stylesheet from '" + url + "'");
96: Rossen Stoyanchev, trace, IfStmt, logger.trace("Sending " + message + ", " + this);
134: Rossen Stoyanchev, debug, IfStmt, logger.debug("Closing " + this);
123: Juergen Hoeller, warn, IfStmt, logger.warn("Unhandled exception after connection closed for " + this, ex);
148: Juergen Hoeller, warn, IfStmt, logger.warn("Unhandled on-close exception for " + this.wsSession, ex);
82: Rossen Stoyanchev, debug, IfStmt, logger.debug("Connecting to " + uri);
117: Juergen Hoeller, info, IfStmt, logger.info("Starting " + getClass().getSimpleName());
129: Juergen Hoeller, info, IfStmt, logger.info("Stopping " + getClass().getSimpleName());
135: Juergen Hoeller, error, CatchClause, logger.error("Failed to stop WebSocket connection", ex);
136: Juergen Hoeller, info, IfStmt, logger.info("Connecting to WebSocket at " + getUri());
146: Rossen Stoyanchev, info, MethodDeclaration, logger.info("Successfully connected");
150: Juergen Hoeller, error, MethodDeclaration, logger.error("Failed to connect", ex);
120: Juergen Hoeller, error, CatchClause, logger.error("Failed to stop Jetty WebSocketClient", ex);
120: diguage, error, CatchClause, logger.error("Failed to connect to WebSocket", ex);
109: diguage, info, IfStmt, logger.info("Connecting to WebSocket at " + getUri());
117: diguage, info, TryStmt, logger.info("Successfully connected to WebSocket");
152: diguage, error, CatchClause, logger.error("Failed to connect to WebSocket", ex);
140: diguage, info, IfStmt, logger.info("Connecting to WebSocket at " + getUri());
149: diguage, info, TryStmt, logger.info("Successfully connected to WebSocket");
202: Rossen Stoyanchev, trace, IfStmt, logger.trace("Handshake request headers: " + requestHeaders);
208: Rossen Stoyanchev, trace, IfStmt, logger.trace("Handshake response headers: " + response.getHeaders());
124: Stephane Nicoll, info, MethodCallExpr, logger.info(WebSocketMessageBrokerStats.this.toString());
128: Juergen Hoeller, trace, IfStmt, logger.trace(String.format("Another send already in progress: " + "session id '%s':, \"in-progress\" send time %d (ms), buffer size %d bytes", getId(), getTimeSinceSendStarted(), getBufferSize()));
207: Rossen Stoyanchev, debug, IfStmt, logger.debug("Changing close status " + status + " to SESSION_NOT_RELIABLE.");
82: Juergen Hoeller, warn, IfStmt, logger.warn("Unhandled exception after connection closed for " + this, ex);
90: Rossen Stoyanchev, error, IfStmt, logger.error("Closing session due to exception for " + session, exception);
46: Rossen Stoyanchev, debug, IfStmt, logger.debug("New " + session);
54: Rossen Stoyanchev, trace, IfStmt, logger.trace("Handling " + message + " in " + session);
62: Rossen Stoyanchev, debug, IfStmt, logger.debug("Transport error in " + session, exception);
70: Rossen Stoyanchev, debug, IfStmt, logger.debug(session + " closed with " + closeStatus);
127: Juergen Hoeller, Error, IfStmt, logger.warn("Error while destroying " + handler, ex);
246: Rossen Stoyanchev, error, IfStmt, logger.error("Failed to parse " + webSocketMessage + " in session " + session.getId() + ". Sending STOMP ERROR to client.", ex);
237: Rossen Stoyanchev, trace, IfStmt, logger.trace("Incomplete STOMP frame content received in session " + session + ", bufferSize=" + decoder.getBufferSize() + ", bufferSizeLimit=" + decoder.getBufferSizeLimit() + ".");
311: Juergen Hoeller, error, IfStmt, logger.error("Failed to send client message to application via MessageChannel" + " in session " + session.getId() + ". Sending STOMP ERROR to client.", ex);
268: Rossen Stoyanchev, trace, IfStmt, logger.trace("From client: " + headerAccessor.getShortLogMessage(message.getPayload()));
356: Juergen Hoeller, debug, CatchClause, logger.debug("Failed to send STOMP ERROR to client", ex);
383: Juergen Hoeller, Error, IfStmt, logger.error("Error publishing " + event, ex);
396: Juergen Hoeller, error, IfStmt, logger.error("Expected byte[] payload. Ignoring " + message + ".");
406: Rossen Stoyanchev, warn, IfStmt, logger.warn("No STOMP \"subscription\" header in " + message);
463: Juergen Hoeller, debug, IfStmt, logger.debug("Failed to send WebSocket message to client in session " + session.getId(), ex);
149: Juergen Hoeller, error, IfStmt, logger.error("No sub-protocols for " + handler);
269: Juergen Hoeller, warn, IfStmt, logger.warn("Failed to close '" + holder.getSession() + "': " + ex);
327: Juergen Hoeller, error, IfStmt, logger.error("Could not find session id in " + message);
336: Rossen Stoyanchev, debug, IfStmt, logger.debug("No session for " + message);
355: Rossen Stoyanchev, debug, CatchClause, logger.debug("Failure while closing session " + sessionId + ".", secondException);
348: Rossen Stoyanchev, debug, IfStmt, logger.debug("Terminating '" + session + "'", ex);
361: Juergen Hoeller, debug, IfStmt, logger.debug("Failed to send message to client in " + session + ": " + message, ex);
406: Juergen Hoeller, error, CatchClause, logger.error("Failed to obtain session.getAcceptedProtocol(): " + "will use the default protocol handler (if configured).", ex);
476: Juergen Hoeller, info, IfStmt, logger.info("No messages received after " + timeSinceCreated + " ms. " + "Closing " + holder.getSession() + ".");
485: Juergen Hoeller, warn, IfStmt, logger.warn("Failed to close unreliable " + session, ex);
499: Rossen Stoyanchev, debug, IfStmt, logger.debug("Clearing session " + session.getId());
62: Juergen Hoeller, debug, IfStmt, logger.debug("Looking for @MessageExceptionHandler mappings: " + context);
79: Juergen Hoeller, info, IfStmt, logger.info("Detected @MessageExceptionHandler methods in " + bean);
413: Stephane Nicoll, debug, IfStmt, logger.debug("ReadInactivityTask failure", ex);
431: igor-suhorukov, debug, IfStmt, logger.debug("WriteInactivityTask failure", ex);
447: Juergen Hoeller, debug, IfStmt, logger.debug("Failed to close session: " + session.getId(), ex);
485: Rossen Stoyanchev, trace, IfStmt, logger.trace("Incomplete STOMP frame content received, bufferSize=" + this.bufferingDecoder.getBufferSize() + ", bufferSizeLimit=" + this.bufferingDecoder.getBufferSizeLimit() + ".");
153: Juergen Hoeller, trace, IfStmt, logger.trace("Successful request upgrade: " + upgradeResponse.getHeaders());
153: Juergen Hoeller, info, IfStmt, logger.info("Registering @ServerEndpoint class: " + endpointClass);
167: Juergen Hoeller, info, IfStmt, logger.info("Registering ServerEndpointConfig: " + endpointConfig);
68: Rossen Stoyanchev, error, IfStmt, logger.error(message);
76: Rossen Stoyanchev, trace, IfStmt, logger.trace("Using @ServerEndpoint singleton " + endpoint);
85: Rossen Stoyanchev, trace, IfStmt, logger.trace("Using @ServerEndpoint singleton " + endpoint);
96: Rossen Stoyanchev, trace, IfStmt, logger.trace("Creating new @ServerEndpoint instance of type " + endpointClass);
229: Rossen Stoyanchev, trace, IfStmt, logger.trace("Processing request " + request.getURI() + " with headers=" + headers);
236: Rossen Stoyanchev, error, IfStmt, logger.error("Handshake failed due to unexpected HTTP method: " + request.getMethod());
259: Rossen Stoyanchev, error, IfStmt, logger.error("Missing \"Sec-WebSocket-Key\" header");
277: Rossen Stoyanchev, trace, IfStmt, logger.trace("Upgrading to WebSocket, subProtocol=" + subProtocol + ", extensions=" + extensions);
285: Rossen Stoyanchev, error, IfStmt, logger.error("Handshake failed due to invalid Upgrade header: " + request.getHeaders().getUpgrade());
293: Rossen Stoyanchev, error, IfStmt, logger.error("Handshake failed due to invalid Connection header " + request.getHeaders().getConnection());
317: Rossen Stoyanchev, error, IfStmt, logger.error("Handshake failed due to unsupported WebSocket version: " + version + ". Supported versions: " + Arrays.toString(getSupportedVersions()));
62: Juergen Hoeller, debug, IfStmt, logger.debug(interceptor + " returns false from beforeHandshake - precluding handshake");
82: Juergen Hoeller, warn, IfStmt, logger.warn(interceptor + " threw exception in afterHandshake: " + ex);
97: Juergen Hoeller, debug, IfStmt, logger.debug("Handshake request rejected, Origin header value " + request.getHeaders().getOrigin() + " not allowed");
161: Rossen Stoyanchev, debug, IfStmt, logger.debug(servletRequest.getMethod() + " " + servletRequest.getRequestURI());
129: Juergen Hoeller, warn, IfStmt, logger.warn("Failed to close " + this + " after transport timeout", ex);
160: Juergen Hoeller, trace, IfStmt, logger.trace("Sending message " + messageToSend + " in " + this);
178: Rossen Stoyanchev, debug, IfStmt, logger.debug("Closing session with " + status + " in " + this);
194: Juergen Hoeller, warn, IfStmt, logger.warn("Failed to close " + this, ex);
201: Rossen Stoyanchev, warn, IfStmt, logger.warn("Ignoring close since connect() was never invoked");
206: Juergen Hoeller, debug, IfStmt, logger.debug("Ignoring close (already closing or closed): current state " + this.state);
226: Juergen Hoeller, trace, IfStmt, logger.trace("Received heartbeat in " + this);
239: Rossen Stoyanchev, debug, IfStmt, logger.debug("Processing SockJS open frame in " + this);
255: Juergen Hoeller, debug, IfStmt, logger.debug("Open frame received in " + getId() + " but we're not connecting (current state " + this.state + "). The server might have been restarted and lost track of the session.");
249: Juergen Hoeller, error, IfStmt, logger.error("WebSocketHandler.afterConnectionEstablished threw exception in " + this, ex);
265: Juergen Hoeller, error, IfStmt, logger.error("Ignoring received message due to state " + this.state + " in " + this);
278: Juergen Hoeller, error, IfStmt, logger.error("Failed to decode data for SockJS \"message\" frame: " + frame + " in " + this, ex);
289: Rossen Stoyanchev, trace, IfStmt, logger.trace("Processing SockJS message frame " + frame.getContent() + " in " + this);
297: Juergen Hoeller, error, CatchClause, logger.error("WebSocketHandler.handleMessage threw an exception on " + frame + " in " + this, ex);
319: Rossen Stoyanchev, error, IfStmt, logger.error("Failed to decode data for " + frame + " in " + this, ex);
313: Juergen Hoeller, debug, IfStmt, logger.debug("Processing SockJS close frame with " + closeStatus + " in " + this);
333: Juergen Hoeller, error, CatchClause, logger.error("WebSocketHandler.handleTransportError threw an exception", ex);
328: Rossen Stoyanchev, error, IfStmt, logger.error("Transport error in " + this, error);
345: Juergen Hoeller, debug, IfStmt, logger.debug("Transport closed with " + cs + " in " + this);
353: Juergen Hoeller, error, CatchClause, logger.error("WebSocketHandler.afterConnectionClosed threw an exception", ex);
102: Rossen Stoyanchev, debug, IfStmt, logger.debug("Starting XHR " + (isXhrStreamingDisabled() ? "Polling" : "Streaming") + "session url=" + receiveUrl);
123: Rossen Stoyanchev, debug, IfStmt, logger.debug("Executing SockJS Info request, url=" + infoUrl);
132: Rossen Stoyanchev, error, IfStmt, logger.error("SockJS Info request (url=" + infoUrl + ") failed: " + response);
137: Rossen Stoyanchev, trace, IfStmt, logger.trace("SockJS Info request (url=" + infoUrl + ") response: " + response);
151: Rossen Stoyanchev, trace, IfStmt, logger.trace("Starting XHR send, url=" + url);
156: Rossen Stoyanchev, error, IfStmt, logger.error("XHR send request (url=" + url + ") failed: " + response);
161: Rossen Stoyanchev, trace, IfStmt, logger.trace("XHR send request (url=" + url + ") response: " + response);
150: Rossen Stoyanchev, trace, IfStmt, logger.trace("Starting " + this);
167: Rossen Stoyanchev, trace, IfStmt, logger.trace("Connect timeout task not scheduled (no TaskScheduler configured).");
161: Rossen Stoyanchev, trace, IfStmt, logger.trace("Scheduling connect to time out after " + this.timeoutValue + " ms.");
203: Rossen Stoyanchev, error, IfStmt, logger.error("Connect success/failure already handled for " + DefaultTransportRequest.this);
246: Rossen Stoyanchev, error, IfStmt, logger.error("Connect success/failure events already took place for " + DefaultTransportRequest.this + ". Ignoring this additional failure event.", ex);
221: Rossen Stoyanchev, error, IfStmt, logger.error(message);
229: Juergen Hoeller, error, IfStmt, logger.error("No more fallback transports after " + DefaultTransportRequest.this, ex);
225: Juergen Hoeller, error, IfStmt, logger.error(DefaultTransportRequest.this + " failed. Falling back on next transport.", ex);
241: Juergen Hoeller, error, CatchClause, logger.error("Transport failed to run timeout tasks for " + DefaultTransportRequest.this, ex2);
121: Rossen Stoyanchev, trace, IfStmt, logger.trace("Starting XHR receive request, url=" + url);
222: Rossen Stoyanchev, trace, IfStmt, logger.trace("XHR receive headers: " + toHttpHeaders(response.getHeaders()));
231: Rossen Stoyanchev, debug, IfStmt, logger.debug("SockJS sockJsSession closed, closing response.");
254: Rossen Stoyanchev, trace, IfStmt, logger.trace("XHR content received: " + content);
267: Rossen Stoyanchev, trace, IfStmt, logger.trace("XHR receive request completed.");
115: diguage, trace, IfStmt, logger.trace("Starting XHR receive request, url=" + receiveUrl);
215: Rossen Stoyanchev, trace, IfStmt, logger.trace("XHR receive headers: " + response.getHeaders());
223: Rossen Stoyanchev, debug, IfStmt, logger.debug("SockJS sockJsSession closed, closing response.");
234: Rossen Stoyanchev, trace, IfStmt, logger.trace("XHR receive completed");
253: Rossen Stoyanchev, trace, IfStmt, logger.trace("XHR receive content: " + content);
267: Rossen Stoyanchev, error, IfStmt, logger.error("Initial SockJS \"Info\" request to server failed, url=" + url, exception);
147: Juergen Hoeller, trace, IfStmt, logger.trace("Starting XHR receive request for " + url);
203: Rossen Stoyanchev, trace, IfStmt, logger.trace("XHR receive headers: " + toHttpHeaders(response.getResponseHeaders()));
402: Brian Clozel, debug, IfStmt, logger.debug("SockJS sockJsSession closed, closing response.");
449: Brian Clozel, trace, IfStmt, logger.trace("XHR content received: " + content);
461: Brian Clozel, trace, IfStmt, logger.trace("XHR receive request completed.");
86: Juergen Hoeller, debug, IfStmt, logger.debug("Starting WebSocket session on " + url);
336: Sebastien Deleuze, warn, IfStmt, logger.warn("Expected SockJS path. Failing request: " + request.getURI());
349: Juergen Hoeller, Debug, MethodDeclaration, String requestInfo = (logger.isDebugEnabled() ? request.getMethod() + " " + request.getURI() : null);
401: Juergen Hoeller, warn, IfStmt, logger.warn("Invalid SockJS path '" + sockJsPath + "' - required to have 3 path segments");
404: Juergen Hoeller, debug, IfStmt, logger.debug("Ignoring transport request: " + requestInfo);
423: Juergen Hoeller, debug, IfStmt, logger.debug("Ignoring transport request: " + requestInfo);
416: Juergen Hoeller, debug, IfStmt, logger.debug("WebSocket disabled. Ignoring transport request: " + requestInfo);
430: Juergen Hoeller, debug, IfStmt, logger.debug("Processing transport request: " + requestInfo);
393: Juergen Hoeller, debug, IfStmt, logger.debug("WebSocket disabled. Ignoring transport request: " + requestInfo);
388: Juergen Hoeller, debug, IfStmt, logger.debug("Processing transport request: " + requestInfo);
370: Juergen Hoeller, debug, IfStmt, logger.debug("Iframe support is disabled when an origin check is required. " + "Ignoring transport request: " + requestInfo);
380: Juergen Hoeller, debug, IfStmt, logger.debug("Processing transport request: " + requestInfo);
362: Juergen Hoeller, debug, IfStmt, logger.debug("Processing transport request: " + requestInfo);
354: Juergen Hoeller, debug, IfStmt, logger.debug("Processing transport request: " + requestInfo);
443: Juergen Hoeller, warn, IfStmt, logger.warn("No server, session, or transport path segment in SockJS request.");
449: Sebastien Deleuze, warn, IfStmt, logger.warn("Either server or session contains a \".\" which is not allowed by SockJS protocol.");
481: Juergen Hoeller, warn, IfStmt, logger.warn("Origin header value '" + request.getHeaders().getOrigin() + "' not allowed.");
515: Sebastien Deleuze, warn, MethodDeclaration, logger.warn("Sending Method Not Allowed (405)");
109: Juergen Hoeller, warn, IfStmt, logger.warn("No transport handlers specified for TransportHandlingSockJsService");
198: Rossen Stoyanchev, error, IfStmt, logger.error("No handler configured for raw WebSocket messages");
235: Sebastien Deleuze, warn, IfStmt, logger.warn("Unknown transport type for " + request.getURI());
244: Sebastien Deleuze, warn, IfStmt, logger.warn("No TransportHandler for " + request.getURI());
294: Juergen Hoeller, debug, IfStmt, logger.debug("The user for the session does not match the user for the request.");
299: Rossen Stoyanchev, debug, IfStmt, logger.debug("Session type does not match the transport type for the request.");
284: Rossen Stoyanchev, debug, IfStmt, logger.debug("Session not found, sessionId=" + sessionId + ". The session may have been closed " + "(e.g. missed heart-beat) while a message was coming in.");
339: Juergen Hoeller, warn, IfStmt, logger.warn("Origin check enabled but transport '" + transport + "' does not support it.");
380: diguage, debug, CatchClause, logger.debug("Failed to close " + session, ex);
384: diguage, debug, IfStmt, logger.debug("Closed " + removedIds.size() + " sessions: " + removedIds);
65: Brian Clozel, error, CatchClause, logger.error("Failed to read message", ex);
76: Juergen Hoeller, error, CatchClause, logger.error("Failed to read message", ex);
85: Rossen Stoyanchev, trace, IfStmt, logger.trace("Received message(s): " + Arrays.asList(messages));
98: Rossen Stoyanchev, debug, IfStmt, logger.debug("Another " + getTransportType() + " connection still open for " + sockJsSession);
92: Rossen Stoyanchev, trace, IfStmt, logger.trace("Starting " + getTransportType() + " async request.");
80: Rossen Stoyanchev, debug, IfStmt, logger.debug("Connection already closed (but not removed yet) for " + sockJsSession);
74: Rossen Stoyanchev, debug, IfStmt, logger.debug(request.getMethod() + " " + request.getURI());
97: Rossen Stoyanchev, warn, IfStmt, logger.warn("Failed to create a default WebSocketTransportHandler", ex);
298: Juergen Hoeller, trace, IfStmt, logger.trace(this.messageCache.size() + " message(s) to flush in session " + getId());
309: Rossen Stoyanchev, trace, IfStmt, logger.trace("Session is not active, not ready to flush.");
302: Rossen Stoyanchev, trace, IfStmt, logger.trace("Session is active, ready to flush.");
341: Juergen Hoeller, debug, CatchClause, logger.debug("Failed to complete request: " + ex.getMessage());
355: Juergen Hoeller, trace, IfStmt, logger.trace("Writing to HTTP response: " + formattedFrame);
204: Rossen Stoyanchev, debug, IfStmt, logger.debug("Closing SockJS session " + getId() + " with " + status);
225: Rossen Stoyanchev, Error, CatchClause, logger.debug("Error from WebSocketHandler.afterConnectionClosed in " + this, ex);
213: Juergen Hoeller, debug, CatchClause, logger.debug("Failure while sending SockJS close frame", ex);
276: Rossen Stoyanchev, trace, IfStmt, logger.trace("Scheduled heartbeat in session " + getId());
285: Rossen Stoyanchev, trace, IfStmt, logger.trace("Cancelling heartbeat in session " + getId());
321: Rossen Stoyanchev, trace, IfStmt, logger.trace("Preparing to write " + frame);
359: Juergen Hoeller, debug, IfStmt, logger.debug("Terminating connection after failure to send message to client", ex);
353: Juergen Hoeller, debug, IfStmt, disconnectedClientLogger.debug("Looks like the client has gone away: " + ex + " (For a full stack trace, set the log category '" + DISCONNECTED_CLIENT_LOG_CATEGORY + "' to TRACE level.)");
350: Juergen Hoeller, trace, IfStmt, disconnectedClientLogger.trace("Looks like the client has gone away", ex);
422: Juergen Hoeller, debug, IfStmt, logger.debug("Closing due to transport error for " + this);
429: Juergen Hoeller, debug, CatchClause, logger.debug("Exception from error handling delegate", delegateException);
435: Juergen Hoeller, debug, CatchClause, logger.debug("Failure while closing " + this, closeException);
79: Juergen Hoeller, trace, IfStmt, logger.trace(this.byteCount + " bytes written so far, " + getMessageCache().size() + " more messages not flushed");
83: Juergen Hoeller, trace, IfStmt, logger.trace("Streamed bytes limit reached, recycling current request");
190: Rossen Stoyanchev, error, CatchClause, logger.error("Broken data received. Terminating WebSocket connection abruptly", ex);
221: Rossen Stoyanchev, trace, IfStmt, logger.trace("Writing " + frame);
75: Rossen Stoyanchev, debug, MethodDeclaration, logger.debug("Setting up '" + this.testName.getMethodName() + "', client=" + this.webSocketClient.getClass().getSimpleName() + ", server=" + this.server.getClass().getSimpleName());
105: Rossen Stoyanchev, error, CatchClause, logger.error("Failed to stop WebSocket client", t);
111: Rossen Stoyanchev, error, CatchClause, logger.error("Failed to undeploy application config", t);
117: Rossen Stoyanchev, error, CatchClause, logger.error("Failed to stop server", t);
123: Rossen Stoyanchev, error, CatchClause, logger.error("Failed to close WebApplicationContext", t);
118: Rossen Stoyanchev, debug, IfStmt, logger.debug("Event: " + event.getType());
75: Rossen Stoyanchev, debug, MethodDeclaration, logger.debug("Setting up before '" + this.testName.getMethodName() + "'");
97: Rossen Stoyanchev, error, CatchClause, logger.error("Failed to undeploy application config", t);
103: Rossen Stoyanchev, error, CatchClause, logger.error("Failed to stop server", t);
109: Rossen Stoyanchev, error, CatchClause, logger.error("Failed to close WebApplicationContext", t);
185: Rossen Stoyanchev, error, CatchClause, logger.error(ex);
192: Rossen Stoyanchev, debug, IfStmt, logger.debug("Awaiting for message count: " + expected);
208: Rossen Stoyanchev, error, MethodDeclaration, logger.error(command + " " + headers, ex);
213: Rossen Stoyanchev, error, MethodDeclaration, logger.error("STOMP error frame " + headers + " payload=" + payload);
218: Rossen Stoyanchev, error, MethodDeclaration, logger.error(exception);
111: Rossen Stoyanchev, debug, MethodDeclaration, logger.debug("Setting up '" + this.testName.getMethodName() + "'");
134: Rossen Stoyanchev, error, CatchClause, logger.error("Failed to stop SockJsClient", ex);
140: Rossen Stoyanchev, error, CatchClause, logger.error("Failed to undeploy application config", t);
146: Rossen Stoyanchev, error, CatchClause, logger.error("Failed to stop server", t);
152: Rossen Stoyanchev, error, CatchClause, logger.error("Failed to close WebApplicationContext", t);
