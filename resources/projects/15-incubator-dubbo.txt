83: kimi, error, CatchClause, logger.error("Failed to execute router: " + getUrl() + ", cause: " + t.getMessage(), t);
172: ken.lj, error, CatchClause, logger.error("Failed to execute condition router rule: " + getUrl() + ", invokers: " + invokers + ", cause: " + t.getMessage(), t);
157: ken.lj, warn, IfStmt, logger.warn("The current consumer in the service blacklist. consumer: " + NetUtils.getLocalHost() + ", service: " + url.getServiceKey());
168: ken.lj, warn, IfStmt, logger.warn("The route result is empty and force execute. consumer: " + NetUtils.getLocalHost() + ", service: " + url.getServiceKey() + ", router: " + url.getParameterAndDecoded(Constants.RULE_KEY));
112: william.liangf, error, CatchClause, logger.error("route error , rule has been ignored. rule: " + rule + ", method:" + invocation.getMethodName() + ", url: " + RpcContext.getContext().getUrl(), e);
166: Ke Li, error, CatchClause, logger.error("cluster reselect fail reason is :" + t.getMessage() + " if can not solve, you can set cluster.availablecheck=false in url", t);
162: ken.lj, warn, CatchClause, logger.warn(e.getMessage() + " may because invokers list dynamic change, ignore.", e);
55: william.liangf, warn, CatchClause, logger.warn(e.getMessage(), e);
58: william.liangf, warn, CatchClause, logger.warn(e.getMessage(), e);
73: william.liangf, error, CatchClause, logger.error("Unexpected error occur at collect statistic", t);
95: william.liangf, error, CatchClause, logger.error("Failed retry to invoke method " + invocation.getMethodName() + ", waiting again.", e);
107: william.liangf, error, CatchClause, logger.error("Failback to invoke method " + invocation.getMethodName() + ", wait for retry in background. Ignored exception: " + e.getMessage() + ", ", e);
80: william.liangf, warn, IfStmt, logger.warn("Although retry the method " + invocation.getMethodName() + " in the service " + getInterface().getName() + " was successful by the provider " + invoker.getUrl().getAddress() + ", but there have been failed providers " + providers + " (" + providers.size() + "/" + copyinvokers.size() + ") from the registry " + directory.getUrl().getAddress() + " on the consumer " + NetUtils.getLocalHost() + " using the dubbo version " + Version.getVersion() + ". Last error is: " + le.getMessage(), le);
52: ken.lj, error, CatchClause, logger.error("Failsafe ignore exception: " + e.getMessage(), e);
104: Ke Li, error, IfStmt, log.error("Invoke " + getGroupDescFromServiceKey(entry.getKey()) + " failed: " + r.getException().getMessage(), r.getException());
91: Jerrick Zhu, warn, IfStmt, logger.warn("fail-mock: " + invocation.getMethodName() + " fail-mock enabled , url : " + directory.getUrl(), e);
78: ken.lj, info, IfStmt, logger.info("force-mock: " + invocation.getMethodName() + " force-mock enabled , url : " + directory.getUrl());
153: ken.lj, info, IfStmt, logger.info("Exception when try to invoke mock. Get mock invokers error for service:" + directory.getUrl().getServiceInterface() + ", method:" + invocation.getMethodName() + ", will contruct a new mock with 'new MockInvoker()'.", e);
99: ken.lj, error, CatchClause, logger.error(e.getMessage(), e);
99: oldrat, error, CatchClause, logger.error("return default version, ignore exception " + e.getMessage(), e);
70: oldrat, info, IfStmt, logger.info("No codeSource for class " + cls.getName() + " when getVersion, use default version " + defaultVersion);
136: ken.lj, error, CatchClause, logger.error(e.getMessage(), e);
132: ken.lj, error, IfStmt, logger.error(error);
275: kimi, warn, CatchClause, LogHelper.warn(logger, "Failed to set property through method " + method, e);
285: kimi, warn, CatchClause, LogHelper.warn(logger, "Failed to set field value", e1);
287: kimi, warn, CatchClause, LogHelper.warn(logger, "Failed to set field value", e1);
336: kimi, warn, CatchClause, LogHelper.warn(logger, e.getMessage(), e);
338: kimi, warn, CatchClause, LogHelper.warn(logger, e.getMessage(), e);
340: kimi, warn, CatchClause, LogHelper.warn(logger, e.getMessage(), e);
88: ken.lj, info, IfStmt, logger.info("Executor for listenablefuture is null, will use default executor!");
533: william.liangf, error, CatchClause, logger.error(e.getMessage(), e);
526: william.liangf, error, CatchClause, logger.error("fail to inject via method " + method.getName() + " of interface " + type.getName() + ": " + e.getMessage(), e);
602: Junjian Peng, error, CatchClause, logger.error("Exception when load extension class(interface: " + type + ", description file: " + fileName + ").", t);
637: william.liangf, error, CatchClause, logger.error("Exception when load extension class(interface: " + type + ", class file: " + resourceURL + ") in " + resourceURL, t);
941: Junjian Peng, debug, IfStmt, logger.debug(codeBuilder.toString());
84: ken.lj, info, IfStmt, logger.info("using logger: " + loggerAdapter.getClass().getName());
40: william.liangf, trace, MethodDeclaration, logger.trace(msg);
45: william.liangf, trace, MethodDeclaration, logger.trace(e);
50: william.liangf, trace, MethodDeclaration, logger.trace(msg, e);
55: ken.lj, debug, MethodDeclaration, logger.debug(msg);
60: william.liangf, debug, MethodDeclaration, logger.debug(e);
65: ken.lj, debug, MethodDeclaration, logger.debug(msg, e);
70: ken.lj, info, MethodDeclaration, logger.info(msg);
75: william.liangf, info, MethodDeclaration, logger.info(e);
80: ken.lj, info, MethodDeclaration, logger.info(msg, e);
85: ken.lj, warn, MethodDeclaration, logger.warn(msg);
90: william.liangf, warn, MethodDeclaration, logger.warn(e);
95: ken.lj, warn, MethodDeclaration, logger.warn(msg, e);
100: ken.lj, error, MethodDeclaration, logger.error(msg);
105: william.liangf, error, MethodDeclaration, logger.error(e);
110: ken.lj, error, MethodDeclaration, logger.error(msg, e);
33: william.liangf, FINE, MethodDeclaration, logger.log(Level.FINER, msg);
38: william.liangf, FINE, MethodDeclaration, logger.log(Level.FINER, e.getMessage(), e);
43: william.liangf, FINE, MethodDeclaration, logger.log(Level.FINER, msg, e);
48: ken.lj, FINE, MethodDeclaration, logger.log(Level.FINE, msg);
53: william.liangf, FINE, MethodDeclaration, logger.log(Level.FINE, e.getMessage(), e);
58: ken.lj, FINE, MethodDeclaration, logger.log(Level.FINE, msg, e);
63: ken.lj, INFO, MethodDeclaration, logger.log(Level.INFO, msg);
68: ken.lj, INFO, MethodDeclaration, logger.log(Level.INFO, msg, e);
73: ken.lj, WARN, MethodDeclaration, logger.log(Level.WARNING, msg);
78: ken.lj, WARN, MethodDeclaration, logger.log(Level.WARNING, msg, e);
83: ken.lj, SEVERE, MethodDeclaration, logger.log(Level.SEVERE, msg);
88: ken.lj, SEVERE, MethodDeclaration, logger.log(Level.SEVERE, msg, e);
93: william.liangf, SEVERE, MethodDeclaration, logger.log(Level.SEVERE, e.getMessage(), e);
98: william.liangf, INFO, MethodDeclaration, logger.log(Level.INFO, e.getMessage(), e);
103: william.liangf, WARN, MethodDeclaration, logger.log(Level.WARNING, e.getMessage(), e);
48: ken.lj, TRACE, IfStmt, locationAwareLogger.log(null, FQCN, LocationAwareLogger.TRACE_INT, msg, null, null);
51: william.liangf, trace, MethodDeclaration, logger.trace(msg);
57: ken.lj, TRACE, IfStmt, locationAwareLogger.log(null, FQCN, LocationAwareLogger.TRACE_INT, e.getMessage(), null, e);
60: william.liangf, trace, MethodDeclaration, logger.trace(e.getMessage(), e);
66: ken.lj, TRACE, IfStmt, locationAwareLogger.log(null, FQCN, LocationAwareLogger.TRACE_INT, msg, null, e);
69: william.liangf, trace, MethodDeclaration, logger.trace(msg, e);
75: ken.lj, DEBUG, IfStmt, locationAwareLogger.log(null, FQCN, LocationAwareLogger.DEBUG_INT, msg, null, null);
78: william.liangf, debug, MethodDeclaration, logger.debug(msg);
84: ken.lj, DEBUG, IfStmt, locationAwareLogger.log(null, FQCN, LocationAwareLogger.DEBUG_INT, e.getMessage(), null, e);
87: william.liangf, debug, MethodDeclaration, logger.debug(e.getMessage(), e);
93: ken.lj, DEBUG, IfStmt, locationAwareLogger.log(null, FQCN, LocationAwareLogger.DEBUG_INT, msg, null, e);
96: william.liangf, debug, MethodDeclaration, logger.debug(msg, e);
102: ken.lj, INFO, IfStmt, locationAwareLogger.log(null, FQCN, LocationAwareLogger.INFO_INT, msg, null, null);
105: william.liangf, info, MethodDeclaration, logger.info(msg);
111: ken.lj, INFO, IfStmt, locationAwareLogger.log(null, FQCN, LocationAwareLogger.INFO_INT, e.getMessage(), null, e);
114: william.liangf, info, MethodDeclaration, logger.info(e.getMessage(), e);
120: ken.lj, INFO, IfStmt, locationAwareLogger.log(null, FQCN, LocationAwareLogger.INFO_INT, msg, null, e);
123: william.liangf, info, MethodDeclaration, logger.info(msg, e);
129: ken.lj, WARN, IfStmt, locationAwareLogger.log(null, FQCN, LocationAwareLogger.WARN_INT, msg, null, null);
132: william.liangf, warn, MethodDeclaration, logger.warn(msg);
138: ken.lj, WARN, IfStmt, locationAwareLogger.log(null, FQCN, LocationAwareLogger.WARN_INT, e.getMessage(), null, e);
141: william.liangf, warn, MethodDeclaration, logger.warn(e.getMessage(), e);
147: ken.lj, WARN, IfStmt, locationAwareLogger.log(null, FQCN, LocationAwareLogger.WARN_INT, msg, null, e);
150: william.liangf, warn, MethodDeclaration, logger.warn(msg, e);
156: ken.lj, ERROR, IfStmt, locationAwareLogger.log(null, FQCN, LocationAwareLogger.ERROR_INT, msg, null, null);
159: william.liangf, error, MethodDeclaration, logger.error(msg);
165: ken.lj, ERROR, IfStmt, locationAwareLogger.log(null, FQCN, LocationAwareLogger.ERROR_INT, e.getMessage(), null, e);
168: william.liangf, error, MethodDeclaration, logger.error(e.getMessage(), e);
174: ken.lj, ERROR, IfStmt, locationAwareLogger.log(null, FQCN, LocationAwareLogger.ERROR_INT, msg, null, e);
177: william.liangf, error, MethodDeclaration, logger.error(msg, e);
46: william.liangf, trace, TryStmt, logger.trace(appendContextMessage(msg), e);
54: william.liangf, trace, TryStmt, logger.trace(e);
62: william.liangf, trace, TryStmt, logger.trace(appendContextMessage(msg));
70: ken.lj, debug, TryStmt, logger.debug(appendContextMessage(msg), e);
78: william.liangf, debug, TryStmt, logger.debug(e);
86: ken.lj, debug, TryStmt, logger.debug(appendContextMessage(msg));
94: ken.lj, info, TryStmt, logger.info(appendContextMessage(msg), e);
102: ken.lj, info, TryStmt, logger.info(appendContextMessage(msg));
110: ken.lj, warn, TryStmt, logger.warn(appendContextMessage(msg), e);
118: ken.lj, warn, TryStmt, logger.warn(appendContextMessage(msg));
126: ken.lj, error, TryStmt, logger.error(appendContextMessage(msg), e);
134: ken.lj, error, TryStmt, logger.error(appendContextMessage(msg));
142: william.liangf, error, TryStmt, logger.error(e);
150: william.liangf, info, TryStmt, logger.info(e);
158: william.liangf, warn, TryStmt, logger.warn(e);
64: william.liangf, warn, MethodDeclaration, logger.warn(msg);
103: qinliujie, error, CatchClause, logger.error("dump jstack error", t);
231: william.liangf, warn, CatchClause, logger.warn("Failed to load " + fileName + " file from " + fileName + "(ingore this file): " + e.getMessage(), e);
244: ding.lid, warn, CatchClause, logger.warn("Fail to load " + fileName + " file: " + t.getMessage(), t);
249: william.liangf, warn, IfStmt, logger.warn("No " + fileName + " found on the class path.");
258: william.liangf, warn, IfStmt, logger.warn(errMsg);
266: william.liangf, warn, CatchClause, logger.warn("Failed to load " + fileName + " file from " + fileName + "(ingore this file): " + e.getMessage(), e);
271: ding.lid, info, MethodDeclaration, logger.info("load " + fileName + " properties file from " + list);
289: ding.lid, warn, CatchClause, logger.warn("Fail to load " + fileName + " file from " + url + "(ingore this file): " + e.getMessage(), e);
108: kimi, warn, CatchClause, logger.warn(e.getMessage(), e);
32: kimi, trace, IfStmt, logger.trace(msg);
42: kimi, trace, IfStmt, logger.trace(throwable);
52: kimi, trace, IfStmt, logger.trace(msg, e);
62: kimi, debug, IfStmt, logger.debug(msg);
72: kimi, debug, IfStmt, logger.debug(e);
82: kimi, debug, IfStmt, logger.debug(msg, e);
92: kimi, info, IfStmt, logger.info(msg);
102: kimi, info, IfStmt, logger.info(e);
112: kimi, info, IfStmt, logger.info(msg, e);
122: kimi, warn, IfStmt, logger.warn(msg, e);
132: kimi, warn, IfStmt, logger.warn(msg);
142: kimi, warn, IfStmt, logger.warn(e);
152: kimi, error, IfStmt, logger.error(e);
162: kimi, error, IfStmt, logger.error(msg);
172: kimi, error, IfStmt, logger.error(msg, e);
113: william.liangf, info, MethodDeclaration, Log.info("PrintList:");
116: william.liangf, info, WhileStmt, Log.info(it.next().toString());
193: ralf0131, warn, CatchClause, logger.warn("Failed to retrieving ip address, " + e.getMessage(), e);
220: ralf0131, warn, CatchClause, logger.warn("Failed to retrieving ip address, " + e.getMessage(), e);
215: ralf0131, warn, CatchClause, logger.warn("Failed to retrieving ip address, " + e.getMessage(), e);
210: ralf0131, warn, CatchClause, logger.warn("Failed to retrieving ip address, " + e.getMessage(), e);
222: liangfei0201, error, MethodDeclaration, logger.error("Could not get local host ip address, will use 127.0.0.1 instead.");
423: william.liangf, warn, CatchClause, logger.warn(e.getMessage(), e);
308: oldrat, Error, MethodDeclaration, Assert.assertTrue("can not find error.", LogUtil.checkNoError());
81: ken.lj, info, IfStmt, logger.info("Run shutdown hook now.");
163: william.liangf, error, CatchClause, logger.error(e.getMessage(), e);
119: oldrat, info, IfStmt, logger.info("Use System Property " + pn + " to config dubbo");
126: oldrat, info, IfStmt, logger.info("Use System Property " + pn + " to config dubbo");
451: ken.lj, error, CatchClause, logger.error(e.getMessage(), e);
490: william.liangf, warn, CatchClause, logger.warn(t.getMessage(), t);
484: william.liangf, warn, CatchClause, logger.warn(e.getMessage(), e);
168: ken.lj, warn, CatchClause, logger.warn(t.getMessage(), t);
97: oldrat, warn, IfStmt, logger.warn("ReferenceConfig(" + url + ") is not DESTROYED when FINALIZE");
179: william.liangf, warn, CatchClause, logger.warn("Unexpected err when destroy invoker of ReferenceConfig(" + url + ").", t);
232: william.liangf, warn, CatchClause, logger.warn(e.getMessage(), e);
244: ken.lj, warn, IfStmt, logger.warn("Using -D" + interfaceName + "=" + resolve + " to p2p invoke remote service.");
242: ken.lj, warn, IfStmt, logger.warn("Using default dubbo resolve file " + resolveFile + " replace " + interfaceName + "" + resolve + " to p2p invoke remote service.");
296: oldrat, warn, IfStmt, logger.warn("NO method found in service interface " + interfaceClass.getName());
359: william.liangf, info, IfStmt, logger.info("Using injvm service " + interfaceClass.getName());
425: william.liangf, info, IfStmt, logger.info("Refer dubbo service " + interfaceClass.getName() + " from url " + invoker.getUrl());
346: william.liangf, warn, CatchClause, logger.warn("unexpected err when unexport" + exporter, t);
447: oldrat, warn, IfStmt, logger.warn("NO method found in service interface " + interfaceClass.getName());
491: oldrat, info, IfStmt, logger.info("Export dubbo service " + interfaceClass.getName() + " to url " + url);
501: oldrat, info, IfStmt, logger.info("Register dubbo service " + interfaceClass.getName() + " url " + url + " to registry " + registryURL);
532: ken.lj, info, IfStmt, logger.info("Export dubbo service " + interfaceClass.getName() + " to local registry");
569: ken.lj, warn, CatchClause, logger.warn(e.getMessage(), e);
592: ken.lj, warn, CatchClause, logger.warn(e.getMessage(), e);
651: ken.lj, warn, IfStmt, logger.warn("Use random available port(" + portToBind + ") for protocol " + name);
65: qinliujie, warn, IfStmt, logger.warn("Already register the same consumer:" + serviceName);
73: qinliujie, warn, IfStmt, logger.warn("already register the provider service: " + serviceName);
110: william.liangf, error, CatchClause, log.error("IllegalArgumentException", e);
113: william.liangf, error, CatchClause, log.error("IllegalAccessException", e);
116: william.liangf, error, CatchClause, log.error("InvocationTargetException", e);
145: william.liangf, error, CatchClause, log.error("SecurityException: " + e.getMessage());
148: william.liangf, error, CatchClause, log.error("NoSuchMethodException: " + e.getMessage());
191: william.liangf, warn, MethodDeclaration, log.warn("Verifying service url for " + configName + "... ");
192: william.liangf, warn, MethodDeclaration, log.warn("Consumer url string: " + paramStringFromDb);
199: ken.lj, warn, ForeachStmt, log.warn("Checking " + (String) row[KEY] + "for" + targetString);
201: ken.lj, warn, IfStmt, log.warn((String) row[KEY] + " --> " + targetString + " OK!");
130: william.liangf, error, CatchClause, logger.error(e.getMessage(), e);
226: william.liangf, error, CatchClause, logger.error("Failed to init remote service reference at method " + name + " in class " + bean.getClass().getName() + ", cause: " + e.getMessage(), e);
244: ken.lj, error, CatchClause, logger.error("Failed to init remote service reference at filed " + field.getName() + " in class " + bean.getClass().getName() + ", cause: " + e.getMessage(), e);
121: ken.lj, info, IfStmt, logger.info("The service ready on spring started. service: " + getInterface());
79: Mercy, info, IfStmt, logger.info(bean + " has been built.");
85: 小马哥, info, IfStmt, log.info("The properties of bean [name : " + beanName + "] have been binding by prefix of " + "configuration properties : " + prefix);
136: 小马哥, debug, IfStmt, log.debug("DubboConfigBinder Bean can't be found in ApplicationContext.");
122: Mercy, warn, IfStmt, logger.warn("@Reference annotation is not supported on static fields: " + field);
162: Mercy, warn, IfStmt, logger.warn("@Reference annotation is not supported on static methods: " + method);
168: Mercy, warn, IfStmt, logger.warn("@Reference  annotation should only be used on methods with parameters: " + method);
242: Mercy, info, IfStmt, logger.info(referenceBean + " was destroying!");
251: Mercy, info, IfStmt, logger.info(getClass() + " was destroying!");
107: Mercy, warn, IfStmt, logger.warn("packagesToScan is empty , ServiceBean registry will be ignored!");
155: Mercy, warn, IfStmt, logger.warn("No Spring Bean annotating Dubbo's @Service was found under package[" + packageToScan + "]");
147: Mercy, info, IfStmt, logger.info(beanDefinitionHolders.size() + " annotated Dubbo's @Service Components { " + beanDefinitionHolders + " } were scanned under package[" + packageToScan + "]");
190: Mercy, info, IfStmt, logger.info("BeanNameGenerator bean can't be found in BeanFactory with name [" + CONFIGURATION_BEAN_NAME_GENERATOR + "]");
192: Mercy, info, IfStmt, logger.info("BeanNameGenerator will be a instance of " + AnnotationBeanNameGenerator.class.getName() + " , it maybe a potential problem on bean name generation.");
272: Mercy, warn, IfStmt, logger.warn("The Duplicated BeanDefinition[" + serviceBeanDefinition + "] of ServiceBean[ bean name : " + beanName + "] was be found , Did @DubboComponentScan scan to same package in many times?");
265: Mercy, warn, IfStmt, logger.warn("The BeanDefinition[" + serviceBeanDefinition + "] of ServiceBean has been registered with name : " + beanName);
92: Mercy, debug, IfStmt, log.debug("There is no property for binding to dubbo config class [" + configClass.getName() + "] within prefix [" + prefix + "]");
121: Mercy, info, IfStmt, log.info("The dubbo config bean definition [name : " + beanName + ", class : " + configClass.getName() + "] has been registered.");
145: Mercy, info, IfStmt, log.info("The BeanPostProcessor bean definition [" + processorClass.getName() + "] for dubbo config bean [name : " + beanName + "] has been registered.");
192: william.liangf, warn, IfStmt, logger.warn("Recommended replace <dubbo:provider protocol=\"" + value + "\" ... /> to <dubbo:protocol name=\"" + value + "\" ... />");
82: william.liangf, warn, CatchClause, logger.warn(e.getMessage(), e);
80: william.liangf, warn, CatchClause, logger.warn(t.getMessage(), t);
60: william.liangf, info, IfStmt, logger.info("Register service: " + url.getServiceKey() + ",url:" + url);
68: william.liangf, info, IfStmt, logger.info("Unregister service: " + url.getServiceKey() + ",url:" + url);
76: william.liangf, info, IfStmt, logger.info("Subscribe service: " + url.getServiceKey() + ",url:" + url);
84: william.liangf, info, IfStmt, logger.info("Unsubscribe service: " + url.getServiceKey() + ",url:" + url);
193: ken.lj, error, CatchClause, logger.error("Failed to notify registry event, service: " + service + ", urls: " + urls + ", cause: " + t.getMessage(), t);
71: ken.lj, info, IfStmt, logger.info("[subscribe] service: " + service + ",client:" + client);
121: william.liangf, info, IfStmt, logger.info("Disconnected " + client);
92: william.liangf, error, CatchClause, logger.error(e.getMessage(), e);
61: william.liangf, info, TryStmt, logger.info("Use container type(" + Arrays.toString(args) + ") to run dubbo serivce.");
72: ken.lj, error, CatchClause, logger.error(t.getMessage(), t);
70: ken.lj, info, TryStmt, logger.info("Dubbo " + container.getClass().getSimpleName() + " stopped!");
87: william.liangf, info, ForeachStmt, logger.info("Dubbo " + container.getClass().getSimpleName() + " started!");
99: ken.lj, warn, CatchClause, logger.warn("Dubbo service server stopped, interrupted by other thread!", e);
39: ken.lj, debug, MethodDeclaration, logger.debug("Test debug:" + this.getClass().getName());
40: ken.lj, warn, MethodDeclaration, logger.warn("Test warn:" + this.getClass().getName());
41: ken.lj, info, MethodDeclaration, logger.info("Test info:" + this.getClass().getName());
42: ken.lj, error, MethodDeclaration, logger.error("Test error:" + this.getClass().getName());
59: william.liangf, error, CatchClause, logger.error(e.getMessage(), e);
161: william.liangf, warn, CatchClause, logger.warn(e.getMessage(), e);
270: 休息的风, error, IfStmt, logger.error("Failed to validate service: " + clazz.getName() + ", method: " + methodName + ", cause: " + violations);
126: ken.lj, warn, CatchClause, logger.warn("Thread was interrupted unexpectedly, monitor will never be got.");
129: ken.lj, warn, CatchClause, logger.warn("Create monitor failed, monitor data will not be collected until you fix this problem. ", e);
131: william.liangf, error, CatchClause, logger.error("Failed to monitor count service " + invoker.getUrl() + ", cause: " + t.getMessage(), t);
71: william.liangf, error, CatchClause, logger.error("Unexpected error occur at send statistic, cause: " + t.getMessage(), t);
78: 业余布道师, debug, MethodDeclaration, logger.debug("Send statistics to monitor " + getUrl());
205: william.liangf, error, CatchClause, logger.error("Unexpected error occur at cancel sender timer, cause: " + t.getMessage(), t);
45: qinliujie, info, MethodDeclaration, logger.info("receive offline command");
45: qinliujie, info, MethodDeclaration, logger.info("receive online command");
102: qinliujie, error, CatchClause, logger.error("qos-server can not bind localhost:" + port, throwable);
100: qinliujie, info, TryStmt, logger.info("qos-server bind localhost:" + port);
111: qinliujie, info, MethodDeclaration, logger.info("qos-server stopped.");
69: qinliujie, error, CatchClause, log.error("can not find commandContext: " + commandContext, ex);
73: qinliujie, error, CatchClause, log.error("execute commandContext: " + commandContext + " got exception", qosEx);
59: qinliujie, warn, IfStmt, log.warn("can not found commandContext url: " + msg.getUri());
61: qinliujie, error, CatchClause, log.error("can not found command " + commandContext, ex);
65: qinliujie, error, CatchClause, log.error("execute commandContext got exception " + commandContext, ex);
173: chao.liuc, warn, CatchClause, logger.warn("unexpeced error when unsubscribe service " + serviceKey + "from registry" + registry.getUrl(), t);
179: william.liangf, warn, CatchClause, logger.warn("Failed to destroy service " + serviceKey, t);
200: william.liangf, warn, IfStmt, logger.warn("Unsupported category " + category + " in notified url: " + url + " from registry " + getUrl().getAddress() + " to consumer " + NetUtils.getLocalHost());
258: ken.lj, error, IfStmt, logger.error(new IllegalStateException("urls to invokers error .invokerUrls.size :" + invokerUrls.size() + ", invoker.size :0. urls :" + invokerUrls.toString()));
266: william.liangf, warn, CatchClause, logger.warn("destroyUnusedInvokers error. ", e);
325: ken.lj, error, CatchClause, logger.error("convert router url to router error, url: " + url, t);
364: ken.lj, error, IfStmt, logger.error(new IllegalStateException("Unsupported protocol " + providerUrl.getProtocol() + " in notified url: " + providerUrl + " from registry " + getUrl().getAddress() + " to consumer " + NetUtils.getLocalHost() + ", supported protocol: " + ExtensionLoader.getExtensionLoader(Protocol.class).getSupportedExtensions()));
390: ken.lj, error, CatchClause, logger.error("Failed to refer invoker for interface:" + serviceType + ",url:(" + url + ")" + t.getMessage(), t);
518: william.liangf, warn, CatchClause, logger.warn("Failed to destroy service " + serviceKey + " to provider " + invoker.getUrl(), t);
563: ken.lj, warn, CatchClause, logger.warn("destory invoker[" + invoker.getUrl() + "] faild. " + e.getMessage(), e);
560: ken.lj, debug, IfStmt, logger.debug("destory invoker[" + invoker.getUrl() + "] success. ");
187: chao.liuc, warn, IfStmt, logger.warn(new IllegalStateException("error state, exporter should not be null"));
366: Zhaohui Yu, debug, MethodDeclaration, logger.debug("original override urls: " + urls);
368: Zhaohui Yu, debug, MethodDeclaration, logger.debug("subscribe url: " + subscribeUrl + ", override urls: " + matchedUrls);
387: Zhaohui Yu, warn, IfStmt, logger.warn(new IllegalStateException("error state, exporter should not be null"));
396: Zhaohui Yu, info, IfStmt, logger.info("exported provider url changed, origin url: " + originUrl + ", old export url: " + currentUrl + ", new export url: " + newUrl);
490: ken.lj, warn, CatchClause, logger.warn(t.getMessage(), t);
496: ken.lj, warn, CatchClause, logger.warn(t.getMessage(), t);
510: ken.lj, warn, CatchClause, logger.warn(t.getMessage(), t);
505: ken.lj, info, IfStmt, logger.info("Waiting " + timeout + "ms for registry to notify all consumers before unexport. Usually, this is called when you use dubbo API");
189: william.liangf, warn, CatchClause, logger.warn("Failed to save registry store file, cause: " + e.getMessage(), e);
203: william.liangf, warn, CatchClause, logger.warn("Failed to load registry store file " + file, e);
209: william.liangf, warn, CatchClause, logger.warn(e.getMessage(), e);
200: william.liangf, info, IfStmt, logger.info("Load registry store file " + file + ", data: " + properties);
273: william.liangf, info, IfStmt, logger.info("Register: " + url);
284: william.liangf, info, IfStmt, logger.info("Unregister: " + url);
298: william.liangf, info, IfStmt, logger.info("Subscribe: " + url);
317: william.liangf, info, IfStmt, logger.info("Unsubscribe: " + url);
330: william.liangf, info, IfStmt, logger.info("Recover register url " + recoverRegistered);
340: william.liangf, info, IfStmt, logger.info("Recover subscribe url " + recoverSubscribed.keySet());
367: ken.lj, error, CatchClause, logger.error("Failed to notify registry event, urls: " + urls + ", cause: " + t.getMessage(), t);
383: william.liangf, warn, IfStmt, logger.warn("Ignore empty notify urls for subscribe url " + url);
387: liangfei0201, info, IfStmt, logger.info("Notify urls for subscribe url " + url + ", urls: " + urls);
444: william.liangf, warn, CatchClause, logger.warn(t.getMessage(), t);
451: william.liangf, info, IfStmt, logger.info("Destroy registry:" + getUrl());
463: william.liangf, warn, CatchClause, logger.warn("Failed to unregister url " + url + " to registry " + getUrl() + " on destroy, cause: " + t.getMessage(), t);
460: william.liangf, info, IfStmt, logger.info("Destroy unregister url " + url);
479: ken.lj, warn, CatchClause, logger.warn("Failed to unsubscribe url " + url + " to registry " + getUrl() + " on destroy, cause: " + t.getMessage(), t);
476: william.liangf, info, IfStmt, logger.info("Destroy unsubscribe url " + url);
64: william.liangf, info, IfStmt, LOGGER.info("Close all registries " + getRegistries());
73: william.liangf, error, CatchClause, LOGGER.error(e.getMessage(), e);
70: william.liangf, error, CatchClause, logger.error("Unexpected error occur at failed retry, cause: " + t.getMessage(), t);
146: william.liangf, error, IfStmt, logger.error("Failed to register " + url + ", waiting for retry, cause: " + t.getMessage(), t);
176: william.liangf, error, IfStmt, logger.error("Failed to uregister " + url + ", waiting for retry, cause: " + t.getMessage(), t);
209: william.liangf, error, IfStmt, logger.error("Failed to subscribe " + url + ", waiting for retry, cause: " + t.getMessage(), t);
197: william.liangf, error, IfStmt, logger.error("Failed to subscribe " + url + ", Using cached list: " + urls + " from cache file: " + getUrl().getParameter(Constants.FILE_KEY, System.getProperty("user.home") + "/dubbo-registry-" + url.getHost() + ".cache") + ", cause: " + t.getMessage(), t);
238: oldrat, error, IfStmt, logger.error("Failed to unsubscribe " + url + ", waiting for retry, cause: " + t.getMessage(), t);
269: william.liangf, error, CatchClause, logger.error("Failed to notify for subscribe " + url + ", waiting for retry, cause: " + t.getMessage(), t);
283: william.liangf, info, IfStmt, logger.info("Recover register url " + recoverRegistered);
293: william.liangf, info, IfStmt, logger.info("Recover subscribe url " + recoverSubscribed.keySet());
310: william.liangf, info, IfStmt, logger.info("Retry register " + failed);
322: william.liangf, warn, CatchClause, logger.warn("Failed to retry register " + failed + ", waiting for again, cause: " + t.getMessage(), t);
318: william.liangf, warn, CatchClause, logger.warn("Failed to retry register " + failed + ", waiting for again, cause: " + t.getMessage(), t);
330: william.liangf, info, IfStmt, logger.info("Retry unregister " + failed);
342: william.liangf, warn, CatchClause, logger.warn("Failed to retry unregister  " + failed + ", waiting for again, cause: " + t.getMessage(), t);
338: william.liangf, warn, CatchClause, logger.warn("Failed to retry unregister  " + failed + ", waiting for again, cause: " + t.getMessage(), t);
355: william.liangf, info, IfStmt, logger.info("Retry subscribe " + failed);
371: william.liangf, warn, CatchClause, logger.warn("Failed to retry subscribe " + failed + ", waiting for again, cause: " + t.getMessage(), t);
366: william.liangf, warn, CatchClause, logger.warn("Failed to retry subscribe " + failed + ", waiting for again, cause: " + t.getMessage(), t);
384: william.liangf, info, IfStmt, logger.info("Retry unsubscribe " + failed);
400: william.liangf, warn, CatchClause, logger.warn("Failed to retry unsubscribe " + failed + ", waiting for again, cause: " + t.getMessage(), t);
395: william.liangf, warn, CatchClause, logger.warn("Failed to retry unsubscribe " + failed + ", waiting for again, cause: " + t.getMessage(), t);
413: william.liangf, info, IfStmt, logger.info("Retry notify " + failed);
429: william.liangf, warn, CatchClause, logger.warn("Failed to retry notify " + failed + ", waiting for again, cause: " + t.getMessage(), t);
424: william.liangf, warn, CatchClause, logger.warn("Failed to retry notify " + failed + ", waiting for again, cause: " + t.getMessage(), t);
441: william.liangf, warn, CatchClause, logger.warn(t.getMessage(), t);
40: william.liangf, warn, IfStmt, logger.warn("Please set -Dserver=127.0.0.1:9090");
75: william.liangf, error, CatchClause, logger.error("Unexpected error occur at reconnect, cause: " + t.getMessage(), t);
107: ken.lj, error, CatchClause, logger.error("Failed to connect to registry " + getUrl().getAddress() + " from provider/consumer " + NetUtils.getLocalHost() + " use dubbo " + Version.getVersion() + ", cause: " + t.getMessage(), t);
88: william.liangf, info, IfStmt, logger.info("Reconnect to registry " + getUrl());
127: william.liangf, warn, CatchClause, logger.warn("Failed to cancel reconnect timer", t);
61: william.liangf, info, IfStmt, logger.info("Register service: " + url.getServiceKey() + ",url:" + url);
69: william.liangf, info, IfStmt, logger.info("Unregister service: " + url.getServiceKey() + ",url:" + url);
77: william.liangf, info, IfStmt, logger.info("Subscribe service: " + url.getServiceKey() + ",url:" + url);
85: william.liangf, info, IfStmt, logger.info("Unsubscribe service: " + url.getServiceKey() + ",url:" + url);
195: ken.lj, error, CatchClause, logger.error("Failed to notify registry event, service: " + service + ", urls: " + urls + ", cause: " + t.getMessage(), t);
138: chao.liuc, Error, MethodDeclaration, Assert.assertTrue("notify no invoker urls ,should not error", LogUtil.checkNoError());
72: ken.lj, info, IfStmt, logger.info("[subscribe] service: " + service + ",client:" + client);
122: william.liangf, info, IfStmt, logger.info("Disconnected " + client);
107: william.liangf, error, IfStmt, logger.error(e.getMessage(), e);
126: william.liangf, error, CatchClause, logger.error("Unexpected exception occur at clean expired provider, cause: " + t.getMessage(), t);
153: william.liangf, warn, IfStmt, logger.warn("Clean expired provider " + url);
204: william.liangf, info, IfStmt, logger.info("Receive multicast message: " + msg + " from " + remoteAddress);
235: liangfei0201, info, IfStmt, logger.info("Send broadcast message: " + msg + " to " + mutilcastAddress + ":" + mutilcastPort);
248: liangfei0201, info, IfStmt, logger.info("Send unicast message: " + msg + " to " + host + ":" + mutilcastPort);
309: william.liangf, warn, CatchClause, logger.warn(t.getMessage(), t);
315: william.liangf, warn, CatchClause, logger.warn(t.getMessage(), t);
160: william.liangf, error, CatchClause, logger.error("Unexpected exception occur at defer expire time, cause: " + t.getMessage(), t);
190: william.liangf, warn, CatchClause, logger.warn("Failed to write provider heartbeat to redis registry. registry: " + entry.getKey() + ", cause: " + t.getMessage(), t);
212: william.liangf, warn, IfStmt, logger.warn("Delete expired key: " + key + " -> value: " + entry.getKey() + ", expire: " + new Date(expire) + ", now: " + new Date(now));
249: william.liangf, warn, CatchClause, logger.warn(t.getMessage(), t);
256: william.liangf, warn, CatchClause, logger.warn(t.getMessage(), t);
263: william.liangf, warn, CatchClause, logger.warn("Failed to destroy the redis registry client. registry: " + entry.getKey() + ", cause: " + t.getMessage(), t);
295: william.liangf, warn, IfStmt, logger.warn(exception.getMessage(), exception);
328: liangfei0201, warn, IfStmt, logger.warn(exception.getMessage(), exception);
386: william.liangf, warn, IfStmt, logger.warn(exception.getMessage(), exception);
444: william.liangf, info, IfStmt, logger.info("redis notify: " + key + " = " + urls);
494: william.liangf, info, IfStmt, logger.info("redis event: " + key + " = " + msg);
506: william.liangf, error, CatchClause, logger.error(t.getMessage(), t);
621: william.liangf, error, CatchClause, logger.error(t.getMessage(), t);
616: william.liangf, error, CatchClause, logger.error(t.getMessage(), t);
610: william.liangf, warn, CatchClause, logger.warn("Failed to subscribe service from redis registry. registry: " + entry.getKey() + ", cause: " + t.getMessage(), t);
631: william.liangf, warn, CatchClause, logger.warn(t.getMessage(), t);
77: ken.lj, error, CatchClause, logger.error(e.getMessage(), e);
107: william.liangf, warn, CatchClause, logger.warn("Failed to close zookeeper client " + getUrl() + ", cause: " + e.getMessage(), e);
133: kimi, warn, CatchClause, logger.warn(e.getMessage(), e);
129: kimi, warn, IfStmt, logger.warn("Skip input stream " + is.available());
313: liangfei0201, warn, IfStmt, logger.warn("Fail to encode response: " + res + ", send bad_response info instead, cause: " + t.getMessage(), t);
319: Zhaohui Yu, warn, CatchClause, logger.warn("Failed to send bad_response info back: " + res + ", cause: " + e.getMessage(), e);
303: Zhaohui Yu, warn, IfStmt, logger.warn(t.getMessage(), t);
309: Zhaohui Yu, warn, CatchClause, logger.warn("Failed to send bad_response info back: " + t.getMessage() + ", cause: " + e.getMessage(), e);
99: ken.lj, warn, IfStmt, logger.warn("The timeout response finally returned at " + (new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS").format(new Date())) + ", response " + response + (channel == null ? "" : ", channel: " + channel.getLocalAddress() + " -> " + channel.getRemoteAddress()));
206: ken.lj, error, CatchClause, logger.error("callback invoke error ,url:" + channel.getUrl(), e);
199: ken.lj, error, CatchClause, logger.error("callback invoke error ,url:" + channel.getUrl(), e);
192: ken.lj, error, CatchClause, logger.error("callback invoke error .reasult:" + res.getResult() + ",url:" + channel.getUrl(), e);
303: william.liangf, error, CatchClause, logger.error("Exception when scan the timeout invocation of remoting.", e);
133: william.liangf, warn, CatchClause, logger.warn(e.getMessage(), e);
151: william.liangf, warn, CatchClause, logger.warn(e.getMessage(), e);
204: kimi, warn, IfStmt, logger.warn(e.getMessage(), e);
183: william.liangf, error, IfStmt, logger.error(e.getMessage(), e);
119: william.liangf, warn, CatchClause, logger.warn(e.getMessage(), e);
144: Junjian Peng, warn, CatchClause, logger.warn("send cannot write message error.", e);
157: william.liangf, warn, CatchClause, logger.warn(t.getMessage(), t);
228: william.liangf, error, CatchClause, logger.error(t.getMessage(), t);
276: kimi, warn, CatchClause, logger.warn(t.getMessage(), t);
74: oldrat, debug, IfStmt, logger.debug("Received heartbeat from remote channel " + channel.getRemoteAddress() + ", cause: The channel has no data-transmission exceeds a heartbeat period" + (heartbeat > 0 ? ": " + heartbeat + "ms" : ""));
84: Ke Li, debug, IfStmt, logger.debug("Receive heartbeat response in thread " + Thread.currentThread().getName());
87: ken.lj, warn, CatchClause, logger.warn("Unhandled exception when heartbeat, cause: " + t.getMessage(), t);
83: ken.lj, warn, CatchClause, logger.warn("Exception when heartbeat to remote channel " + channel.getRemoteAddress(), t);
65: ken.lj, debug, IfStmt, logger.debug("Send heartbeat to remote channel " + channel.getRemoteAddress() + ", cause: The channel has no data-transmission exceeds a heartbeat period: " + heartbeat + "ms");
70: ken.lj, warn, IfStmt, logger.warn("Close channel " + channel + ", because heartbeat read idle time out: " + heartbeatTimeout + "ms");
62: ken.lj, warn, CatchClause, logger.warn(t.getMessage(), t);
74: ken.lj, warn, CatchClause, logger.warn(t.getMessage(), t);
82: ken.lj, warn, CatchClause, logger.warn(t.getMessage(), t);
183: ken.lj, info, IfStmt, logger.info(new Exception("Close channel " + channel + " on exit command: " + Arrays.toString((byte[]) command)));
242: william.liangf, info, IfStmt, logger.info(new Exception("Close channel " + channel + " on exit command " + command));
98: beyondyuefei, warn, IfStmt, logger.warn("Failed to start " + getClass().getSimpleName() + " " + NetUtils.getLocalAddress() + " connect to the server " + getRemoteAddress() + " (check == false, ignore and retry later!), cause: " + t.getMessage(), t);
91: william.liangf, info, IfStmt, logger.info("Start " + getClass().getSimpleName() + " " + NetUtils.getLocalAddress() + " connect to the server " + getRemoteAddress());
166: kimi, error, IfStmt, logger.error(errorMsg, t);
171: kimi, error, IfStmt, logger.warn(errorMsg, t);
187: william.liangf, warn, CatchClause, logger.warn(e.getMessage(), e);
282: ken.lj, info, IfStmt, logger.info("Successed connect to server " + getRemoteAddress() + " from " + getClass().getSimpleName() + " " + NetUtils.getLocalHost() + " using dubbo version " + Version.getVersion() + ", channel is " + this.getChannel());
310: william.liangf, warn, CatchClause, logger.warn(e.getMessage(), e);
315: william.liangf, warn, CatchClause, logger.warn(e.getMessage(), e);
335: liangfei0201, warn, CatchClause, logger.warn(e.getMessage(), e);
340: william.liangf, warn, CatchClause, logger.warn(e.getMessage(), e);
345: liangfei0201, warn, CatchClause, logger.warn(e.getMessage(), e);
350: william.liangf, warn, CatchClause, logger.warn(e.getMessage(), e);
45: ken.lj, error, IfStmt, logger.error(e);
74: william.liangf, error, CatchClause, logger.error(t.getMessage(), t);
84: william.liangf, error, CatchClause, logger.error(t.getMessage(), t);
91: william.liangf, error, CatchClause, logger.error(t.getMessage(), t);
65: william.liangf, info, IfStmt, logger.info("Start " + getClass().getSimpleName() + " bind " + getBindAddress() + ", export " + getLocalAddress());
93: william.liangf, error, CatchClause, logger.error(t.getMessage(), t);
103: william.liangf, error, CatchClause, logger.error(t.getMessage(), t);
127: william.liangf, error, CatchClause, logger.error(t.getMessage(), t);
145: ken.lj, info, IfStmt, logger.info("Close " + getClass().getSimpleName() + " bind " + getBindAddress() + ", export " + getLocalAddress());
151: william.liangf, warn, CatchClause, logger.warn(e.getMessage(), e);
156: william.liangf, warn, CatchClause, logger.warn(e.getMessage(), e);
187: ken.lj, warn, IfStmt, logger.warn("Close new channel " + ch + ", cause: server is closing or has been closed. For example, receive a new connect request while in shutdown process.");
194: william.liangf, error, IfStmt, logger.error("Close channel " + ch + ", cause: The server " + ch.getLocalAddress() + " connections greater than max config " + accepts);
205: william.liangf, warn, IfStmt, logger.warn("All clients has discontected from " + ch.getLocalAddress() + ". You can graceful shutdown now.");
70: william.liangf, error, CatchClause, logger.error(t.getMessage(), t);
81: william.liangf, error, CatchClause, logger.error(t.getMessage(), t);
92: william.liangf, error, CatchClause, logger.error(t.getMessage(), t);
103: william.liangf, error, CatchClause, logger.error(t.getMessage(), t);
114: william.liangf, error, CatchClause, logger.error(t.getMessage(), t);
44: kimi, error, IfStmt, logger.error("Serialization extension " + serialization.getClass().getName() + " has duplicate id to Serialization extension " + ID_SERIALIZATION_MAP.get(idByte).getClass().getName() + ", ignore this Serialization extension");
63: Ke Li, warn, IfStmt, log.warn("Call Decodeable.decode failed: " + e.getMessage(), e);
59: Ke Li, debug, IfStmt, log.debug("Decode decodeable message " + message.getClass().getName());
60: oldrat, warn, CatchClause, logger.warn("ChannelEventRunnable handle " + state + " operation error, channel is " + channel, e);
67: oldrat, warn, CatchClause, logger.warn("ChannelEventRunnable handle " + state + " operation error, channel is " + channel, e);
74: oldrat, warn, CatchClause, logger.warn("ChannelEventRunnable handle " + state + " operation error, channel is " + channel + ", message is " + message, e);
82: oldrat, warn, CatchClause, logger.warn("ChannelEventRunnable handle " + state + " operation error, channel is " + channel + ", message is " + message, e);
90: ken.lj, warn, CatchClause, logger.warn("ChannelEventRunnable handle " + state + " operation error, channel is " + channel + ", message is: " + message + ", exception is " + exception, e);
95: oldrat, warn, SwitchStmt, logger.warn("unknown state: " + state + ", message is " + message);
66: william.liangf, warn, CatchClause, logger.warn("fail to destroy thread pool of server: " + t.getMessage(), t);
116: ken.lj, warn, IfStmt, logger.warn(new IllegalThreadStateException("connectionordered channel handler `queue size: " + connectionExecutor.getQueue().size() + " exceed the warning limit number :" + queuewarninglimit));
78: ken.lj, warn, IfStmt, logger.warn("Please set -Dserver=127.0.0.1:9911");
42: william.liangf, warn, IfStmt, logger.warn("Please set -Dserver=127.0.0.1:9911");
39: william.liangf, warn, IfStmt, logger.warn("Please set -Dserver=127.0.0.1:9911");
51: william.liangf, warn, IfStmt, logger.warn("Please set -Dserver=127.0.0.1:9911");
51: ken.lj, info, ForStmt, logger.info("restart times:" + i);
105: ken.lj, info, IfStmt, logger.info("server closed:" + server);
146: ken.lj, warn, IfStmt, logger.warn("Please set -Dport=9911");
124: kimi, warn, CatchClause, logger.warn(e.getMessage(), e);
120: kimi, warn, IfStmt, logger.warn("Skip input stream " + is.available());
287: kimi, warn, CatchClause, logger.warn("Failed to send bad_response info back: " + res + ", cause: " + e.getMessage(), e);
278: kimi, warn, TryStmt, logger.warn("Fail to encode response: " + res + ", send bad_response info instead, cause: " + t.getMessage(), t);
64: kimi, error, IfStmt, logger.error(e);
76: ken.lj, warn, CatchClause, logger.warn(t.getMessage(), t);
88: ken.lj, warn, CatchClause, logger.warn(t.getMessage(), t);
96: ken.lj, warn, CatchClause, logger.warn(t.getMessage(), t);
217: kimi, info, IfStmt, logger.info(new Exception("Close channel " + channel + " on exit command: " + Arrays.toString((byte[]) command)));
276: kimi, info, IfStmt, logger.info(new Exception("Close channel " + channel + " on exit command " + command));
124: william.liangf, warn, CatchClause, logger.warn(e.getMessage(), e);
129: william.liangf, warn, CatchClause, logger.warn(e.getMessage(), e);
137: william.liangf, warn, CatchClause, logger.warn(e.getMessage(), e);
133: william.liangf, info, IfStmt, logger.info("Close grizzly channel " + connection);
88: william.liangf, warn, CatchClause, logger.warn(t.getMessage());
97: william.liangf, warn, CatchClause, logger.warn(e.getMessage(), e);
112: william.liangf, error, CatchClause, logger.error("RemotingException on channel " + channel, e);
92: william.liangf, warn, CatchClause, logger.warn(e.getMessage(), e);
52: 张亮, Debug, ConstructorDeclaration, Log.getLog().setDebugEnabled(false);
104: william.liangf, warn, CatchClause, logger.warn(e.getMessage(), e);
86: 张亮, warn, CatchClause, logger.warn(e.getMessage(), e);
117: william.liangf, warn, CatchClause, logger.warn(e.getMessage(), e);
122: william.liangf, warn, CatchClause, logger.warn(e.getMessage(), e);
130: william.liangf, warn, CatchClause, logger.warn(e.getMessage(), e);
126: william.liangf, info, IfStmt, logger.info("CLose mina channel " + session);
118: william.liangf, info, IfStmt, logger.info("Close new mina channel " + newSession + ", because the client closed.");
107: william.liangf, info, IfStmt, logger.info("Close old mina channel " + oldSession + " on create new mina channel " + newSession);
156: william.liangf, warn, CatchClause, logger.warn(t.getMessage());
78: william.liangf, warn, CatchClause, logger.warn(e.getMessage(), e);
124: william.liangf, warn, CatchClause, logger.warn(e.getMessage(), e);
129: william.liangf, warn, CatchClause, logger.warn(e.getMessage(), e);
134: william.liangf, warn, CatchClause, logger.warn(e.getMessage(), e);
142: william.liangf, warn, CatchClause, logger.warn(e.getMessage(), e);
138: william.liangf, info, IfStmt, logger.info("Close netty channel " + channel);
112: chao.liuc, info, IfStmt, logger.info("Close new netty channel " + newChannel + ", because the client closed.");
101: chao.liuc, info, IfStmt, logger.info("Close old netty channel " + oldChannel + " on create new netty channel " + newChannel);
144: kimi, warn, CatchClause, logger.warn(t.getMessage());
73: kimi, debug, MethodDeclaration, logger.debug(msg);
78: kimi, debug, MethodDeclaration, logger.debug(msg, cause);
83: kimi, info, MethodDeclaration, logger.info(msg);
88: kimi, info, MethodDeclaration, logger.info(msg, cause);
93: kimi, warn, MethodDeclaration, logger.warn(msg);
98: kimi, warn, MethodDeclaration, logger.warn(msg, cause);
103: kimi, error, MethodDeclaration, logger.error(msg);
108: kimi, error, MethodDeclaration, logger.error(msg, cause);
104: william.liangf, warn, CatchClause, logger.warn(e.getMessage(), e);
118: william.liangf, warn, CatchClause, logger.warn(e.getMessage(), e);
113: william.liangf, warn, CatchClause, logger.warn(e.getMessage(), e);
126: william.liangf, warn, CatchClause, logger.warn(e.getMessage(), e);
133: william.liangf, warn, CatchClause, logger.warn(e.getMessage(), e);
131: ken.lj, error, MethodDeclaration, logger.error(this.getClass().getSimpleName() + message.toString());
125: qinliujie, warn, CatchClause, logger.warn(e.getMessage(), e);
130: qinliujie, warn, CatchClause, logger.warn(e.getMessage(), e);
135: qinliujie, warn, CatchClause, logger.warn(e.getMessage(), e);
143: qinliujie, warn, CatchClause, logger.warn(e.getMessage(), e);
139: qinliujie, info, IfStmt, logger.info("Close netty channel " + channel);
116: qinliujie, info, IfStmt, logger.info("Close new netty channel " + newChannel + ", because the client closed.");
105: qinliujie, info, IfStmt, logger.info("Close old netty channel " + oldChannel + " on create new netty channel " + newChannel);
148: qinliujie, warn, CatchClause, logger.warn(t.getMessage());
112: qinliujie, warn, CatchClause, logger.warn(e.getMessage(), e);
126: qinliujie, warn, CatchClause, logger.warn(e.getMessage(), e);
121: qinliujie, warn, CatchClause, logger.warn(e.getMessage(), e);
134: qinliujie, warn, CatchClause, logger.warn(e.getMessage(), e);
141: qinliujie, warn, CatchClause, logger.warn(e.getMessage(), e);
59: qinliujie, trace, IfStmt, logger.trace(msg);
67: qinliujie, trace, IfStmt, logger.trace(ft.getMessage(), ft.getThrowable());
76: qinliujie, trace, IfStmt, logger.trace(ft.getMessage(), ft.getThrowable());
84: qinliujie, trace, IfStmt, logger.trace(ft.getMessage(), ft.getThrowable());
91: qinliujie, trace, IfStmt, logger.trace(msg, t);
103: qinliujie, debug, IfStmt, logger.debug(msg);
111: qinliujie, debug, IfStmt, logger.debug(ft.getMessage(), ft.getThrowable());
119: qinliujie, debug, IfStmt, logger.debug(ft.getMessage(), ft.getThrowable());
127: qinliujie, debug, IfStmt, logger.debug(ft.getMessage(), ft.getThrowable());
134: qinliujie, debug, IfStmt, logger.debug(msg, t);
146: qinliujie, info, IfStmt, logger.info(msg);
154: qinliujie, info, IfStmt, logger.info(ft.getMessage(), ft.getThrowable());
162: qinliujie, info, IfStmt, logger.info(ft.getMessage(), ft.getThrowable());
170: qinliujie, info, IfStmt, logger.info(ft.getMessage(), ft.getThrowable());
177: qinliujie, info, IfStmt, logger.info(msg, t);
189: qinliujie, warn, IfStmt, logger.warn(msg);
197: qinliujie, warn, IfStmt, logger.warn(ft.getMessage(), ft.getThrowable());
205: qinliujie, warn, IfStmt, logger.warn(ft.getMessage(), ft.getThrowable());
213: qinliujie, warn, IfStmt, logger.warn(ft.getMessage(), ft.getThrowable());
220: qinliujie, warn, IfStmt, logger.warn(msg, t);
232: qinliujie, error, IfStmt, logger.error(msg);
240: qinliujie, error, IfStmt, logger.error(ft.getMessage(), ft.getThrowable());
248: qinliujie, error, IfStmt, logger.error(ft.getMessage(), ft.getThrowable());
256: qinliujie, error, IfStmt, logger.error(ft.getMessage(), ft.getThrowable());
263: qinliujie, error, IfStmt, logger.error(msg, t);
73: william.liangf, error, CatchClause, logger.error(t.getMessage(), t);
80: william.liangf, error, CatchClause, logger.error(t.getMessage(), t);
65: william.liangf, error, CatchClause, logger.error(e.getMessage(), e);
63: william.liangf, error, CatchClause, logger.error("Unexpected error occur at reconnect, cause: " + t.getMessage(), t);
77: william.liangf, error, CatchClause, logger.error(t.getMessage(), t);
64: william.liangf, error, CatchClause, logger.error(e.getMessage(), e);
69: william.liangf, error, CatchClause, logger.error(t.getMessage(), t);
76: william.liangf, error, CatchClause, logger.error(t.getMessage(), t);
60: william.liangf, error, CatchClause, logger.error("Unexpected error occur at reconnect, cause: " + t.getMessage(), t);
74: william.liangf, error, CatchClause, logger.error(t.getMessage(), t);
64: william.liangf, error, CatchClause, logger.error(e.getMessage(), e);
63: william.liangf, error, CatchClause, logger.error(e.getMessage(), e);
124: ken.lj, warn, CatchClause, logger.warn(t.getMessage(), t);
73: ken.lj, warn, IfStmt, logger.warn("Zkclient has already been started!");
69: ken.lj, error, CatchClause, logger.error("Timeout! zookeeper server can not be connected in : " + timeout + "ms!", t);
85: ken.lj, warn, CatchClause, logger.warn(Thread.currentThread().getName() + " was interrupted unexpectedly, which may cause unpredictable exception!");
87: ken.lj, error, CatchClause, logger.error("Got an exception when trying to create zkclient instance, can not connect to zookeeper server, please check!", e);
153: william.liangf, warn, CatchClause, logger.warn("Exception in AcessLogFilter of service(" + invoker + " -> " + inv + ")", t);
201: ken.lj, error, CatchClause, logger.error(e.getMessage(), e);
196: ken.lj, error, CatchClause, logger.error(e.getMessage(), e);
173: ken.lj, debug, IfStmt, logger.debug("Append log to " + accesslog);
68: william.liangf, warn, CatchClause, logger.warn(t.getMessage(), t);
48: william.liangf, error, IfStmt, LOGGER.error("The service method " + invoker.getInterface().getName() + "." + getMethodSignature(invocation) + " is DEPRECATED! Declare from " + invoker.getUrl());
116: oldrat, error, CatchClause, logger.error("Got unchecked and undeclared exception which called by " + RpcContext.getContext().getRemoteHost() + ". service: " + invoker.getInterface().getName() + ", method: " + invocation.getMethodName() + ", exception: " + e.getClass().getName() + ": " + e.getMessage(), e);
108: oldrat, warn, CatchClause, logger.warn("Fail to ExceptionFilter when called by " + RpcContext.getContext().getRemoteHost() + ". service: " + invoker.getInterface().getName() + ", method: " + invocation.getMethodName() + ", exception: " + e.getClass().getName() + ": " + e.getMessage(), e);
85: oldrat, error, TryStmt, logger.error("Got unchecked and undeclared exception which called by " + RpcContext.getContext().getRemoteHost() + ". service: " + invoker.getInterface().getName() + ", method: " + invocation.getMethodName() + ", exception: " + exception.getClass().getName() + ": " + exception.getMessage(), exception);
135: william.liangf, warn, CatchClause, logger.warn(e.getMessage(), e);
48: william.liangf, warn, IfStmt, logger.warn("invoke time out. method: " + invocation.getMethodName() + " arguments: " + Arrays.toString(invocation.getArguments()) + " , url is " + invoker.getUrl() + ", invoke elapsed " + elapsed + " ms.");
37: william.liangf, error, IfStmt, LOGGER.error("The service " + invoker.getInterface().getName() + " is DEPRECATED! Declare from " + invoker.getUrl());
51: william.liangf, error, CatchClause, logger.error(t.getMessage(), t);
79: william.liangf, error, CatchClause, logger.error(t.getMessage(), t);
53: william.liangf, error, CatchClause, logger.error(t.getMessage(), t);
96: william.liangf, error, CatchClause, logger.error(t.getMessage(), t);
67: william.liangf, warn, CatchClause, logger.warn(t.getMessage(), t);
63: william.liangf, info, IfStmt, logger.info("Destroy reference: " + invoker.getUrl());
80: william.liangf, warn, CatchClause, logger.warn(t.getMessage(), t);
76: william.liangf, info, IfStmt, logger.info("Unexport service: " + exporter.getInvoker().getUrl());
81: william.liangf, warn, CatchClause, logger.warn(t.getMessage(), t);
95: Chen Lei, error, CatchClause, LOGGER.error("Failed to create stub implementation class " + stub + " in consumer " + NetUtils.getLocalHost() + " use dubbo version " + Version.getVersion() + ", cause: " + t.getMessage(), t);
88: william.liangf, error, CatchClause, LOGGER.error("export a stub service error.", e);
55: william.liangf, warn, CatchClause, logger.warn(t.getMessage(), t);
76: william.liangf, warn, CatchClause, logger.warn(t.getMessage(), t);
57: Huang YunKun, error, MethodDeclaration, Mockito.verify(logger).error(eq("Got unchecked and undeclared exception which called by 127.0.0.1. service: " + DemoService.class.getName() + ", method: sayHello, exception: " + RpcException.class.getName() + ": TestRpcException"), eq(exception));
113: ken.lj, info, IfStmt, logger.info("export a callback service :" + exporturl + ", on " + channel + ", url is: " + url);
173: william.liangf, error, CatchClause, logger.error(e.getMessage(), e);
160: ken.lj, info, IfStmt, logger.info("method " + inv.getMethodName() + " include a callback service :" + invoker.getUrl() + ", a proxy :" + invoker + " has been created.");
227: william.liangf, error, CatchClause, logger.error(e.getMessage(), e);
241: william.liangf, error, CatchClause, logger.error(e.getMessage(), e);
273: ken.lj, info, IfStmt, logger.info(e.getMessage(), e);
285: william.liangf, error, CatchClause, logger.error(e.getMessage(), e);
73: kimi, warn, IfStmt, log.warn("Decode rpc invocation failed: " + e.getMessage(), e);
113: ken.lj, warn, IfStmt, log.warn("Decode argument failed: " + e.getMessage(), e);
116: kimi, warn, IfStmt, log.warn("Decode rpc result failed: " + e.getMessage(), e);
139: kimi, warn, IfStmt, log.warn("Decode request failed: " + t.getMessage(), t);
100: kimi, warn, IfStmt, log.warn("Decode response failed: " + t.getMessage(), t);
139: ken.lj, warn, CatchClause, logger.warn(t.getMessage(), t);
95: lzj, warn, IfStmt, logger.warn(new IllegalStateException("The methodName " + inv.getMethodName() + " not found in callback service interface ,invoke will be ignored." + " please update the api interface. url is:" + invoker.getUrl()) + " ,invocation is :" + inv);
127: Ke Li, info, IfStmt, logger.info("disconnected from " + channel.getRemoteAddress() + ",url:" + channel.getUrl());
138: william.liangf, warn, CatchClause, logger.warn("Failed to invoke event method " + invocation.getMethodName() + "(), cause: " + t.getMessage(), t);
242: ken.lj, warn, IfStmt, logger.warn(new IllegalStateException("consumer [" + url.getParameter(Constants.INTERFACE_KEY) + "], has set stubproxy support event ,but no stub methods founded."));
304: 张亮, info, MethodDeclaration, logger.info("Optimizing the serialization process for Kryo, FST, etc...");
428: william.liangf, warn, CatchClause, logger.warn(t.getMessage(), t);
424: william.liangf, info, IfStmt, logger.info("Close dubbo server: " + server.getLocalAddress());
442: oldrat, warn, CatchClause, logger.warn(t.getMessage(), t);
438: oldrat, info, IfStmt, logger.info("Close dubbo connect: " + client.getLocalAddress() + "-->" + client.getRemoteAddress());
456: oldrat, warn, CatchClause, logger.warn(t.getMessage(), t);
452: oldrat, info, IfStmt, logger.info("Close dubbo connect: " + client.getLocalAddress() + "-->" + client.getRemoteAddress());
68: william.liangf, info, IfStmt, logger.info("Lazy connect to " + url);
116: ken.lj, warn, IfStmt, logger.warn(new IllegalStateException("safe guard client , should not be called ,must have a bug."));
79: ken.lj, error, IfStmt, logger.error(new IllegalStateException("invalid result value : null, expected " + Result.class.getName()));
84: ken.lj, error, IfStmt, logger.error(new IllegalStateException("invalid result type :" + rpcResult.getClass() + ", expected " + Result.class.getName()));
206: ken.lj, error, IfStmt, logger.error(invocation.getMethodName() + ".call back method invoke error . callback method :" + onthrowMethod + ", url:" + invoker.getUrl(), exception);
203: ken.lj, error, CatchClause, logger.error(invocation.getMethodName() + ".call back method invoke error . callback method :" + onthrowMethod + ", url:" + invoker.getUrl(), e);
117: ken.lj, warn, CatchClause, logger.warn(e.getMessage(), e);
104: chao.liuc, error, MethodDeclaration, Assert.assertEquals("should not  warning message", 0, LogUtil.findMessage(errorMsg));
105: chao.liuc, Error, MethodDeclaration, LogUtil.checkNoError();
123: chao.liuc, error, MethodDeclaration, Assert.assertEquals("should not warning message", 0, LogUtil.findMessage(errorMsg));
127: chao.liuc, error, MethodDeclaration, Assert.assertEquals("should warning message", 1, LogUtil.findMessage(errorMsg));
131: chao.liuc, error, MethodDeclaration, Assert.assertEquals("should warning message", 1, LogUtil.findMessage(errorMsg));
134: ken.lj, warn, CatchClause, logger.warn(t.getMessage(), t);
130: ken.lj, info, IfStmt, logger.info("Close hessian server " + server.getUrl());
113: william.liangf, warn, CatchClause, logger.warn(e.getMessage(), e);
152: oldrat, warn, CatchClause, logger.warn("returnResource error: " + t.getMessage(), t);
164: william.liangf, warn, CatchClause, logger.warn(e.getMessage(), e);
216: 张亮, Error, CatchClause, logger.warn("Error closing rest server", t);
212: 张亮, info, IfStmt, logger.info("Closing the rest server at " + entry.getKey());
222: 张亮, info, IfStmt, logger.info("Closing rest clients");
228: 张亮, Error, CatchClause, logger.warn("Error closing rest client", t);
78: 张亮, info, MethodDeclaration, logger.info("The contents of request body is: \n" + new String(buffer, "UTF-8") + "\n");
88: 张亮, info, MethodDeclaration, logger.info("The contents of response body is: \n" + new String(wrapper.getBytes(), "UTF-8") + "\n");
103: 张亮, info, MethodDeclaration, logger.info(msg.toString());
70: william.liangf, warn, CatchClause, logger.warn(e.getMessage(), e);
142: william.liangf, warn, CatchClause, logger.warn(t.getMessage(), t);
146: william.liangf, warn, CatchClause, logger.warn(t.getMessage(), t);
142: william.liangf, info, IfStmt, logger.info("Close dubbo server: " + server.getLocalAddress());
51: Ke Li, error, IfStmt, logger.error("Unsupported magic " + magic);
70: Ke Li, error, IfStmt, logger.error("Could not find processor for service " + serviceName);
39: 张亮, warn, IfStmt, logger.warn(type + " has no zero-arg constructor and this will affect the serialization performance");
131: william.liangf, error, CatchClause, LOGGER.error("client.invokeSync error", e);
126: william.liangf, error, IfStmt, LOGGER.error("server return result is null");
144: william.liangf, error, CatchClause, LOGGER.error("client.invokeSync error", e);
139: william.liangf, error, IfStmt, LOGGER.error("server return response is null");
164: ken.lj, FINE, CatchClause, log.log(Level.FINER, e.toString(), e);
231: ken.lj, FINE, CatchClause, log.log(Level.FINER, e.toString(), e);
272: ken.lj, FINE, CatchClause, log.log(Level.FINER, e.toString(), e);
246: ken.lj, FINE, CatchClause, log.log(Level.FINE, e.toString(), e);
337: ken.lj, FINE, CatchClause, log.log(Level.FINE, e.toString(), e);
3528: ken.lj, FINE, CatchClause, log.log(Level.FINE, e.toString(), e);
182: ken.lj, FINE, CatchClause, log.log(Level.FINER, e.toString(), e);
294: ken.lj, FINE, CatchClause, log.log(Level.FINE, e.toString(), e);
320: ken.lj, FINE, CatchClause, log.log(Level.FINE, e.toString(), e);
338: ken.lj, FINE, CatchClause, log.log(Level.FINE, e.toString(), e);
356: ken.lj, FINE, CatchClause, log.log(Level.FINE, e.toString(), e);
374: ken.lj, FINE, CatchClause, log.log(Level.FINE, e.toString(), e);
392: ken.lj, FINE, CatchClause, log.log(Level.FINE, e.toString(), e);
410: ken.lj, FINE, CatchClause, log.log(Level.FINE, e.toString(), e);
216: Ian Luo, warn, CatchClause, log.warning(String.valueOf(t.getCause()));
649: ken.lj, warn, CatchClause, log.warning("Hessian/Burlap: '" + type + "' is an unknown class in " + _loader + ":\n" + e);
651: ken.lj, FINE, CatchClause, log.log(Level.FINER, e.toString(), e);
