166: zhenghua, INFO, CatchClause, logger.log(Level.INFO, "Failed to start reference finalizer thread." + " Reference cleanup will only occur when new references are created.", t);
202: zhenghua, SEVERE, CatchClause, logger.log(Level.SEVERE, "Error cleaning up after reference.", t);
254: zhenghua, info, CatchClause, logger.info("Not allowed to access system class loader.");
298: zhenghua, WARN, CatchClause, logger.log(Level.WARNING, LOADING_ERROR, e);
87: zhenghua, WARN, MethodDeclaration, logger.log(Level.WARNING, "Error loading regex compiler, falling back to next option", e);
89: emcmanus, INFO, CatchClause, logger.log(Level.INFO, "Failed to create a thread without inherited thread-local values", t);
103: zhenghua, INFO, CatchClause, logger.log(Level.INFO, "Failed to clear thread local values inherited by reference finalizer thread.", t);
183: zhenghua, SEVERE, CatchClause, logger.log(Level.SEVERE, "Error cleaning up after reference.", t);
221: zhenghua, INFO, CatchClause, logger.log(Level.INFO, "Couldn't access Thread.inheritableThreadLocals. Reference finalizer threads will " + "inherit thread local values.");
867: zhenghua, WARN, IfStmt, logger.log(Level.WARNING, "ignoring weigher specified without maximumWeight");
1809: zhenghua, WARN, CatchClause, logger.log(Level.WARNING, "Exception thrown by removal listener", e);
2210: zhenghua, WARN, CatchClause, logger.log(Level.WARNING, "Exception thrown during refresh", t);
173: zhenghua, SEVERE, CatchClause, logger.log(Level.SEVERE, String.format(Locale.ROOT, "Exception %s thrown while handling exception: %s", e2, e), e2);
232: zhenghua, SEVERE, IfStmt, logger.log(Level.SEVERE, message(context), exception);
81: zhenghua, WARN, IfStmt, logger.log(Level.WARNING, "IOException thrown while closing Closeable.", e);
250: zhenghua, WARN, MethodDeclaration, Closeables.logger.log(Level.WARNING, "Suppressing exception thrown when closing " + closeable, suppressed);
55: zhenghua, WARN, IfStmt, logger.log(Level.WARNING, "IOException thrown while flushing Flushable.", e);
72: zhenghua, SEVERE, CatchClause, logger.log(Level.SEVERE, "IOException should not have been thrown.", e);
377: zhenghua, warn, CatchClause, logger.warning("Cannot access " + file + ": " + e);
432: zhenghua, warn, CatchClause, logger.warning("Invalid Class-Path entry: " + path);
487: dpb, WARN, CatchClause, logger.log(WARNING, "malformed classpath entry: " + entry, e);
554: zhenghua, warn, IfStmt, logger.warning("Cannot read directory " + directory);
163: clm, SEVERE, IfStmt, log.log(Level.SEVERE, "UnsafeAtomicHelper is broken!", thrownUnsafeFailure);
164: clm, SEVERE, IfStmt, log.log(Level.SEVERE, "SafeAtomicHelper is broken!", thrownAtomicReferenceFieldUpdaterFailure);
198: zhenghua, WARN, CatchClause, logger.log(Level.WARNING, "Error while attempting to shut down the service after failure.", ignored);
195: zhenghua, SEVERE, IfStmt, logger.log(Level.SEVERE, message, throwable);
71: clm, SEVERE, IfStmt, log.log(Level.SEVERE, "SafeAtomicHelper is broken!", thrownReflectionFailure);
216: zhenghua, SEVERE, MethodDeclaration, logger.log(Level.SEVERE, "Detected potential deadlock", e);
176: zhenghua, SEVERE, CatchClause, logger.log(Level.SEVERE, "Exception while running callbacks for " + listener + " on " + executor, e);
208: zhenghua, SEVERE, CatchClause, logger.log(Level.SEVERE, "Exception while executing callback: " + listener + " " + nextLabel, e);
229: yorick, SEVERE, CatchClause, log.log(Level.SEVERE, "Exception while executing runnable " + task, e);
680: zhenghua, FINE, IfStmt, logger.log(Level.FINE, "Started {0} in {1}.", new Object[] { service, stopwatch });
769: zhenghua, FINE, IfStmt, logger.log(Level.FINE, "Starting {0}.", service);
795: zhenghua, FINE, IfStmt, logger.log(Level.FINE, "Service {0} has terminated. Previous state was: {1}", new Object[] { service, from });
812: zhenghua, SEVERE, IfStmt, logger.log(Level.SEVERE, "Service " + service + " has failed in the " + from + " state.", failure);
69: zhenghua, SEVERE, TryStmt, logger.log(SEVERE, String.format(Locale.ROOT, "Caught an exception in %s.  Shutting down.", t), e);
386: zhenghua, SEVERE, CatchClause, logger.log(Level.SEVERE, "Cannot load class " + classInfo + ", skipping...", e);
375: zhenghua, WARN, CatchClause, logger.log(Level.WARNING, "Exception while invoking default constructor.", e.getCause());
43: zhenghua, INFO, CatchClause, logger.log(Level.INFO, "exception thrown during tearDown: " + t.getMessage(), t);
77: zhenghua, INFO, IfStmt, logger.log(Level.INFO, "exception thrown during tearDown", t);
96: cpovirk, INFO, MethodDeclaration, logger.log(Level.INFO, "message", EXCEPTION);
426: cpovirk, SEVERE, CatchClause, log.log(Level.SEVERE, "RuntimeException while executing runnable " + runnable + " with executor " + executor, e);
481: cpovirk, SEVERE, CatchClause, log.log(Level.SEVERE, "RuntimeException while executing runnable " + runnable + " with executor " + executor, e);
556: cpovirk, SEVERE, CatchClause, log.log(Level.SEVERE, "RuntimeException while executing runnable " + runnable + " with executor " + executor, e);
683: cpovirk, SEVERE, CatchClause, log.log(Level.SEVERE, "RuntimeException while executing runnable " + runnable + " with executor " + executor, e);
187: zhenghua, WARN, IfStmt, logger.log(Level.WARNING, "couldn't delete file: {0}", new Object[] { file });
277: zhenghua, warn, IfStmt, logger.warning("Unable to delete file: " + fileThreadLocal.get());
166: kevinb, INFO, CatchClause, logger.log(Level.INFO, "Failed to start reference finalizer thread." + " Reference cleanup will only occur when new references are created.", t);
202: kevinb@google.com, SEVERE, CatchClause, logger.log(Level.SEVERE, "Error cleaning up after reference.", t);
254: kevinb@google.com, info, CatchClause, logger.info("Not allowed to access system class loader.");
298: kevinb@google.com, WARN, CatchClause, logger.log(Level.WARNING, LOADING_ERROR, e);
98: chrisn, WARN, MethodDeclaration, logger.log(Level.WARNING, "Error loading regex compiler, falling back to next option", e);
89: emcmanus, INFO, CatchClause, logger.log(Level.INFO, "Failed to create a thread without inherited thread-local values", t);
103: kevinb, INFO, CatchClause, logger.log(Level.INFO, "Failed to clear thread local values inherited by reference finalizer thread.", t);
183: kevinb@google.com, SEVERE, CatchClause, logger.log(Level.SEVERE, "Error cleaning up after reference.", t);
221: kevinb, INFO, CatchClause, logger.log(Level.INFO, "Couldn't access Thread.inheritableThreadLocals. Reference finalizer threads will " + "inherit thread local values.");
964: Charles Fry, WARN, IfStmt, logger.log(Level.WARNING, "ignoring weigher specified without maximumWeight");
1813: Charles Fry, WARN, CatchClause, logger.log(Level.WARNING, "Exception thrown by removal listener", e);
2295: Charles Fry, WARN, CatchClause, logger.log(Level.WARNING, "Exception thrown during refresh", t);
173: cpovirk, SEVERE, CatchClause, logger.log(Level.SEVERE, String.format(Locale.ROOT, "Exception %s thrown while handling exception: %s", e2, e), e2);
232: Colin Decker, SEVERE, IfStmt, logger.log(Level.SEVERE, message(context), exception);
81: cpovirk, WARN, IfStmt, logger.log(Level.WARNING, "IOException thrown while closing Closeable.", e);
250: cpovirk, WARN, MethodDeclaration, Closeables.logger.log(Level.WARNING, "Suppressing exception thrown when closing " + closeable, suppressed);
55: cpovirk, WARN, IfStmt, logger.log(Level.WARNING, "IOException thrown while flushing Flushable.", e);
72: kevinb@google.com, SEVERE, CatchClause, logger.log(Level.SEVERE, "IOException should not have been thrown.", e);
377: emcmanus, warn, CatchClause, logger.warning("Cannot access " + file + ": " + e);
432: Colin Decker, warn, CatchClause, logger.warning("Invalid Class-Path entry: " + path);
487: dpb, WARN, CatchClause, logger.log(WARNING, "malformed classpath entry: " + entry, e);
554: benyu, warn, IfStmt, logger.warning("Cannot read directory " + directory);
163: clm, SEVERE, IfStmt, log.log(Level.SEVERE, "UnsafeAtomicHelper is broken!", thrownUnsafeFailure);
164: clm, SEVERE, IfStmt, log.log(Level.SEVERE, "SafeAtomicHelper is broken!", thrownAtomicReferenceFieldUpdaterFailure);
198: cpovirk, WARN, CatchClause, logger.log(Level.WARNING, "Error while attempting to shut down the service after failure.", ignored);
195: cpovirk, SEVERE, IfStmt, logger.log(Level.SEVERE, message, throwable);
71: clm, SEVERE, IfStmt, log.log(Level.SEVERE, "SafeAtomicHelper is broken!", thrownReflectionFailure);
216: Chris Povirk, SEVERE, MethodDeclaration, logger.log(Level.SEVERE, "Detected potential deadlock", e);
176: cpovirk, SEVERE, CatchClause, logger.log(Level.SEVERE, "Exception while running callbacks for " + listener + " on " + executor, e);
208: chrisn, SEVERE, CatchClause, logger.log(Level.SEVERE, "Exception while executing callback: " + listener + " " + nextLabel, e);
229: yorick, SEVERE, CatchClause, log.log(Level.SEVERE, "Exception while executing runnable " + task, e);
680: Kurt Kluever, FINE, IfStmt, logger.log(Level.FINE, "Started {0} in {1}.", new Object[] { service, stopwatch });
772: Chris Povirk, FINE, IfStmt, logger.log(Level.FINE, "Starting {0}.", service);
798: cpovirk, FINE, IfStmt, logger.log(Level.FINE, "Service {0} has terminated. Previous state was: {1}", new Object[] { service, from });
820: cpovirk, SEVERE, IfStmt, logger.log(Level.SEVERE, "Service " + service + " has failed in the " + from + " state.", failure);
69: cpovirk, SEVERE, TryStmt, logger.log(SEVERE, String.format(Locale.ROOT, "Caught an exception in %s.  Shutting down.", t), e);
336: cpovirk, SEVERE, CatchClause, log.log(Level.SEVERE, "RuntimeException while executing runnable " + command + " with executor " + executor, e);
386: Chris Povirk, SEVERE, CatchClause, logger.log(Level.SEVERE, "Cannot load class " + classInfo + ", skipping...", e);
387: Chris Povirk, WARN, CatchClause, logger.log(Level.WARNING, "Exception while invoking default constructor.", e.getCause());
43: Dzmitry Lazerka, INFO, CatchClause, logger.log(Level.INFO, "exception thrown during tearDown: " + t.getMessage(), t);
77: Chris Povirk, INFO, IfStmt, logger.log(Level.INFO, "exception thrown during tearDown", t);
96: cpovirk, INFO, MethodDeclaration, logger.log(Level.INFO, "message", EXCEPTION);
426: cpovirk, SEVERE, CatchClause, log.log(Level.SEVERE, "RuntimeException while executing runnable " + runnable + " with executor " + executor, e);
481: cpovirk, SEVERE, CatchClause, log.log(Level.SEVERE, "RuntimeException while executing runnable " + runnable + " with executor " + executor, e);
556: cpovirk, SEVERE, CatchClause, log.log(Level.SEVERE, "RuntimeException while executing runnable " + runnable + " with executor " + executor, e);
683: cpovirk, SEVERE, CatchClause, log.log(Level.SEVERE, "RuntimeException while executing runnable " + runnable + " with executor " + executor, e);
187: Kurt Kluever, WARN, IfStmt, logger.log(Level.WARNING, "couldn't delete file: {0}", new Object[] { file });
312: Chris Povirk, warn, IfStmt, logger.warning("Unable to delete file: " + fileThreadLocal.get());
494: cgdecker, WARN, CatchClause, logger.log(Level.WARNING, "Unable to delete file: " + fileThreadLocal.get(), e);
643: cpovirk, WARN, CatchClause, log.log(WARNING, "Failure cleaning up test directory", e);
