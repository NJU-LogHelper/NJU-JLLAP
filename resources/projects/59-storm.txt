101: Jason Jackson, warn, CatchClause, LOG.warn("Topology submission exception", e);
104: Jason Jackson, warn, CatchClause, LOG.warn("Topology already alive exception", e);
93: Nathan Marz, info, TryStmt, LOG.info("Submitting topology " + name + " in distributed mode with conf " + serConf);
84: Nathan Marz, info, IfStmt, LOG.info("Submitting topology " + name + " in local mode");
110: Nathan Marz, info, TryStmt, LOG.info("Finished submitting topology: " + name);
142: Nathan Marz, info, IfStmt, LOG.info("Jar already uploaded to master. Not submitting jar.");
138: Nathan Marz, info, IfStmt, LOG.info("Jar not uploaded to master yet. Submitting jar...");
153: Nathan Marz, info, TryStmt, LOG.info("Uploading topology jar " + localJar + " to assigned location: " + uploadLocation);
161: Nathan Marz, info, TryStmt, LOG.info("Successfully uploaded topology jar to assigned location: " + uploadLocation);
63: Nathan Marz, error, CatchClause, LOG.error("Failed to process tuple in batch", e);
287: Nathan Marz, error, CatchClause, LOG.error("Failed to finish batch", e);
118: Nathan Marz, error, CatchClause, LOG.error("Failed to fetch DRPC result from DRPC server", e);
161: Nathan Marz, error, CatchClause, LOG.error("Failed to fail request", e);
62: Nathan Marz, debug, IfStmt, LOG.debug(result.getValue(1).toString());
80: Nathan Marz, error, CatchClause, LOG.error("Failed to return results to DRPC server", e);
33: afeng, info, MethodDeclaration, LOG.info("Storm peer transport plugin:" + transport_plugin_klassName);
49: afeng, debug, IfStmt, LOG.debug("object:" + obj + " method:" + method);
66: flip) Kromer, info, ForeachStmt, LOG.info(sb.toString());
84: afeng, debug, MethodDeclaration, LOG.debug("Simple client transport has been established");
45: afeng, error, CatchClause, LOG.error(x.getMessage(), x);
74: afeng, error, CatchClause, LOG.error("ThriftServer is being stopped due to: " + ex, ex);
50: afeng, info, MethodDeclaration, LOG.info("[req " + context.requestID() + "] Access " + " from: " + (context.remoteAddress() == null ? "null" : context.remoteAddress().toString()) + " principal:" + (context.principal() == null ? "null" : context.principal()) + " op:" + operation + " topoology:" + topology_conf.get(Config.TOPOLOGY_NAME));
50: afeng, info, MethodDeclaration, LOG.info("[req " + context.requestID() + "] Access " + " from: " + (context.remoteAddress() == null ? "null" : context.remoteAddress().toString()) + " principal:" + (context.principal() == null ? "null" : context.principal()) + " op:" + operation + " topoology:" + topology_conf.get(Config.TOPOLOGY_NAME));
90: afeng, debug, IfStmt, LOG.debug("authorization callback");
84: afeng, debug, IfStmt, LOG.debug("password callback");
80: afeng, debug, IfStmt, LOG.debug("name callback");
49: afeng, info, MethodDeclaration, LOG.info("SASL DIGEST-MD5 transport factory will be used");
64: afeng, debug, MethodDeclaration, LOG.debug("SASL DIGEST-MD5 client transport has been established");
86: afeng, debug, MethodDeclaration, LOG.debug("handleNameCallback");
92: afeng, debug, MethodDeclaration, LOG.debug("handlePasswordCallback");
99: afeng, warn, IfStmt, LOG.warn("No password found for user: " + userName);
104: afeng, debug, MethodDeclaration, LOG.debug("handleRealmCallback: " + rc.getDefaultText());
110: afeng, debug, MethodDeclaration, LOG.debug("Successfully authenticated client: authenticationID=" + authenticationID);
53: Nathan Marz, debug, TryStmt, LOG.debug("Blowfish serializer being constructed ...");
85: Nathan Marz, error, CatchClause, LOG.error(ex.getMessage());
98: Nathan Marz, info, IfStmt, LOG.info("Could not find serialization or class for " + serializerClassName + ". Skipping registration...");
115: Jason Jackson, info, IfStmt, LOG.info("Could not find kryo decorator named " + klassName + ". Skipping registration...");
54: Thomas Jack, info, TryStmt, LOG.info("Launched subprocess with pid " + subpid);
107: Thomas Jack, info, IfStmt, LOG.info("Shell msg: " + msg);
103: Nathan Marz, info, TryStmt, LOG.info("Launched subprocess with pid " + subpid);
127: Thomas Jack, info, IfStmt, LOG.info("Shell msg: " + msg);
77: Nathan Marz, warn, CatchClause, LOG.warn("Failed to emit batch for transaction", e);
160: Nathan Marz, warn, CatchClause, LOG.warn("Failed to get metadata for a transaction", e);
112: Yu L Li, info, WhileStmt, LOG.info("Got error from shell process: " + new String(errorReadingBuffer));
104: anfeng, warn, CatchClause, LOG.warn("connection failed", e);
100: anfeng, warn, IfStmt, LOG.warn("Remote address is not reachable. We will close this client.");
96: Brenden Matthews, info, IfStmt, LOG.info("Reconnect ... [{}]", tried_count);
98: anfeng, debug, IfStmt, LOG.debug("connection started...");
84: anfeng, debug, MethodDeclaration, LOG.debug("message received with task: {}, payload size: {}", message.task(), message.message().length);
100: anfeng, info, CatchClause, LOG.info("exception within msg receiving", e);
97: anfeng, debug, TryStmt, LOG.debug("request to be processed: {}", request);
51: anfeng, debug, MethodDeclaration, LOG.debug("connection established to a remote host");
63: anfeng, debug, MethodDeclaration, LOG.debug("send/recv time (ms): {}", (System.currentTimeMillis() - start_time));
68: anfeng, info, BlockStmt, LOG.info("failure response:{}", msg);
109: anfeng, debug, IfStmt, LOG.debug("{} request(s) sent", requests.size());
106: anfeng, info, IfStmt, LOG.info("failed to send requests:", future.getCause());
121: anfeng, info, IfStmt, LOG.info("Connection failed:", cause);
56: anfeng, debug, IfStmt, LOG.debug("Send back response ...");
67: anfeng, info, CatchClause, LOG.info("failed to enqueue a request message", e);
