282: purplefox, info, MethodDeclaration, logger.info("something happened");
283: purplefox, error, MethodDeclaration, logger.error("oops!", exception);
130: purplefox, info, IfStmt, log.info(getVersion());
195: purplefox, info, IfStmt, log.info("Starting clustering...");
208: purplefox, info, IfStmt, log.info("No cluster-host specified so using address " + clusterHost);
205: purplefox, error, IfStmt, log.error("Unable to find a default network interface for clustering. Please specify one using -cluster-host");
237: purplefox, error, CatchClause, log.error("Thread interrupted in startup");
233: purplefox, error, IfStmt, log.error("Timed out in starting clustered Vert.x");
241: purplefox, error, IfStmt, log.error("Failed to form cluster");
284: purplefox, error, IfStmt, log.error("Invalid number of instances");
312: purplefox, error, CatchClause, log.error("-conf option does not point to a file and is not valid JSON: " + confArg);
305: purplefox, error, CatchClause, log.error("Configuration file " + sconf + " does not contain a valid JSON object");
350: purplefox, info, IfStmt, log.info("Succeeded in " + message);
347: purplefox, error, IfStmt, log.error("Failed in " + message, cause);
342: purplefox, error, IfStmt, log.error(ve.getMessage());
344: purplefox, error, IfStmt, log.error(ve.getCause());
369: purplefox, warn, IfStmt, log.warn("No such property to configure on options: " + options.getClass().getName() + "." + fieldName);
388: purplefox, warn, CatchClause, log.warn("Invalid argtype:" + argType + " on options: " + options.getClass().getName() + "." + fieldName);
384: purplefox, warn, IfStmt, log.warn("Invalid type for setter: " + argType);
416: purplefox, error, IfStmt, log.error("Failure in stopping Vert.x", ar.cause());
422: purplefox, error, IfStmt, log.error("Timed out waiting to undeploy all");
550: purplefox, info, MethodDeclaration, log.info(usage);
464: Tim Fox, error, CatchClause, log.error("Failure in interceptor", t);
172: Tim Fox, error, IfStmt, log.error("Failed to propagate registration for handler " + handler + " and address " + address);
189: jzajic, warn, IfStmt, log.warn("Discarding message as more than " + maxBufferedMessages + " buffered in paused consumer. address: " + address);
229: jzajic, error, CatchClause, log.error("Failed to handleMessage. address: " + message.address(), e);
164: Tim Fox, error, IfStmt, log.error(ar2.cause());
156: Tim Fox, error, IfStmt, log.error(asyncResult.cause());
176: Tim Fox, error, IfStmt, log.error("Failed to close server", ar.cause());
248: Tim Fox, error, IfStmt, log.error("Failed to send message", asyncResult.cause());
278: rikard, warn, IfStmt, log.warn("Failed to update subs map with self", addResult.cause());
285: rikard, Error, IfStmt, log.warn("Error removing subs", removeResult.cause());
421: Tim Fox, error, IfStmt, log.error("Failed to remove sub", ar.cause());
70: Thomas Segismont, warn, IfStmt, log.warn("Connecting to server " + serverID + " failed", res.cause());
87: Thomas Segismont, debug, IfStmt, log.debug("Not connected to server " + serverID + " - starting queuing");
110: Thomas Segismont, debug, IfStmt, log.debug("Cluster connection closed for server " + serverID);
121: Tim Fox, warn, LambdaExpr, log.warn("No pong from server " + serverID + " - will consider it dead");
145: Thomas Segismont, debug, IfStmt, log.debug("Draining the queue for server " + serverID);
295: purplefox, error, IfStmt, log.error("Unhandled exception", t);
410: denis, Error, IfStmt, log.error("Error occurred", exc);
38: denis, debug, IfStmt, log.debug("You are running on Windows and POSIX style file permissions are not supported");
50: Alain Penders, debug, IfStmt, log.debug("You are running on Windows and POSIX style file permissions are not supported!");
83: Norman Maurer, debug, IfStmt, log.debug("You are running on Windows and POSIX style file ownership is not supported");
664: purplefox, Error, IfStmt, log.error("Error in websocket handshake", e);
682: Julien Viet, debug, LambdaExpr, log.debug("WebSocket handshake complete");
221: Julien Viet, warn, IfStmt, log.warn("Metrics could not be updated to include bytes written because of unknown object " + msg.getClass() + " being written.");
247: purplefox, error, CatchClause, log.error("Failed to generate shake response", e);
100: Julien Viet, error, IfStmt, log.error("Unrecognised websockets handshake");
402: Julien Viet, error, CatchClause, log.error("Failed to create abs uri", e);
523: Julien Viet, error, IfStmt, log.error("File not found: " + filename);
535: Julien Viet, error, IfStmt, log.error("Failed to send file", e);
267: Thomas Segismont, error, IfStmt, log.error(e);
102: Julien Viet, trace, VariableDeclarator, log.trace("Connection failure", t);
360: purplefox, error, IfStmt, log.error(t);
388: purplefox, error, IfStmt, log.error(future.cause());
649: Julien Viet, trace, BlockStmt, log.trace("Server received request: " + request.getUri());
762: Julien Viet, error, CatchClause, log.error("Failed to generate shake response", e);
969: Julien Viet, warn, IfStmt, log.warn("Cannot perform HTTP/2 upgrade in a worker verticle");
278: denis, error, CatchClause, log.error("Failed to create abs uri", e);
439: Paulo Lopes, error, IfStmt, log.error("File not found: " + filename);
470: purplefox, error, IfStmt, log.error("Failed to send file", e);
104: Julien Viet, DEBUG, IfStmt, frameLogger(new Http2FrameLogger(LogLevel.DEBUG));
348: Julien Viet, debug, IfStmt, log.debug("Attempt to recycle a connection more than permitted");
52: purplefox, warn, IfStmt, log.warn(message, stackTrace);
48: purplefox, warn, IfStmt, log.warn(message);
103: Julien Viet, warn, CatchClause, log.warn("Failed to run close hooks", t);
80: Tim Fox, warn, IfStmt, log.warn("You have disabled TCCL checks but you have a custom TCCL to set.");
336: Julien Viet, error, CatchClause, log.error("Unhandled exception", t);
278: purplefox, error, IfStmt, log.error("Undeploy failed", ar.cause());
435: purplefox, error, IfStmt, log.error(t.getMessage(), t);
450: purplefox, error, CatchClause, log.error("Failure in calling handler", t);
629: purplefox, error, IfStmt, log.error("Failed to run close hook", ar2.cause());
194: purplefox, info, IfStmt, log.info("Quorum not attained. Deployment of verticle will be delayed until there's a quorum.");
217: purplefox, error, IfStmt, log.error("Failed to leave cluster", ar.cause());
278: purplefox, error, IfStmt, log.error("Failed to deploy verticle", asyncResult.cause());
344: purplefox, warn, IfStmt, log.warn("Timed out waiting for group information to appear");
385: purplefox, info, IfStmt, log.info("There is no longer a quorum. Any HA deploymentIDs will be undeployed until a quorum is re-attained");
381: purplefox, info, IfStmt, log.info("A quorum has been obtained. Any deploymentIDs waiting on a quorum will now be deployed");
427: Julien Viet, error, CatchClause, log.error("Failed when checking HA deploymentIDs", t);
451: Julien Viet, error, IfStmt, log.error("Failed to undeploy deployment on lost quorum", result.cause());
442: Julien Viet, info, IfStmt, log.info("Successfully undeployed HA deployment " + deploymentID + "-" + dep.verticleIdentifier() + " as there is no quorum");
447: Julien Viet, error, IfStmt, log.error("Failed to redeploy verticle " + dep.verticleIdentifier() + " after quorum was re-attained", result1.cause());
445: Julien Viet, info, IfStmt, log.info("Successfully redeployed verticle " + dep.verticleIdentifier() + " after quorum was re-attained");
466: Julien Viet, info, IfStmt, log.info("There are " + size + " HA deploymentIDs waiting on a quorum. These will now be deployed");
472: purplefox, error, CatchClause, log.error("Failed to run redeployment task", t);
501: purplefox, error, CatchClause, log.error("Failed to handle failover", t);
486: purplefox, info, IfStmt, log.info("node" + nodeID + " says: Node " + failedNodeID + " has failed. This node will deploy " + deployments.size() + " deploymentIDs from that node.");
557: purplefox, error, IfStmt, log.error("Failed to redeploy verticle after failover", result.cause());
555: purplefox, info, IfStmt, log.info("Successfully redeployed verticle " + verticleName + " after failover");
78: Julien Viet, error, CatchClause, log.error("Caught unexpected Throwable", t);
150: purplefox, warn, IfStmt, log.warn("You're already on a Vert.x context, are you sure you want to create a new Vertx instance?");
195: purplefox, error, IfStmt, log.error("Failed to join cluster", ar.cause());
223: Thomas Segismont, error, IfStmt, log.error("Failed to start event bus", ar.cause());
431: Julien Viet, warn, IfStmt, log.warn("Metrics has been set to enabled but no VertxMetricsFactory found on classpath");
511: Tim Fox, error, IfStmt, log.error("Failed to leave cluster", ar.cause());
553: Julien Viet, error, IfStmt, log.error("Failure in shutting down server", res.cause());
809: Tim Fox, warn, IfStmt, log.warn("Failure in shutting down acceptor event loop group", future.cause());
815: Tim Fox, warn, IfStmt, log.warn("Failure in shutting down event loop group", future.cause());
157: Clement Escoffier, info, IfStmt, log.info("Starting clustering...");
170: Clement Escoffier, info, IfStmt, log.info("No cluster-host specified so using address " + clusterHost);
167: Clement Escoffier, error, IfStmt, log.error("Unable to find a default network interface for clustering. Please specify one using -cluster-host");
197: Clement Escoffier, error, CatchClause, log.error("Thread interrupted in startup");
193: Clement Escoffier, error, IfStmt, log.error("Timed out in starting clustered Vert.x");
202: Clement Escoffier, error, IfStmt, log.error("Failed to form cluster");
265: Clement Escoffier, warn, IfStmt, log.warn("No such property to configure on options: " + options.getClass().getName() + "." + fieldName);
284: Clement Escoffier, warn, CatchClause, log.warn("Invalid argtype:" + argType + " on options: " + options.getClass().getName() + "." + fieldName);
280: Clement Escoffier, warn, IfStmt, log.warn("Invalid type for setter: " + argType);
340: Clement Escoffier, error, IfStmt, log.error("Failure in stopping Vert.x", ar.cause());
346: Clement Escoffier, error, IfStmt, log.error("Timed out waiting to undeploy all");
98: Clement Escoffier, error, CatchClause, log.error("Failed to load or instantiate the isolated deployer", e);
115: Clement Escoffier, error, CatchClause, log.error("Failed to create the vert.x instance", e);
134: Clement Escoffier, error, CatchClause, log.error("Failed to create the vert.x instance", e);
161: Clement Escoffier, error, CatchClause, log.error("Failed to deploy verticle " + verticle, e.getCause());
163: Clement Escoffier, error, CatchClause, log.error("Failed to deploy verticle " + verticle, e);
429: Clement Escoffier, error, CatchClause, log.error("The -conf option does not point to an existing file or is not a valid JSON object");
421: Clement Escoffier, error, CatchClause, log.error("Configuration file " + sconf + " does not contain a valid JSON object");
42: Clement Escoffier, info, MethodDeclaration, log.info(getVersion());
55: Clement Escoffier, info, IfStmt, log.info("Succeeded in undeploying " + deploymentId);
53: Clement Escoffier, error, IfStmt, log.error("Failed in undeploying " + deploymentId, res.cause());
81: Clement Escoffier, info, IfStmt, log.info("Succeeded in " + message);
77: Clement Escoffier, error, IfStmt, log.error("Failed in " + message, cause);
72: Clement Escoffier, error, IfStmt, log.error(ve.getMessage());
74: Clement Escoffier, error, IfStmt, log.error(ve.getCause());
76: Clement Escoffier, info, ConstructorDeclaration, LOGGER.info("Watched paths: " + this.roots);
183: Clement Escoffier, trace, IfStmt, LOGGER.trace("File: " + currFile + " has been modified");
176: Clement Escoffier, trace, IfStmt, LOGGER.trace("File: " + currFile + " has been deleted");
198: Clement Escoffier, trace, IfStmt, LOGGER.trace("File was added: " + newFile);
240: Clement Escoffier, warn, IfStmt, LOGGER.warn("A change in " + file.getAbsolutePath() + " has been detected, but the file does not belong to a " + "watched roots: " + roots);
268: Clement Escoffier, info, MethodDeclaration, LOGGER.info("Starting the vert.x application in redeploy mode");
278: Clement Escoffier, info, MethodDeclaration, LOGGER.info("Stopping redeployment");
299: Clement Escoffier, error, CatchClause, LOGGER.error("An error have been encountered while watching resources - leaving the redeploy mode", e);
309: Clement Escoffier, info, MethodDeclaration, LOGGER.info("Redeploying!");
317: Clement Escoffier, info, LambdaExpr, LOGGER.info("Redeployment done in " + (end - begin) + " ms.");
345: Clement Escoffier, Error, CatchClause, LOGGER.error("Error while executing the on-redeploy command : '" + cmd + "'", e);
343: Clement Escoffier, info, TryStmt, LOGGER.info("User command terminated with status " + status);
110: purplefox, warn, ForeachStmt, log.warn(d);
105: Julien Viet, info, IfStmt, log.info(d);
70: nscavell, WARN, MethodDeclaration, log(Level.WARNING, message);
75: Manish Kumar, WARN, MethodDeclaration, log(Level.WARNING, message, null, params);
79: nscavell, WARN, MethodDeclaration, log(Level.WARNING, message, t);
84: Manish Kumar, WARN, MethodDeclaration, log(Level.WARNING, message, t, params);
88: nscavell, INFO, MethodDeclaration, log(Level.INFO, message);
93: Manish Kumar, INFO, MethodDeclaration, log(Level.INFO, message, null, params);
97: nscavell, INFO, MethodDeclaration, log(Level.INFO, message, t);
102: Manish Kumar, INFO, MethodDeclaration, log(Level.INFO, message, t, params);
47: Clement Escoffier, FATAL, MethodDeclaration, log(Level.FATAL, message);
51: Clement Escoffier, FATAL, MethodDeclaration, log(Level.FATAL, message, t);
55: Clement Escoffier, ERROR, MethodDeclaration, log(Level.ERROR, message);
60: Clement Escoffier, ERROR, MethodDeclaration, log(Level.ERROR, message.toString(), params);
64: Clement Escoffier, ERROR, MethodDeclaration, log(Level.ERROR, message, t);
69: Clement Escoffier, ERROR, MethodDeclaration, log(Level.ERROR, message.toString(), t, params);
73: Clement Escoffier, WARN, MethodDeclaration, log(Level.WARN, message);
78: Clement Escoffier, WARN, MethodDeclaration, log(Level.WARN, message.toString(), params);
82: Clement Escoffier, WARN, MethodDeclaration, log(Level.WARN, message, t);
87: Clement Escoffier, WARN, MethodDeclaration, log(Level.WARN, message.toString(), t, params);
91: Clement Escoffier, INFO, MethodDeclaration, log(Level.INFO, message);
96: Clement Escoffier, INFO, MethodDeclaration, log(Level.INFO, message.toString(), params);
100: Clement Escoffier, INFO, MethodDeclaration, log(Level.INFO, message, t);
105: Clement Escoffier, INFO, MethodDeclaration, log(Level.INFO, message.toString(), t, params);
109: Clement Escoffier, DEBUG, MethodDeclaration, log(Level.DEBUG, message);
114: Clement Escoffier, DEBUG, MethodDeclaration, log(Level.DEBUG, message.toString(), params);
118: Clement Escoffier, DEBUG, MethodDeclaration, log(Level.DEBUG, message, t);
123: Clement Escoffier, DEBUG, MethodDeclaration, log(Level.DEBUG, message.toString(), t, params);
127: Clement Escoffier, TRACE, MethodDeclaration, log(Level.TRACE, message);
132: Clement Escoffier, TRACE, MethodDeclaration, log(Level.TRACE, message.toString(), params);
136: Clement Escoffier, TRACE, MethodDeclaration, log(Level.TRACE, message.toString(), t);
141: alexlehm, TRACE, MethodDeclaration, log(Level.TRACE, message.toString(), t, params);
44: nscavell, FATAL, MethodDeclaration, log(Level.FATAL, message);
48: nscavell, FATAL, MethodDeclaration, log(Level.FATAL, message, t);
52: nscavell, ERROR, MethodDeclaration, log(Level.ERROR, message);
61: nscavell, ERROR, MethodDeclaration, log(Level.ERROR, message, t);
70: nscavell, WARN, MethodDeclaration, log(Level.WARN, message);
79: nscavell, WARN, MethodDeclaration, log(Level.WARN, message, t);
88: nscavell, INFO, MethodDeclaration, log(Level.INFO, message);
97: nscavell, INFO, MethodDeclaration, log(Level.INFO, message, t);
106: nscavell, DEBUG, MethodDeclaration, log(Level.DEBUG, message);
115: nscavell, DEBUG, MethodDeclaration, log(Level.DEBUG, message, t);
124: nscavell, TRACE, MethodDeclaration, log(Level.TRACE, message);
133: nscavell, TRACE, MethodDeclaration, log(Level.TRACE, message, t);
186: Clement Escoffier, trace, SwitchStmt, logger.trace(msg, parameters);
189: Clement Escoffier, debug, SwitchStmt, logger.debug(msg, parameters);
192: Clement Escoffier, info, SwitchStmt, logger.info(msg, parameters);
195: Clement Escoffier, warn, SwitchStmt, logger.warn(msg, parameters);
198: Clement Escoffier, error, SwitchStmt, logger.error(msg, parameters);
218: Jens Reimann, error, IfStmt, log.error("Unhandled exception", t);
217: Julien Viet, debug, LambdaExpr, log.debug("Failed to create connection. Will retry in " + options.getReconnectInterval() + " milliseconds");
202: Julien Viet, error, IfStmt, log.error("Client from origin " + ch.remoteAddress() + " failed to connect over ssl: " + future.cause());
245: Julien Viet, error, IfStmt, log.error(t);
222: Julien Viet, trace, IfStmt, log.trace("Net server listening on " + (hostOrPath) + ":" + ch.localAddress());
279: Julien Viet, error, IfStmt, log.error("Failed to listen", res.cause());
255: purplefox, error, IfStmt, log.error("Failed to send file", e);
317: Radoslaw Busz, error, IfStmt, log.error(future.cause());
414: Philipp Lehmann, warn, IfStmt, log.warn("no SSL/TLS protocols are enabled due to configuration restrictions");
46: Julien Viet, info, CatchClause, logger.info("Using the default address resolver as the dns resolver could not be loaded");
27: Bartek Zdanowski, info, MethodDeclaration, LoggerFactory.getLogger(getClass()).info("I'm inside anonymous class");
55: purplefox, info, MethodDeclaration, log.info("Starting test: " + this.getClass().getSimpleName() + "#" + name.getMethodName());
75: Thomas Segismont, error, IfStmt, log.error("Unexpected error during ping (id=" + id + ")", cause);
154: alexlehm, debug, LambdaExpr, log.debug("exception", e);
2733: alexlehm, warn, IfStmt, log.warn("failed", ar2.cause());
2866: alexlehm, warn, IfStmt, log.warn("failed", ar2.cause());
2895: alexlehm, warn, IfStmt, log.warn("failed", ar2.cause());
2925: alexlehm, warn, IfStmt, log.warn("failed", ar2.cause());
2954: alexlehm, warn, IfStmt, log.warn("failed", ar2.cause());
116: alexlehm, info, LambdaExpr, log.info("request is supposed to fail but response is " + resp.statusCode() + " " + resp.statusMessage());
72: alexlehm, debug, LambdaExpr, log.debug("got request: " + toHex(buffer));
92: alexlehm, debug, IfStmt, log.debug("connect: " + host + ":" + port);
100: alexlehm, debug, IfStmt, log.debug("connecting to " + host + ":" + port);
113: alexlehm, error, IfStmt, log.error("exception", result.cause());
115: alexlehm, debug, IfStmt, log.debug("writing: " + toHex(errorResponse));
104: alexlehm, debug, IfStmt, log.debug("writing: " + toHex(connectResponse));
106: alexlehm, debug, IfStmt, log.debug("connected, starting pump");
80: alexlehm, debug, IfStmt, log.debug("auth failed");
81: alexlehm, debug, IfStmt, log.debug("writing: " + toHex(errorResponse));
124: alexlehm, debug, LambdaExpr, log.debug("socks4a server started");
81: alexlehm, debug, LambdaExpr, log.debug("got request: " + toHex(buffer));
101: Philipp Lehmann, debug, IfStmt, log.debug("string len " + stringLen);
110: alexlehm, debug, LambdaExpr, log.debug("got request: " + toHex(buffer2));
111: alexlehm, debug, LambdaExpr, log.debug("connect: " + host + ":" + port);
119: alexlehm, debug, LambdaExpr, log.debug("connecting to " + host + ":" + port);
132: alexlehm, error, IfStmt, log.error("exception", result.cause());
134: alexlehm, debug, IfStmt, log.debug("writing: " + toHex(errorResponse));
123: alexlehm, debug, IfStmt, log.debug("writing: " + toHex(connectResponse));
125: alexlehm, debug, IfStmt, log.debug("connected, starting pump");
165: alexlehm, debug, IfStmt, log.debug("writing: " + toHex(serverReply));
143: alexlehm, debug, LambdaExpr, log.debug("auth handler");
144: alexlehm, debug, LambdaExpr, log.debug("got request: " + toHex(buffer3));
157: alexlehm, debug, IfStmt, log.debug("writing: " + toHex(authSuccess));
150: alexlehm, debug, IfStmt, log.debug("expected " + toHex(authReply) + ", got " + toHex(buffer3));
152: alexlehm, debug, IfStmt, log.debug("writing: " + toHex(authFailed));
161: alexlehm, debug, IfStmt, log.debug("writing: " + toHex(serverReplyAuth));
171: alexlehm, debug, LambdaExpr, log.debug("socks5 server started");
96: Thomas Segismont, error, IfStmt, log.error("Failed to shutdown vert.x", ar.cause());
61: Clement Escoffier, info, LambdaExpr, logger.info("hello");
66: Clement Escoffier, info, LambdaExpr, logger.info("exception", new NullPointerException());
74: Clement Escoffier, info, LambdaExpr, logger.info("hello {0} and {1}", "Paulo", "Julien");
80: Clement Escoffier, info, LambdaExpr, logger.info("hello {0}", "vert.x");
86: Clement Escoffier, info, LambdaExpr, logger.info("hello {0} - {1}", "vert.x");
92: Clement Escoffier, info, LambdaExpr, logger.info("hello {0}", "vert.x", "foo");
98: Clement Escoffier, info, LambdaExpr, logger.info("{0}, an exception has been thrown", new IllegalStateException(), "Luke");
105: Clement Escoffier, info, LambdaExpr, logger.info("{0}, an exception has been thrown", "Luke", new IllegalStateException());
115: Clement Escoffier, error, LambdaExpr, logger.error("hello");
120: Clement Escoffier, error, LambdaExpr, logger.error("exception", new NullPointerException());
127: Clement Escoffier, error, LambdaExpr, logger.error("hello {0} and {1}", "Paulo", "Julien");
133: Clement Escoffier, error, LambdaExpr, logger.error("hello {0}", "vert.x");
139: Clement Escoffier, error, LambdaExpr, logger.error("hello {0} - {1}", "vert.x");
145: Clement Escoffier, error, LambdaExpr, logger.error("hello {0}", "vert.x", "foo");
151: Clement Escoffier, error, LambdaExpr, logger.error("{0}, an exception has been thrown", new IllegalStateException(), "Luke");
158: Clement Escoffier, error, LambdaExpr, logger.error("{0}, an exception has been thrown", "Luke", new IllegalStateException());
168: Clement Escoffier, warn, LambdaExpr, logger.warn("hello");
173: Clement Escoffier, warn, LambdaExpr, logger.warn("exception", new NullPointerException());
180: Clement Escoffier, warn, LambdaExpr, logger.warn("hello {0} and {1}", "Paulo", "Julien");
186: Clement Escoffier, warn, LambdaExpr, logger.warn("hello {0}", "vert.x");
192: Clement Escoffier, warn, LambdaExpr, logger.warn("hello {0} - {1}", "vert.x");
198: Clement Escoffier, warn, LambdaExpr, logger.warn("hello {0}", "vert.x", "foo");
204: Clement Escoffier, warn, LambdaExpr, logger.warn("{0}, an exception has been thrown", new IllegalStateException(), "Luke");
211: Clement Escoffier, warn, LambdaExpr, logger.warn("{0}, an exception has been thrown", "Luke", new IllegalStateException());
66: Clement Escoffier, info, LambdaExpr, logger.info("hello");
70: Clement Escoffier, info, LambdaExpr, logger.info("exception", new NullPointerException());
76: Clement Escoffier, info, LambdaExpr, logger.info("hello {} and {}", "Paulo", "Julien");
81: Clement Escoffier, info, LambdaExpr, logger.info("hello {}", "vert.x");
87: Clement Escoffier, info, LambdaExpr, logger.info("hello {} - {}", "vert.x");
92: Julien Viet, info, LambdaExpr, logger.info("hello {} {}", "vert.x", "foo");
97: Clement Escoffier, info, LambdaExpr, logger.info("{}, an exception has been thrown", new IllegalStateException(), "Luke");
103: Clement Escoffier, info, LambdaExpr, logger.info("{}, an exception has been thrown", "Luke", new IllegalStateException());
113: Clement Escoffier, error, LambdaExpr, logger.error("hello");
117: Clement Escoffier, error, LambdaExpr, logger.error("exception", new NullPointerException());
123: Clement Escoffier, error, LambdaExpr, logger.error("hello {} and {}", "Paulo", "Julien");
128: Clement Escoffier, error, LambdaExpr, logger.error("hello {}", "vert.x");
133: Clement Escoffier, error, LambdaExpr, logger.error("hello {} - {}", "vert.x");
138: Julien Viet, error, LambdaExpr, logger.error("hello {} {}", "vert.x", "foo");
144: Clement Escoffier, error, LambdaExpr, logger.error("{}, an exception has been thrown", new IllegalStateException(), "Luke");
150: Clement Escoffier, error, LambdaExpr, logger.error("{}, an exception has been thrown", "Luke", new IllegalStateException());
160: Clement Escoffier, warn, LambdaExpr, logger.warn("hello");
164: Clement Escoffier, warn, LambdaExpr, logger.warn("exception", new NullPointerException());
170: Clement Escoffier, warn, LambdaExpr, logger.warn("hello {} and {}", "Paulo", "Julien");
175: Clement Escoffier, warn, LambdaExpr, logger.warn("hello {}", "vert.x");
180: Clement Escoffier, warn, LambdaExpr, logger.warn("hello {} - {}", "vert.x");
185: Julien Viet, warn, LambdaExpr, logger.warn("hello {} {}", "vert.x", "foo");
191: Clement Escoffier, warn, LambdaExpr, logger.warn("{}, an exception has been thrown", new IllegalStateException(), "Luke");
197: Clement Escoffier, warn, LambdaExpr, logger.warn("{}, an exception has been thrown", "Luke", new IllegalStateException());
211: alexlehm, warn, MethodDeclaration, logger.warn("hello");
79: Clement Escoffier, info, MethodDeclaration, String result = record(() -> logger.info("hello"));
82: Clement Escoffier, info, MethodDeclaration, result = record(() -> logger.info("exception", new NullPointerException()));
86: Clement Escoffier, info, MethodDeclaration, result = record(() -> logger.info("hello {} and {}", "Paulo", "Julien"));
89: Clement Escoffier, info, MethodDeclaration, result = record(() -> logger.info("hello {}", "vert.x"));
92: Clement Escoffier, info, MethodDeclaration, result = record(() -> logger.info("hello {} - {}", "vert.x"));
95: Clement Escoffier, info, MethodDeclaration, result = record(() -> logger.info("hello {}", "vert.x", "foo"));
98: Clement Escoffier, info, MethodDeclaration, result = record(() -> logger.info("{}, an exception has been thrown", new IllegalStateException(), "Luke"));
102: Clement Escoffier, info, MethodDeclaration, result = record(() -> logger.info("{}, an exception has been thrown", "Luke", new IllegalStateException()));
118: Clement Escoffier, error, MethodDeclaration, String result = record(() -> logger.error("hello"));
121: Clement Escoffier, error, MethodDeclaration, result = record(() -> logger.error("exception", new NullPointerException()));
125: Clement Escoffier, error, MethodDeclaration, result = record(() -> logger.error("hello {} and {}", "Paulo", "Julien"));
128: Clement Escoffier, error, MethodDeclaration, result = record(() -> logger.error("hello {}", "vert.x"));
131: Clement Escoffier, error, MethodDeclaration, result = record(() -> logger.error("hello {} - {}", "vert.x"));
134: Clement Escoffier, error, MethodDeclaration, result = record(() -> logger.error("hello {}", "vert.x", "foo"));
137: Clement Escoffier, error, MethodDeclaration, result = record(() -> logger.error("{}, an exception has been thrown", new IllegalStateException(), "Luke"));
141: Clement Escoffier, error, MethodDeclaration, result = record(() -> logger.error("{}, an exception has been thrown", "Luke", new IllegalStateException()));
162: Clement Escoffier, warn, MethodDeclaration, String result = record(() -> logger.warn("hello"));
165: Clement Escoffier, warn, MethodDeclaration, result = record(() -> logger.warn("exception", new NullPointerException()));
169: Clement Escoffier, warn, MethodDeclaration, result = record(() -> logger.warn("hello {} and {}", "Paulo", "Julien"));
172: Clement Escoffier, warn, MethodDeclaration, result = record(() -> logger.warn("hello {}", "vert.x"));
175: Clement Escoffier, warn, MethodDeclaration, result = record(() -> logger.warn("hello {} - {}", "vert.x"));
178: Clement Escoffier, warn, MethodDeclaration, result = record(() -> logger.warn("hello {}", "vert.x", "foo"));
181: Clement Escoffier, warn, MethodDeclaration, result = record(() -> logger.warn("{}, an exception has been thrown", new IllegalStateException(), "Luke"));
185: Clement Escoffier, warn, MethodDeclaration, result = record(() -> logger.warn("{}, an exception has been thrown", "Luke", new IllegalStateException()));
