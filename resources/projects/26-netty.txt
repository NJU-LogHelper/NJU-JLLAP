52: Norman Maurer, debug, IfStmt, logger.debug("-D{}: {}", PROP_MODE, checkAccessible);
47: Matteo Merli, debug, IfStmt, logger.debug("-D{}: {}", PROP_ACQUIRE_AND_RELEASE_ONLY, ACQUIRE_AND_RELEASE_ONLY);
86: Trustin Lee, debug, IfStmt, logger.debug("-Dio.netty.allocator.type: pooled (unknown: {})", allocType);
83: Trustin Lee, debug, IfStmt, logger.debug("-Dio.netty.allocator.type: {}", allocType);
80: Trustin Lee, debug, IfStmt, logger.debug("-Dio.netty.allocator.type: {}", allocType);
92: Norman Maurer, debug, InitializerDeclaration, logger.debug("-Dio.netty.threadLocalDirectBufferSize: {}", THREAD_LOCAL_BUFFER_SIZE);
95: Norman Maurer, debug, InitializerDeclaration, logger.debug("-Dio.netty.maxThreadLocalCharBufferSize: {}", MAX_CHAR_BUFFER_SIZE);
120: Trustin Lee, debug, IfStmt, logger.debug("-Dio.netty.allocator.numHeapArenas: {}", DEFAULT_NUM_HEAP_ARENA);
121: Trustin Lee, debug, IfStmt, logger.debug("-Dio.netty.allocator.numDirectArenas: {}", DEFAULT_NUM_DIRECT_ARENA);
125: Trustin Lee, debug, IfStmt, logger.debug("-Dio.netty.allocator.pageSize: {}", DEFAULT_PAGE_SIZE, pageSizeFallbackCause);
123: Trustin Lee, debug, IfStmt, logger.debug("-Dio.netty.allocator.pageSize: {}", DEFAULT_PAGE_SIZE);
130: Trustin Lee, debug, IfStmt, logger.debug("-Dio.netty.allocator.maxOrder: {}", DEFAULT_MAX_ORDER, maxOrderFallbackCause);
128: Trustin Lee, debug, IfStmt, logger.debug("-Dio.netty.allocator.maxOrder: {}", DEFAULT_MAX_ORDER);
132: Trustin Lee, debug, IfStmt, logger.debug("-Dio.netty.allocator.chunkSize: {}", DEFAULT_PAGE_SIZE << DEFAULT_MAX_ORDER);
133: Norman Maurer, debug, IfStmt, logger.debug("-Dio.netty.allocator.tinyCacheSize: {}", DEFAULT_TINY_CACHE_SIZE);
134: Norman Maurer, debug, IfStmt, logger.debug("-Dio.netty.allocator.smallCacheSize: {}", DEFAULT_SMALL_CACHE_SIZE);
135: Norman Maurer, debug, IfStmt, logger.debug("-Dio.netty.allocator.normalCacheSize: {}", DEFAULT_NORMAL_CACHE_SIZE);
136: Norman Maurer, debug, IfStmt, logger.debug("-Dio.netty.allocator.maxCachedBufferCapacity: {}", DEFAULT_MAX_CACHED_BUFFER_CAPACITY);
137: Trustin Lee, debug, IfStmt, logger.debug("-Dio.netty.allocator.cacheTrimInterval: {}", DEFAULT_CACHE_TRIM_INTERVAL);
138: ming.ma, debug, IfStmt, logger.debug("-Dio.netty.allocator.useCacheForAllThreads: {}", DEFAULT_USE_CACHE_FOR_ALL_THREADS);
234: Norman Maurer, debug, IfStmt, logger.debug("Freed {} thread-local buffer(s) from thread: {}", numFreed, Thread.currentThread().getName());
149: Idel Pivnitskiy, warn, IfStmt, logger.warn("The latest versions of LZMA libraries (for example, XZ Utils) " + "has an additional requirement: lc + lp <= 4. Data which don't follow " + "this requirement cannot be decompressed with this libraries.");
39: Norman Maurer, debug, InitializerDeclaration, logger.debug("-Dio.netty.noJdkZlibDecoder: {}", noJdkZlibDecoder);
42: Trustin Lee, debug, InitializerDeclaration, logger.debug("-Dio.netty.noJdkZlibEncoder: {}", noJdkZlibEncoder);
330: Stephane Landelle, debug, IfStmt, logger.debug("Skipping cookie with null name");
335: Stephane Landelle, debug, IfStmt, logger.debug("Skipping cookie with null value");
341: Stephane Landelle, debug, IfStmt, logger.debug("Skipping cookie because starting quotes are not properly balanced in '{}'", unwrappedValue);
349: Stephane Landelle, debug, IfStmt, logger.debug("Skipping cookie because name '{}' contains invalid char '{}'", name, name.charAt(invalidOctetPos));
359: Stephane Landelle, debug, IfStmt, logger.debug("Skipping cookie because value '{}' contains invalid char '{}'", unwrappedValue, unwrappedValue.charAt(invalidOctetPos));
268: Bryce Anderson, debug, IfStmt, logger.debug("Failed to send a 413 Request Entity Too Large.", future.cause());
258: Bryce Anderson, debug, IfStmt, logger.debug("Failed to send a 413 Request Entity Too Large.", future.cause());
42: Stephane Landelle, debug, IfStmt, logger.debug("Skipping cookie with null name");
47: Stephane Landelle, debug, IfStmt, logger.debug("Skipping cookie with null value");
54: Stephane Landelle, debug, IfStmt, logger.debug("Skipping cookie because starting quotes are not properly balanced in '{}'", wrappedValue);
64: Stephane Landelle, debug, IfStmt, logger.debug("Skipping cookie because name '{}' contains invalid char '{}'", name, name.charAt(invalidOctetPos));
74: Stephane Landelle, debug, IfStmt, logger.debug("Skipping cookie because value '{}' contains invalid char '{}'", unwrappedValue, unwrappedValue.charAt(invalidOctetPos));
160: Trustin Lee, debug, IfStmt, logger.debug("Request origin [{}]] was not among the configured origins [{}]", origin, config.origins());
240: Trustin Lee, warn, IfStmt, logger.warn("Failed to delete: {}", file);
256: Trustin Lee, warn, CatchClause, logger.warn("Failed to close a file.", e);
263: Trustin Lee, warn, IfStmt, logger.warn("Failed to delete: {}", file);
377: scottmitch, warn, IfStmt, logger.warn("Multiple exceptions detected, the following will be suppressed {}", e);
388: scottmitch, warn, IfStmt, logger.warn("Multiple exceptions detected, the following will be suppressed {}", e);
405: Trustin Lee, warn, IfStmt, logger.warn("Failed to delete: {}", dest);
398: Trustin Lee, warn, IfStmt, logger.warn("Failed to delete: {}", file);
174: Trustin Lee, debug, IfStmt, logger.debug("Decoding WebSocket Frame opCode={}", frameOpcode);
282: Trustin Lee, debug, IfStmt, logger.debug("Decoding WebSocket Frame length={}", framePayloadLength);
130: Trustin Lee, debug, IfStmt, logger.debug("Encoding WebSocket Frame opCode=" + opcode + " length=" + length);
139: Trustin Lee, debug, IfStmt, logger.debug("WebSocket version 07 client handshake key: {}, expected response: {}", key, expectedChallengeResponseString);
140: Trustin Lee, debug, IfStmt, logger.debug("WebSocket version 08 client handshake key: {}, expected response: {}", key, expectedChallengeResponseString);
140: Trustin Lee, debug, IfStmt, logger.debug("WebSocket version 13 client handshake key: {}, expected response: {}", key, expectedChallengeResponseString);
165: Dao Ngoc, debug, IfStmt, logger.debug("{} WebSocket version {} server handshake", channel, version());
247: Norman Maurer, debug, IfStmt, logger.debug("{} WebSocket version {} server handshake", channel, version());
140: Trustin Lee, debug, IfStmt, logger.debug("Requested subprotocol(s) not supported: {}", subprotocols);
139: Dao Ngoc, debug, IfStmt, logger.debug("WebSocket version 07 server handshake key: {}, response: {}.", key, accept);
151: Trustin Lee, debug, IfStmt, logger.debug("Requested subprotocol(s) not supported: {}", subprotocols);
138: Trustin Lee, debug, IfStmt, logger.debug("WebSocket version 08 server handshake key: {}, response: {}", key, accept);
150: Trustin Lee, debug, IfStmt, logger.debug("Requested subprotocol(s) not supported: {}", subprotocols);
136: Trustin Lee, debug, IfStmt, logger.debug("WebSocket version 13 server handshake key: {}, response: {}", key, accept);
148: Trustin Lee, debug, IfStmt, logger.debug("Requested subprotocol(s) not supported: {}", subprotocols);
285: Jeff Pinner, info, MethodDeclaration, logger.info("Running: testSpdyClientSessionHandler v3.1");
291: Jeff Pinner, info, MethodDeclaration, logger.info("Running: testSpdyClientSessionHandlerPing v3.1");
297: Jeff Pinner, info, MethodDeclaration, logger.info("Running: testSpdyClientSessionHandlerGoAway v3.1");
303: Jeff Pinner, info, MethodDeclaration, logger.info("Running: testSpdyServerSessionHandler v3.1");
309: Jeff Pinner, info, MethodDeclaration, logger.info("Running: testSpdyServerSessionHandlerPing v3.1");
315: Jeff Pinner, info, MethodDeclaration, logger.info("Running: testSpdyServerSessionHandlerGoAway v3.1");
234: Scott Mitchell, error, CatchClause, logger.error("Caught Throwable from listener onGoAwayReceived.", cause);
265: Scott Mitchell, error, CatchClause, logger.error("Caught Throwable from listener onGoAwaySent.", cause);
311: Scott Mitchell, error, CatchClause, logger.error("Caught Throwable from listener onStreamRemoved.", cause);
341: Scott Mitchell, error, CatchClause, logger.error("Caught Throwable from listener onStreamHalfClosed.", cause);
351: Scott Mitchell, error, CatchClause, logger.error("Caught Throwable from listener onStreamClosed.", cause);
797: Scott Mitchell, error, CatchClause, logger.error("Caught Throwable from listener onStreamAdded.", cause);
983: Scott Mitchell, error, CatchClause, logger.error("Caught Throwable from listener onStreamActive.", cause);
1017: Scott Mitchell, error, CatchClause, logger.error("Caught Throwable while processing pending ActiveStreams$Event.", cause);
539: Scott Mitchell, info, IfStmt, logger.info("{} ignoring {} frame for stream {} {}", ctx.channel(), frameName, stream.isResetSent() ? "RST_STREAM sent." : ("Stream created after GOAWAY sent. Last known stream by peer " + connection.remote().lastStreamKnownByPeer()));
528: Scott Mitchell, info, IfStmt, logger.info("{} ignoring {} frame for stream {}. Stream sent after GOAWAY sent", ctx.channel(), frameName, streamId);
750: Scott Mitchell, error, CatchClause, logger.error("Caught Throwable from listener.writabilityChanged", cause);
904: Scott Mitchell, debug, IfStmt, logger.debug("{} Sending GOAWAY failed: lastStreamId '{}', errorCode '{}', " + "debugData '{}'. Forcing shutdown of the connection.", ctx.channel(), lastStreamId, errorCode, debugData.toString(UTF_8), future.cause());
896: Trustin Lee, debug, IfStmt, logger.debug("{} Sent GOAWAY: lastStreamId '{}', errorCode '{}', " + "debugData '{}'. Forcing shutdown of the connection.", ctx.channel(), lastStreamId, errorCode, debugData.toString(UTF_8), future.cause());
468: Norman Maurer, warn, IfStmt, LOG.warn("Stream exception thrown without stream object attached.", cause);
483: Norman Maurer, warn, MethodDeclaration, LOG.warn("Stream exception thrown for unkown stream {}.", streamException.streamId(), cause);
141: Norman Maurer, Error, CatchClause, logger.info("Error during upgrade to HTTP/2", cause);
197: Norman Maurer, warn, CatchClause, logger.warn("Failed to set channel option '{}' with value '{}' for channel '{}'", option, value, channel, t);
194: Norman Maurer, warn, IfStmt, logger.warn("Unknown channel option '{}' for channel '{}'", option, channel);
127: buchgr, TRACE, MethodDeclaration, frameCodec = frameCodecBuilder.frameWriter(frameWriter).frameLogger(new Http2FrameLogger(LogLevel.TRACE)).initialSettings(initialRemoteSettings).build();
96: Trustin Lee, debug, MethodDeclaration, logger.debug("{} Protocol version: {}({})", ctx.channel(), version);
101: Trustin Lee, debug, IfStmt, logger.debug("{} Unknown protocol version: {}", ctx.channel(), versionVal & 0xFF);
29: Prajwal Tuladhar, debug, MethodDeclaration, logger.debug("Testing SocksAuthResponseDecoder with authStatus: " + authStatus);
35: Prajwal Tuladhar, debug, MethodDeclaration, logger.debug("Testing cmdType: " + cmdType + " addressType: " + addressType + " host: " + host + " port: " + port);
30: alexey, debug, MethodDeclaration, logger.debug("Testing cmdStatus: " + cmdStatus + " addressType: " + addressType);
29: bk1te, debug, MethodDeclaration, logger.debug("Testing cmdStatus: " + cmdStatus);
31: Trustin Lee, debug, MethodDeclaration, logger.debug("Testing type: " + type + " dstAddr: " + dstAddr + " dstPort: " + dstPort + " userId: " + userId);
37: Trustin Lee, debug, MethodDeclaration, logger.debug("Testing type: " + type + " dstAddrType: " + dstAddrType + " dstAddr: " + dstAddr + " dstPort: " + dstPort);
47: Trustin Lee, debug, MethodDeclaration, logger.debug("Testing status: " + status + " bndAddrType: " + bndAddrType);
30: Trustin Lee, debug, MethodDeclaration, logger.debug("Testing Socks5PasswordAuthResponseDecoder with status: " + status);
441: Scott Mitchell, error, MethodDeclaration, logger.error("You are creating too many " + resourceType + " instances. " + resourceType + " is a shared resource that must be reused across the JVM," + "so that only a few instances are created.");
528: Norman Maurer, warn, IfStmt, logger.warn("An exception was thrown while process a cancellation task", t);
671: Trustin Lee, warn, IfStmt, logger.warn("An exception was thrown by " + TimerTask.class.getSimpleName() + '.', t);
139: Trustin Lee, debug, InitializerDeclaration, logger.debug("-Djava.net.preferIPv4Stack: {}", IPV4_PREFERRED);
140: Trustin Lee, debug, InitializerDeclaration, logger.debug("-Djava.net.preferIPv6Addresses: {}", IPV6_ADDRESSES_PREFERRED);
179: Trustin Lee, warn, CatchClause, logger.warn("Failed to retrieve the list of available network interfaces", e);
218: Trustin Lee, warn, CatchClause, logger.warn("Failed to find the loopback interface", e);
215: Trustin Lee, warn, IfStmt, logger.warn("Failed to find the loopback interface");
240: Trustin Lee, debug, IfStmt, logger.debug("Using hard-coded IPv4 localhost address: {}", localhost4);
233: Trustin Lee, debug, IfStmt, logger.debug("Using hard-coded IPv6 localhost address: {}", localhost6);
224: Trustin Lee, debug, IfStmt, logger.debug("Loopback interface: {} ({}, {})", loopbackIface.getName(), loopbackIface.getDisplayName(), loopbackAddr.getHostAddress());
294: Scott Mitchell, debug, CatchClause, logger.debug("Failed to get SOMAXCONN from sysctl and file {}. Default: {}", file, somaxconn, e);
289: Scott Mitchell, debug, IfStmt, logger.debug("Failed to get SOMAXCONN from sysctl and file {}. Default: {}", file, somaxconn);
271: Norman Maurer, debug, IfStmt, logger.debug("{}: {}", file, somaxconn);
97: Norman Maurer, debug, IfStmt, logger.debug("-Dio.netty.recycler.maxCapacityPerThread: {}", DEFAULT_MAX_CAPACITY_PER_THREAD);
98: Norman Maurer, debug, IfStmt, logger.debug("-Dio.netty.recycler.maxSharedCapacityFactor: {}", MAX_SHARED_CAPACITY_FACTOR);
99: Norman Maurer, debug, IfStmt, logger.debug("-Dio.netty.recycler.linkCapacity: {}", LINK_CAPACITY);
100: Norman Maurer, debug, IfStmt, logger.debug("-Dio.netty.recycler.ratio: {}", RATIO);
92: Norman Maurer, debug, IfStmt, logger.debug("-Dio.netty.recycler.maxCapacityPerThread: disabled");
93: Norman Maurer, debug, IfStmt, logger.debug("-Dio.netty.recycler.maxSharedCapacityFactor: disabled");
94: Norman Maurer, debug, IfStmt, logger.debug("-Dio.netty.recycler.linkCapacity: disabled");
95: Norman Maurer, debug, IfStmt, logger.debug("-Dio.netty.recycler.ratio: disabled");
115: Norman Maurer, warn, CatchClause, logger.warn("Failed to release a message: {}", msg, t);
131: Norman Maurer, warn, IfStmt, logger.warn("Failed to release a message: {} (decrement: {})", msg, decrement, t);
193: Trustin Lee, warn, CatchClause, logger.warn("Failed to release an object: {}", obj, ex);
190: Trustin Lee, debug, IfStmt, logger.debug("Released: {}", this);
188: Trustin Lee, warn, IfStmt, logger.warn("Non-zero refCnt: {}", this);
100: Trustin Lee, debug, IfStmt, logger.debug("-Dio.netty.noResourceLeakDetection: {}", disabled);
101: Trustin Lee, warn, IfStmt, logger.warn("-Dio.netty.noResourceLeakDetection is deprecated. Use '-D{}={}' instead.", PROP_LEVEL, DEFAULT_LEVEL.name().toLowerCase());
121: Trustin Lee, debug, IfStmt, logger.debug("-D{}: {}", PROP_LEVEL, level.name().toLowerCase());
122: Carl Mastrangelo, debug, IfStmt, logger.debug("-D{}: {}", PROP_TARGET_RECORDS, TARGET_RECORDS);
311: agonigberg, error, MethodDeclaration, logger.error("LEAK: {}.release() was not called before it's garbage-collected. " + "See http://netty.io/wiki/reference-counted-objects.html for more information.{}", resourceType, records);
322: agonigberg, error, MethodDeclaration, logger.error("LEAK: {}.release() was not called before it's garbage-collected. " + "Enable advanced leak reporting to find out where the leak occurred. " + "To enable advanced leak reporting, " + "specify the JVM option '-D{}={}' or call {}.setLevel() " + "See http://netty.io/wiki/reference-counted-objects.html for more information.", resourceType, PROP_LEVEL, Level.ADVANCED.name().toLowerCase(), simpleClassName(this));
113: Norman Maurer, error, CatchClause, logger.error("Could not access System property: io.netty.customResourceLeakDetector", cause);
135: Norman Maurer, error, CatchClause, logger.error("Could not load custom resource leak detector class provided: {}", customLeakDetector, t);
132: Norman Maurer, error, IfStmt, logger.error("Class {} does not inherit from ResourceLeakDetector.", customLeakDetector);
152: Scott Mitchell, error, CatchClause, logger.error("Could not load custom resource leak detector class provided: {}", customLeakDetector, t);
149: Scott Mitchell, error, IfStmt, logger.error("Class {} does not inherit from ResourceLeakDetector.", customLeakDetector);
172: Scott Mitchell, error, CatchClause, logger.error("Could not load custom resource leak detector provided: {} with the given resource: {}", obsoleteCustomClassConstructor.getDeclaringClass().getName(), resource, t);
168: Scott Mitchell, debug, TryStmt, logger.debug("Loaded custom ResourceLeakDetector: {}", obsoleteCustomClassConstructor.getDeclaringClass().getName());
180: Scott Mitchell, debug, MethodDeclaration, logger.debug("Loaded default ResourceLeakDetector: {}", resourceLeakDetector);
195: Norman Maurer, error, CatchClause, logger.error("Could not load custom resource leak detector provided: {} with the given resource: {}", customClassConstructor.getDeclaringClass().getName(), resource, t);
191: Norman Maurer, debug, TryStmt, logger.debug("Loaded custom ResourceLeakDetector: {}", customClassConstructor.getDeclaringClass().getName());
202: agonigberg, debug, MethodDeclaration, logger.debug("Loaded default ResourceLeakDetector: {}", resourceLeakDetector);
230: Trustin Lee, warn, CatchClause, logger.warn("Thread death watcher task raised an exception:", t);
165: Norman Maurer, warn, CatchClause, logger.warn("A task raised an exception. Task: {}", task, t);
513: Jason Tedor, warn, CatchClause, logger.warn("An exception was thrown by " + l.getClass().getName() + ".operationComplete()", t);
743: Jason Tedor, warn, CatchClause, logger.warn("An exception was thrown by " + l.getClass().getName() + ".operationProgressed()", t);
766: Scott Mitchell, error, CatchClause, rejectedExecutionLogger.error("Failed to submit a listener notification task. Event loop shut down?", t);
250: Trustin Lee, warn, CatchClause, logger.warn("Unexpected exception from the global event executor: ", t);
113: Scott Mitchell, info, CatchClause, logger.info("Throwable caught while executing Runnable {}", command, cause);
121: Scott Mitchell, info, CatchClause, logger.info("Throwable caught while executing Runnable {}", runnable, cause);
524: Trustin Lee, warn, CatchClause, logger.warn("Shutdown hook raised an exception.", t);
887: Vladimir Krivosheev, warn, CatchClause, logger.warn("Unexpected exception from an event executor: ", t);
899: Vladimir Krivosheev, error, IfStmt, logger.error("Buggy " + EventExecutor.class.getSimpleName() + " implementation; " + SingleThreadEventExecutor.class.getSimpleName() + ".confirmShutdown() must be called " + "before run() implementation terminates.");
918: Vladimir Krivosheev, warn, IfStmt, logger.warn("An event executor terminated with " + "non-empty task queue (" + taskQueue.size() + ')');
46: Scott Mitchell, warn, IfStmt, logger.warn("Failed to mark a promise as failure because it's done already: {}", promise, completedFuture.cause());
42: Scott Mitchell, warn, IfStmt, logger.warn("Failed to cancel a promise because it is done already: {}", promise);
38: Scott Mitchell, warn, IfStmt, logger.warn("Failed to mark a promise as success because it is done already: {}", promise);
238: Norman Maurer, warn, IfStmt, logger.warn("Failure during execution of task", cause);
62: Norman Maurer, debug, IfStmt, logger.debug("java.nio.ByteBuffer.cleaner(): unavailable", error);
60: Norman Maurer, debug, IfStmt, logger.debug("java.nio.ByteBuffer.cleaner(): available");
65: Norman Maurer, debug, IfStmt, logger.debug("java.nio.ByteBuffer.cleaner(): unavailable", error);
63: Norman Maurer, debug, IfStmt, logger.debug("java.nio.ByteBuffer.cleaner(): available");
54: Nikolay Fedorovskikh, debug, InitializerDeclaration, logger.debug("-Dio.netty.threadLocalMap.stringBuilder.initialSize: {}", STRING_BUILDER_INITIAL_SIZE);
57: Nikolay Fedorovskikh, debug, InitializerDeclaration, logger.debug("-Dio.netty.threadLocalMap.stringBuilder.maxSize: {}", STRING_BUILDER_MAX_SIZE);
70: Fabian Lange, warn, CatchClause, logger.warn("Failed to retrieve the list of available network interfaces", e);
84: Fabian Lange, debug, CatchClause, logger.debug("Failed to get the hardware address of a network interface: {}", iface, e);
142: Scott Mitchell, warn, IfStmt, logger.warn("Failed to find a usable hardware address from the network interfaces; using random bytes: {}", formatAddress(bestMacAddr));
67: Ning Sun, debug, IfStmt, logger.debug("-Dio.netty.native.workdir: " + WORKDIR + " (io.netty.tmpdir)");
64: Ning Sun, debug, IfStmt, logger.debug("-Dio.netty.native.workdir: " + WORKDIR);
89: Norman Maurer, debug, CatchClause, logger.debug("Unable to load the library '{}', trying next name...", name, t);
128: Aron Wieck, debug, CatchClause, logger.debug("{} cannot be loaded from java.libary.path, " + "now trying export to -Dio.netty.native.workdir: {}", name, WORKDIR, ex);
199: Michael K. Werle, Error, CatchClause, logger.debug("Error checking if {} is on a file store mounted with noexec", tmpFile, t);
192: Michael K. Werle, info, IfStmt, logger.info("{} exists but cannot be executed even when execute permissions set; " + "check volume for \"noexec\" flag; use -Dio.netty.native.workdir=[path] " + "to set native working directory separately.", tmpFile.getPath());
238: Carl Mastrangelo, debug, CatchClause, logger.debug("Unable to load the library '{}', trying other loading mechanism.", name, e);
241: Carl Mastrangelo, debug, CatchClause, logger.debug("Unable to load the library '{}', trying other loading mechanism.", name, e);
234: Carl Mastrangelo, debug, TryStmt, logger.debug("Successfully loaded the library {}", name);
244: Scott Mitchell, debug, TryStmt, logger.debug("Successfully loaded the library {}", name);
132: Trustin Lee, debug, IfStmt, logger.debug("-Dio.netty.noPreferDirect: {}", !DIRECT_BUFFER_PREFERRED);
140: Norman Maurer, info, IfStmt, logger.info("Your platform does not provide complete low-level API for accessing direct buffers reliably. " + "Unless explicitly requested, heap buffer will always be preferred to avoid potential system " + "instability.");
172: Norman Maurer, debug, InitializerDeclaration, logger.debug("-Dio.netty.maxDirectMemory: {} bytes", maxDirectMemory);
178: Norman Maurer, debug, InitializerDeclaration, logger.debug("-Dio.netty.uninitializedArrayAllocationThreshold: {}", UNINITIALIZED_ARRAY_ALLOCATION_THRESHOLD);
848: Jason Tedor, debug, IfStmt, logger.debug("org.jctools-core.MpscChunkedArrayQueue: available");
845: Jason Tedor, debug, IfStmt, logger.debug("org.jctools-core.MpscChunkedArrayQueue: unavailable");
943: Trustin Lee, debug, IfStmt, logger.debug("Platform: Windows");
954: Norman Maurer, debug, IfStmt, logger.debug("Platform: MacOS");
970: Jason Tedor, debug, IfStmt, logger.debug("sun.misc.Unsafe: unavailable (Android)");
983: Carl Mastrangelo, trace, CatchClause, logger.trace("Could not determine if Unsafe is available", t);
980: Trustin Lee, debug, TryStmt, logger.debug("sun.misc.Unsafe: {}", hasUnsafe ? "available" : "unavailable");
1053: Trustin Lee, debug, IfStmt, logger.debug("maxDirectMemory: {} bytes", maxDirectMemory);
1051: Trustin Lee, debug, IfStmt, logger.debug("maxDirectMemory: {} bytes (maybe)", maxDirectMemory);
1064: Norman Maurer, debug, IfStmt, logger.debug("-Dio.netty.tmpdir: {}", f);
1070: Norman Maurer, debug, IfStmt, logger.debug("-Dio.netty.tmpdir: {} (java.io.tmpdir)", f);
1099: Norman Maurer, debug, IfStmt, logger.debug("-Dio.netty.tmpdir: {} ($TMPDIR)", f);
1078: Norman Maurer, debug, IfStmt, logger.debug("-Dio.netty.tmpdir: {} (%TEMP%)", f);
1086: Norman Maurer, debug, IfStmt, logger.debug("-Dio.netty.tmpdir: {} (%USERPROFILE%\\AppData\\Local\\Temp)", f);
1092: Norman Maurer, debug, IfStmt, logger.debug("-Dio.netty.tmpdir: {} (%USERPROFILE%\\Local Settings\\Temp)", f);
1114: Norman Maurer, warn, MethodDeclaration, logger.warn("Failed to get the temporary directory; falling back to: {}", f);
1142: Norman Maurer, debug, IfStmt, logger.debug("-Dio.netty.bitMode: {}", bitMode);
1149: Norman Maurer, debug, IfStmt, logger.debug("-Dio.netty.bitMode: {} (sun.arch.data.model)", bitMode);
1154: Norman Maurer, debug, IfStmt, logger.debug("-Dio.netty.bitMode: {} (com.ibm.vm.bitmode)", bitMode);
1167: Norman Maurer, debug, IfStmt, logger.debug("-Dio.netty.bitMode: {} (os.arch: {})", bitMode, arch);
120: Jason Tedor, debug, IfStmt, logger.debug("sun.misc.Unsafe.theUnsafe: available");
117: Carl Mastrangelo, debug, IfStmt, logger.debug("sun.misc.Unsafe.theUnsafe: unavailable", (Throwable) maybeUnsafe);
149: Norman Maurer, debug, IfStmt, logger.debug("sun.misc.Unsafe.copyMemory: unavailable", (Throwable) maybeException);
144: Jason Tedor, debug, IfStmt, logger.debug("sun.misc.Unsafe.copyMemory: available");
185: Norman Maurer, debug, IfStmt, logger.debug("java.nio.Buffer.address: unavailable", (Throwable) maybeAddressField);
182: Norman Maurer, debug, IfStmt, logger.debug("java.nio.Buffer.address: available");
198: Scott Mitchell, debug, IfStmt, logger.debug("unsafe.arrayIndexScale is {} (expected: 1). Not using unsafe.", byteArrayIndexScale);
252: Jason Tedor, debug, IfStmt, logger.debug("direct buffer constructor: unavailable", (Throwable) maybeDirectBufferConstructor);
243: Jason Tedor, debug, TryStmt, logger.debug("direct buffer constructor: available");
300: Scott Mitchell, debug, IfStmt, logger.debug("java.nio.Bits.unaligned: unavailable {}", unaligned, t);
294: Jason Tedor, debug, IfStmt, logger.debug("java.nio.Bits.unaligned: available, {}", unaligned);
359: Norman Maurer, debug, IfStmt, logger.debug("jdk.internal.misc.Unsafe.allocateUninitializedArray(int): unavailable prior to Java9");
356: Norman Maurer, debug, IfStmt, logger.debug("jdk.internal.misc.Unsafe.allocateUninitializedArray(int): available");
353: Norman Maurer, debug, IfStmt, logger.debug("jdk.internal.misc.Unsafe.allocateUninitializedArray(int): unavailable", (Throwable) maybeException);
366: Norman Maurer, debug, InitializerDeclaration, logger.debug("java.nio.DirectByteBuffer.<init>(long, int): {}", DIRECT_BUFFER_CONSTRUCTOR != null ? "available" : "unavailable");
376: Norman Maurer, debug, MethodDeclaration, logger.debug("-Dio.netty.noUnsafe: {}", noUnsafe);
379: Norman Maurer, debug, IfStmt, logger.debug("sun.misc.Unsafe: unavailable (io.netty.noUnsafe)");
393: Carl Mastrangelo, debug, IfStmt, logger.debug(msg);
799: Norman Maurer, debug, IfStmt, logger.debug("Platform: Android");
826: Norman Maurer, debug, MethodDeclaration, logger.debug("Java version: {}", majorVersion);
37: Norman Maurer, warn, IfStmt, logger.warn("Failed to cancel promise because it has failed already: {}, unnotified cause:", p, err);
35: Norman Maurer, warn, IfStmt, logger.warn("Failed to cancel promise because it has succeeded already: {}", p);
53: Norman Maurer, warn, IfStmt, logger.warn("Failed to mark a promise as success because it has failed already: {}, unnotified cause:", p, err);
51: Norman Maurer, warn, IfStmt, logger.warn("Failed to mark a promise as success because it has succeeded already: {}", p);
69: Norman Maurer, warn, IfStmt, logger.warn("Failed to mark a promise as failure because it has failed already: {}, unnotified cause: {}", p, ThrowableUtil.stackTraceToString(err), cause);
67: Norman Maurer, warn, IfStmt, logger.warn("Failed to mark a promise as failure because it has succeeded already: {}", p, cause);
79: Dmitriy Dumanskiy, warn, CatchClause, logger.warn("Unable to retrieve a system property '{}'; default values will be used.", key, e);
117: Dmitriy Dumanskiy, warn, MethodDeclaration, logger.warn("Unable to parse the boolean system property '{}':{} - using the default value: {}", key, value, def);
147: Dmitriy Dumanskiy, warn, MethodDeclaration, logger.warn("Unable to parse the integer system property '{}':{} - using the default value: {}", key, value, def);
177: Dmitriy Dumanskiy, warn, MethodDeclaration, logger.warn("Unable to parse the long integer system property '{}':{} - using the default value: {}", key, value, def);
105: Norman Maurer, debug, MethodDeclaration, logger.debug("An exception has been raised by {}", t.getName(), e);
159: Trustin Lee, warn, CatchClause, logger.warn("Failed to generate a seed from SecureRandom due to an InterruptedException.");
165: Trustin Lee, warn, IfStmt, logger.warn("Failed to generate a seed from SecureRandom within {} seconds. " + "Not enough entropy?", timeoutSeconds);
212: Trustin Lee, debug, IfStmt, logger.debug(String.format("-Dio.netty.initialSeedUniquifier: 0x%016x", actualCurrent));
207: Trustin Lee, debug, IfStmt, logger.debug(String.format("-Dio.netty.initialSeedUniquifier: 0x%016x (took %d ms)", actualCurrent, TimeUnit.NANOSECONDS.toMillis(seedGeneratorEndTime - seedGeneratorStartTime)));
83: izstas, trace, MethodDeclaration, logger.trace(msg);
104: Trustin Lee, trace, IfStmt, logger.trace(ft.getMessage(), ft.getThrowable());
128: Trustin Lee, trace, IfStmt, logger.trace(ft.getMessage(), ft.getThrowable());
148: Trustin Lee, trace, IfStmt, logger.trace(ft.getMessage(), ft.getThrowable());
163: Trustin Lee, trace, MethodDeclaration, logger.trace(msg, t);
185: Trustin Lee, debug, MethodDeclaration, logger.debug(msg);
206: Trustin Lee, debug, IfStmt, logger.debug(ft.getMessage(), ft.getThrowable());
230: Trustin Lee, debug, IfStmt, logger.debug(ft.getMessage(), ft.getThrowable());
250: Trustin Lee, debug, IfStmt, logger.debug(ft.getMessage(), ft.getThrowable());
265: Trustin Lee, debug, MethodDeclaration, logger.debug(msg, t);
285: Trustin Lee, info, MethodDeclaration, logger.info(msg);
307: Trustin Lee, info, IfStmt, logger.info(ft.getMessage(), ft.getThrowable());
330: Trustin Lee, info, IfStmt, logger.info(ft.getMessage(), ft.getThrowable());
350: Trustin Lee, info, IfStmt, logger.info(ft.getMessage(), ft.getThrowable());
365: Trustin Lee, info, MethodDeclaration, logger.info(msg, t);
385: Trustin Lee, warn, MethodDeclaration, logger.warn(msg);
406: Trustin Lee, warn, IfStmt, logger.warn(ft.getMessage(), ft.getThrowable());
430: Trustin Lee, warn, IfStmt, logger.warn(ft.getMessage(), ft.getThrowable());
450: Trustin Lee, warn, IfStmt, logger.warn(ft.getMessage(), ft.getThrowable());
466: Trustin Lee, warn, MethodDeclaration, logger.warn(msg, t);
486: Trustin Lee, error, MethodDeclaration, logger.error(msg);
507: Trustin Lee, error, IfStmt, logger.error(ft.getMessage(), ft.getThrowable());
531: Trustin Lee, error, IfStmt, logger.error(ft.getMessage(), ft.getThrowable());
551: Trustin Lee, error, IfStmt, logger.error(ft.getMessage(), ft.getThrowable());
566: Trustin Lee, error, MethodDeclaration, logger.error(msg, t);
42: 杨浩, TRACE, MethodDeclaration, log(Level.TRACE, EXCEPTION_MESSAGE, t);
47: 杨浩, DEBUG, MethodDeclaration, log(Level.DEBUG, EXCEPTION_MESSAGE, t);
52: 杨浩, INFO, MethodDeclaration, log(Level.INFO, EXCEPTION_MESSAGE, t);
57: 杨浩, WARN, MethodDeclaration, log(Level.WARN, EXCEPTION_MESSAGE, t);
62: 杨浩, ERROR, MethodDeclaration, log(Level.ERROR, EXCEPTION_MESSAGE, t);
73: Trustin Lee, Trace, TryStmt, logger.isTraceEnabled();
41: izstas, trace, MethodDeclaration, logger.trace(msg);
46: Trustin Lee, trace, MethodDeclaration, logger.trace(format, arg);
51: Trustin Lee, trace, MethodDeclaration, logger.trace(format, argA, argB);
56: Trustin Lee, trace, MethodDeclaration, logger.trace(format, argArray);
61: Trustin Lee, trace, MethodDeclaration, logger.trace(msg, t);
71: Trustin Lee, debug, MethodDeclaration, logger.debug(msg);
76: Trustin Lee, debug, MethodDeclaration, logger.debug(format, arg);
81: Trustin Lee, debug, MethodDeclaration, logger.debug(format, argA, argB);
86: Trustin Lee, debug, MethodDeclaration, logger.debug(format, argArray);
91: Trustin Lee, debug, MethodDeclaration, logger.debug(msg, t);
101: Trustin Lee, info, MethodDeclaration, logger.info(msg);
106: Trustin Lee, info, MethodDeclaration, logger.info(format, arg);
111: Trustin Lee, info, MethodDeclaration, logger.info(format, argA, argB);
116: Trustin Lee, info, MethodDeclaration, logger.info(format, argArray);
121: Trustin Lee, info, MethodDeclaration, logger.info(msg, t);
131: Trustin Lee, warn, MethodDeclaration, logger.warn(msg);
136: Trustin Lee, warn, MethodDeclaration, logger.warn(format, arg);
141: Trustin Lee, warn, MethodDeclaration, logger.warn(format, argArray);
146: Trustin Lee, warn, MethodDeclaration, logger.warn(format, argA, argB);
151: Trustin Lee, warn, MethodDeclaration, logger.warn(msg, t);
161: Trustin Lee, error, MethodDeclaration, logger.error(msg);
166: Trustin Lee, error, MethodDeclaration, logger.error(format, arg);
171: Trustin Lee, error, MethodDeclaration, logger.error(format, argA, argB);
176: Trustin Lee, error, MethodDeclaration, logger.error(format, argArray);
181: Trustin Lee, error, MethodDeclaration, logger.error(msg, t);
56: Scott Mitchell, Error, CatchClause, logger.debug("StackOverflowError depth: {}", stackOverflowDepth);
49: 杨浩, TRACE, MethodDeclaration, testLevel(InternalLogLevel.TRACE);
50: 杨浩, DEBUG, MethodDeclaration, testLevel(InternalLogLevel.DEBUG);
51: 杨浩, INFO, MethodDeclaration, testLevel(InternalLogLevel.INFO);
52: 杨浩, WARN, MethodDeclaration, testLevel(InternalLogLevel.WARN);
53: 杨浩, ERROR, MethodDeclaration, testLevel(InternalLogLevel.ERROR);
31: Norman Maurer, Trace, MethodDeclaration, when(mockLog.isTraceEnabled()).thenReturn(true);
34: izstas, Trace, MethodDeclaration, assertTrue(logger.isTraceEnabled());
36: Norman Maurer, Trace, MethodDeclaration, verify(mockLog).isTraceEnabled();
43: Norman Maurer, Debug, MethodDeclaration, when(mockLog.isDebugEnabled()).thenReturn(true);
46: Trustin Lee, Debug, MethodDeclaration, assertTrue(logger.isDebugEnabled());
48: Norman Maurer, Debug, MethodDeclaration, verify(mockLog).isDebugEnabled();
55: Norman Maurer, Info, MethodDeclaration, when(mockLog.isInfoEnabled()).thenReturn(true);
58: Trustin Lee, Info, MethodDeclaration, assertTrue(logger.isInfoEnabled());
60: Norman Maurer, Info, MethodDeclaration, verify(mockLog).isInfoEnabled();
67: Norman Maurer, Warn, MethodDeclaration, when(mockLog.isWarnEnabled()).thenReturn(true);
70: Trustin Lee, Warn, MethodDeclaration, assertTrue(logger.isWarnEnabled());
72: Norman Maurer, Warn, MethodDeclaration, verify(mockLog).isWarnEnabled();
79: Norman Maurer, Error, MethodDeclaration, when(mockLog.isErrorEnabled()).thenReturn(true);
82: Trustin Lee, Error, MethodDeclaration, assertTrue(logger.isErrorEnabled());
84: Norman Maurer, Error, MethodDeclaration, verify(mockLog).isErrorEnabled();
92: izstas, trace, MethodDeclaration, logger.trace("a");
94: Norman Maurer, trace, MethodDeclaration, verify(mockLog).trace("a");
102: izstas, trace, MethodDeclaration, logger.trace("a", e);
104: Norman Maurer, trace, MethodDeclaration, verify(mockLog).trace("a", e);
112: Trustin Lee, debug, MethodDeclaration, logger.debug("a");
114: Norman Maurer, debug, MethodDeclaration, verify(mockLog).debug("a");
122: Trustin Lee, debug, MethodDeclaration, logger.debug("a", e);
124: Norman Maurer, debug, MethodDeclaration, verify(mockLog).debug("a", e);
132: Trustin Lee, info, MethodDeclaration, logger.info("a");
134: Norman Maurer, info, MethodDeclaration, verify(mockLog).info("a");
142: Trustin Lee, info, MethodDeclaration, logger.info("a", e);
144: Norman Maurer, info, MethodDeclaration, verify(mockLog).info("a", e);
152: Trustin Lee, warn, MethodDeclaration, logger.warn("a");
154: Norman Maurer, warn, MethodDeclaration, verify(mockLog).warn("a");
162: Trustin Lee, warn, MethodDeclaration, logger.warn("a", e);
164: Norman Maurer, warn, MethodDeclaration, verify(mockLog).warn("a", e);
172: Trustin Lee, error, MethodDeclaration, logger.error("a");
174: Norman Maurer, error, MethodDeclaration, verify(mockLog).error("a");
182: Trustin Lee, error, MethodDeclaration, logger.error("a", e);
184: Norman Maurer, error, MethodDeclaration, verify(mockLog).error("a", e);
69: Norman Maurer, Trace, MethodDeclaration, when(mockLogger.isTraceEnabled()).thenReturn(true);
72: izstas, Trace, MethodDeclaration, assertTrue(logger.isTraceEnabled());
73: Norman Maurer, Trace, MethodDeclaration, verify(mockLogger).isTraceEnabled();
78: Norman Maurer, Debug, MethodDeclaration, when(mockLogger.isDebugEnabled()).thenReturn(true);
81: Trustin Lee, Debug, MethodDeclaration, assertTrue(logger.isDebugEnabled());
82: Norman Maurer, Debug, MethodDeclaration, verify(mockLogger).isDebugEnabled();
87: Norman Maurer, Info, MethodDeclaration, when(mockLogger.isInfoEnabled()).thenReturn(true);
90: Trustin Lee, Info, MethodDeclaration, assertTrue(logger.isInfoEnabled());
91: Norman Maurer, Info, MethodDeclaration, verify(mockLogger).isInfoEnabled();
96: Norman Maurer, Warn, MethodDeclaration, when(mockLogger.isWarnEnabled()).thenReturn(true);
99: Trustin Lee, Warn, MethodDeclaration, assertTrue(logger.isWarnEnabled());
100: Norman Maurer, Warn, MethodDeclaration, verify(mockLogger).isWarnEnabled();
105: Norman Maurer, Error, MethodDeclaration, when(mockLogger.isErrorEnabled()).thenReturn(true);
108: Trustin Lee, Error, MethodDeclaration, assertTrue(logger.isErrorEnabled());
109: Norman Maurer, Error, MethodDeclaration, verify(mockLogger).isErrorEnabled();
115: izstas, trace, MethodDeclaration, logger.trace("a");
116: Norman Maurer, trace, MethodDeclaration, verify(mockLogger).trace("a");
122: izstas, trace, MethodDeclaration, logger.trace("a", e);
123: Norman Maurer, trace, MethodDeclaration, verify(mockLogger).trace("a", e);
129: Trustin Lee, debug, MethodDeclaration, logger.debug("a");
130: Norman Maurer, debug, MethodDeclaration, verify(mockLogger).debug("a");
136: Trustin Lee, debug, MethodDeclaration, logger.debug("a", e);
137: Norman Maurer, debug, MethodDeclaration, verify(mockLogger).debug("a", e);
143: Trustin Lee, info, MethodDeclaration, logger.info("a");
144: Norman Maurer, info, MethodDeclaration, verify(mockLogger).info("a");
150: Trustin Lee, info, MethodDeclaration, logger.info("a", e);
151: Norman Maurer, info, MethodDeclaration, verify(mockLogger).info("a", e);
157: Trustin Lee, warn, MethodDeclaration, logger.warn("a");
158: Norman Maurer, warn, MethodDeclaration, verify(mockLogger).warn("a");
164: Trustin Lee, warn, MethodDeclaration, logger.warn("a", e);
165: Norman Maurer, warn, MethodDeclaration, verify(mockLogger).warn("a", e);
171: Trustin Lee, error, MethodDeclaration, logger.error("a");
172: Norman Maurer, error, MethodDeclaration, verify(mockLogger).error("a");
178: Trustin Lee, error, MethodDeclaration, logger.error("a", e);
179: Norman Maurer, error, MethodDeclaration, verify(mockLogger).error("a", e);
32: Norman Maurer, Trace, MethodDeclaration, when(mockLogger.isTraceEnabled()).thenReturn(true);
35: izstas, Trace, MethodDeclaration, assertTrue(logger.isTraceEnabled());
38: Norman Maurer, Trace, MethodDeclaration, verify(mockLogger).isTraceEnabled();
46: Norman Maurer, Debug, MethodDeclaration, when(mockLogger.isDebugEnabled()).thenReturn(true);
49: Trustin Lee, Debug, MethodDeclaration, assertTrue(logger.isDebugEnabled());
52: Norman Maurer, Debug, MethodDeclaration, verify(mockLogger).isDebugEnabled();
60: Norman Maurer, Info, MethodDeclaration, when(mockLogger.isInfoEnabled()).thenReturn(true);
63: Trustin Lee, Info, MethodDeclaration, assertTrue(logger.isInfoEnabled());
66: Norman Maurer, Info, MethodDeclaration, verify(mockLogger).isInfoEnabled();
74: Norman Maurer, Warn, MethodDeclaration, when(mockLogger.isWarnEnabled()).thenReturn(true);
77: Trustin Lee, Warn, MethodDeclaration, assertTrue(logger.isWarnEnabled());
80: Norman Maurer, Warn, MethodDeclaration, verify(mockLogger).isWarnEnabled();
88: Norman Maurer, Error, MethodDeclaration, when(mockLogger.isErrorEnabled()).thenReturn(true);
91: Trustin Lee, Error, MethodDeclaration, assertTrue(logger.isErrorEnabled());
94: Norman Maurer, Error, MethodDeclaration, verify(mockLogger).isErrorEnabled();
104: izstas, trace, MethodDeclaration, logger.trace("a");
107: Norman Maurer, trace, MethodDeclaration, verify(mockLogger).trace("a");
117: izstas, trace, MethodDeclaration, logger.trace("a", e);
120: Norman Maurer, trace, MethodDeclaration, verify(mockLogger).trace("a", e);
130: Trustin Lee, debug, MethodDeclaration, logger.debug("a");
133: Norman Maurer, debug, MethodDeclaration, verify(mockLogger).debug("a");
143: Trustin Lee, debug, MethodDeclaration, logger.debug("a", e);
146: Norman Maurer, debug, MethodDeclaration, verify(mockLogger).debug("a", e);
156: Trustin Lee, info, MethodDeclaration, logger.info("a");
159: Norman Maurer, info, MethodDeclaration, verify(mockLogger).info("a");
169: Trustin Lee, info, MethodDeclaration, logger.info("a", e);
172: Norman Maurer, info, MethodDeclaration, verify(mockLogger).info("a", e);
182: Trustin Lee, warn, MethodDeclaration, logger.warn("a");
185: Norman Maurer, warn, MethodDeclaration, verify(mockLogger).warn("a");
195: Trustin Lee, warn, MethodDeclaration, logger.warn("a", e);
198: Norman Maurer, warn, MethodDeclaration, verify(mockLogger).warn("a", e);
208: Trustin Lee, error, MethodDeclaration, logger.error("a");
211: Norman Maurer, error, MethodDeclaration, verify(mockLogger).error("a");
221: Trustin Lee, error, MethodDeclaration, logger.error("a", e);
224: Norman Maurer, error, MethodDeclaration, verify(mockLogger).error("a", e);
51: Trustin Lee, INFO, TryStmt, b.group(bossGroup, workerGroup).channel(NioServerSocketChannel.class).handler(new LoggingHandler(LogLevel.INFO)).childHandler(new FactorialServerInitializer(sslCtx));
93: Daniel Bevenius, INFO, TryStmt, b.group(bossGroup, workerGroup).channel(NioServerSocketChannel.class).handler(new LoggingHandler(LogLevel.INFO)).childHandler(new HttpCorsServerInitializer(sslCtx));
50: Trustin Lee, INFO, TryStmt, b.group(bossGroup, workerGroup).channel(NioServerSocketChannel.class).handler(new LoggingHandler(LogLevel.INFO)).childHandler(new HttpStaticFileServerInitializer(sslCtx));
55: Norman Maurer, INFO, TryStmt, b.group(bossGroup, workerGroup).channel(NioServerSocketChannel.class).handler(new LoggingHandler(LogLevel.INFO)).childHandler(new HttpHelloWorldServerInitializer(sslCtx));
53: Trustin Lee, INFO, TryStmt, b.group(bossGroup, workerGroup).channel(NioServerSocketChannel.class).handler(new LoggingHandler(LogLevel.INFO)).childHandler(new HttpSnoopServerInitializer(sslCtx));
53: Trustin Lee, INFO, TryStmt, b.handler(new LoggingHandler(LogLevel.INFO));
225: Frederic Bregier, info, IfStmt, logger.info(" 100% (FinalSize: " + partialContent.length() + ")");
257: Frederic Bregier, info, IfStmt, logger.info(builder.toString());
254: Frederic Bregier, info, IfStmt, logger.info(builder.toString());
445: Trustin Lee, WARN, MethodDeclaration, logger.log(Level.WARNING, responseContent.toString(), cause);
41: Sergey Polovko, info, IfStmt, logger.info("{} received {}", ctx.channel(), request);
67: Trustin Lee, INFO, TryStmt, b.group(bossGroup, workerGroup).channel(NioServerSocketChannel.class).handler(new LoggingHandler(LogLevel.INFO)).childHandler(new WebSocketServerInitializer(sslCtx));
81: Norman Maurer, INFO, TryStmt, b.group(group).channel(NioServerSocketChannel.class).handler(new LoggingHandler(LogLevel.INFO)).childHandler(new Http2ServerInitializer(sslCtx));
81: Eric Anderson, INFO, TryStmt, b.group(group).channel(NioServerSocketChannel.class).handler(new LoggingHandler(LogLevel.INFO)).childHandler(new Http2ServerInitializer(sslCtx));
78: Leonardo Freitas Gomes, INFO, TryStmt, b.group(group).channel(NioServerSocketChannel.class).handler(new LoggingHandler(LogLevel.INFO)).childHandler(new Http2ServerInitializer(sslCtx));
61: Trustin Lee, INFO, MethodDeclaration, ch.pipeline().addLast(new LoggingHandler(LogLevel.INFO), new LocalEchoServerHandler());
55: Trustin Lee, INFO, MethodDeclaration, ch.pipeline().addLast(new LoggingHandler(LogLevel.INFO));
73: Trustin Lee, INFO, MethodDeclaration, ch.pipeline().addLast(new LoggingHandler(LogLevel.INFO), new LocalEchoClientHandler());
40: Trustin Lee, INFO, TryStmt, b.group(bossGroup, workerGroup).channel(NioServerSocketChannel.class).handler(new LoggingHandler(LogLevel.INFO)).childHandler(new HexDumpProxyInitializer(REMOTE_HOST, REMOTE_PORT)).childOption(ChannelOption.AUTO_READ, false).bind(LOCAL_PORT).sync().channel().closeFuture().sync();
35: Trustin Lee, INFO, MethodDeclaration, ch.pipeline().addLast(new LoggingHandler(LogLevel.INFO), new HexDumpProxyFrontendHandler(remoteHost, remotePort));
45: Trustin Lee, INFO, TryStmt, b.group(bossGroup, workerGroup).channel(NioServerSocketChannel.class).handler(new LoggingHandler(LogLevel.INFO)).childHandler(new SecureChatServerInitializer(sslCtx));
34: Trustin Lee, INFO, TryStmt, b.group(bossGroup, workerGroup).channel(NioServerSocketChannel.class).handler(new LoggingHandler(LogLevel.INFO)).childHandler(new SocksServerInitializer());
27: Trustin Lee, DEBUG, MethodDeclaration, ch.pipeline().addLast(new LoggingHandler(LogLevel.DEBUG), new SocksPortUnificationServerHandler(), SocksServerHandler.INSTANCE);
77: Trustin Lee, INFO, TryStmt, b.group(bossGroup, workerGroup).channel(NioServerSocketChannel.class).handler(new LoggingHandler(LogLevel.INFO)).childHandler(new SpdyServerInitializer(sslCtx));
50: Trustin Lee, INFO, TryStmt, b.group(bossGroup, workerGroup).channel(NioServerSocketChannel.class).handler(new LoggingHandler(LogLevel.INFO)).childHandler(new TelnetServerInitializer(sslCtx));
57: Andrei.Pozolotin, INFO, MethodDeclaration, ch.pipeline().addLast(new LoggingHandler(LogLevel.INFO), new ByteEchoClientHandler());
57: Andrei.Pozolotin, INFO, MethodDeclaration, ch.pipeline().addLast(new LoggingHandler(LogLevel.INFO), new ByteEchoServerHandler());
61: Andrei.Pozolotin, INFO, MethodDeclaration, ch.pipeline().addLast(new LoggingHandler(LogLevel.INFO), new MsgEchoClientHandler());
59: Andrei.Pozolotin, INFO, MethodDeclaration, ch.pipeline().addLast(new LoggingHandler(LogLevel.INFO), new MsgEchoServerHandler());
62: Andrei.Pozolotin, INFO, MethodDeclaration, ch.pipeline().addLast(new LoggingHandler(LogLevel.INFO), new MsgEchoPeerHandler(messageSize));
63: Andrei.Pozolotin, INFO, MethodDeclaration, ch.pipeline().addLast(new LoggingHandler(LogLevel.INFO), new ByteEchoPeerHandler(messageSize));
51: Trustin Lee, INFO, TryStmt, b.group(bossGroup, workerGroup).channel(NioServerSocketChannel.class).handler(new LoggingHandler(LogLevel.INFO)).childHandler(new WorldClockServerInitializer(sslCtx));
101: Roger Kapsi, trace, IfStmt, logger.trace("Non-empty queue: {}", queue);
217: Roger Kapsi, debug, IfStmt, logger.debug("Unexpected client hello packet: " + ByteBufUtil.hexDump(in), e);
115: Scott Mitchell, warn, MethodDeclaration, logger.warn("{} TLS handshake failed:", ctx.channel(), cause);
121: Trustin Lee, warn, MethodDeclaration, logger.warn("{} Failed to select the application-level protocol:", ctx.channel(), cause);
183: Trustin Lee, debug, MethodDeclaration, logger.debug("Cipher suite mapping: {} => {}", javaCipherSuite, openSslCipherSuite);
316: Trustin Lee, debug, MethodDeclaration, logger.debug("Cipher suite mapping: {} => {}", javaCipherSuiteTls, openSslCipherSuite);
317: Trustin Lee, debug, MethodDeclaration, logger.debug("Cipher suite mapping: {} => {}", javaCipherSuiteSsl, openSslCipherSuite);
98: Norman Maurer, error, CatchClause, logger.error("Unable to initialize Java9SslUtils, but the detected javaVersion was: {}", PlatformDependent.javaVersion(), t);
123: Scott Mitchell, debug, IfStmt, logger.debug("Default protocols (JDK): {} ", Arrays.asList(DEFAULT_PROTOCOLS));
124: Trustin Lee, debug, IfStmt, logger.debug("Default cipher suites (JDK): {}", DEFAULT_CIPHERS);
80: Trustin Lee, debug, CatchClause, logger.debug("netty-tcnative not in the classpath; " + OpenSslEngine.class.getSimpleName() + " will be unavailable.");
92: nmittler, debug, CatchClause, logger.debug("Failed to load netty-tcnative; " + OpenSslEngine.class.getSimpleName() + " will be unavailable, unless the " + "application has already loaded the symbols by some other means. " + "See http://netty.io/wiki/forked-tomcat-native.html for more information.", t);
110: Trustin Lee, debug, CatchClause, logger.debug("Failed to initialize netty-tcnative; " + OpenSslEngine.class.getSimpleName() + " will be unavailable. " + "See http://netty.io/wiki/forked-tomcat-native.html for more information.", t);
120: Norman Maurer, debug, IfStmt, logger.debug("netty-tcnative using native library: {}", SSL.versionString());
181: Trustin Lee, warn, CatchClause, logger.warn("Failed to get the list of available OpenSSL cipher suites.", e);
147: Scott Mitchell, debug, CatchClause, logger.debug("Hostname Verification not supported.");
166: Norman Maurer, debug, CatchClause, logger.debug("KeyManagerFactory not supported.");
163: Scott Mitchell, debug, CatchClause, logger.debug("Failed to get useKeyManagerFactory system property.");
231: Scott Mitchell, debug, IfStmt, logger.debug("Supported protocols (OpenSSL): {} ", Arrays.asList(SUPPORTED_PROTOCOLS_SET));
232: Scott Mitchell, debug, IfStmt, logger.debug("Default cipher suites (OpenSSL): {}", DEFAULT_CIPHERS);
159: Trustin Lee, warn, CatchClause, logger.warn("Failed to close a stream.", e);
167: Trustin Lee, warn, CatchClause, logger.warn("Failed to close a stream.", e);
251: Scott Mitchell, debug, CatchClause, logger.debug("request of key failed", cause);
177: Scott Mitchell, debug, CatchClause, logger.debug("ReferenceCountedOpenSslContext supports -Djdk.tls.ephemeralDHKeySize={int}, but got: " + dhKeySize);
627: Scott Mitchell, debug, CatchClause, logger.debug("verification of certificate failed", cause);
854: Scott Mitchell, debug, IfStmt, logger.debug("{} failed: OpenSSL error: {}", operation, err);
1259: Scott Mitchell, debug, IfStmt, logger.debug("SSL_shutdown failed: OpenSSL error: {}", SSL.getLastError());
235: Norman Maurer, warn, MethodDeclaration, logger.warn("No ReferenceCountedOpenSslEngine found for SSL pointer: {}", ssl);
652: Trustin Lee, warn, IfStmt, logger.warn("{} flush() raised a masked exception.", ctx.channel(), e);
1037: norman, debug, IfStmt, logger.debug("{} Swallowing a harmless 'connection reset by peer / broken pipe' error that occurred " + "while writing close_notify in response to the peer's close_notify", ctx.channel(), cause);
1110: Scott Mitchell, debug, CatchClause, logger.debug("Unexpected exception while loading class {} classname {}", getClass(), classname, cause);
1209: Scott Mitchell, debug, CatchClause, logger.debug("SSLException during trying to call SSLEngine.wrap(...)" + " because of an previous SSLException, ignoring...", ex);
1506: Trustin Lee, debug, IfStmt, logger.debug("{} HANDSHAKEN: {}", ctx.channel(), engine.getSession().getCipherSuite());
1545: Norman Maurer, debug, IfStmt, logger.debug("{} SSLEngine.closeInbound() raised an exception.", ctx.channel(), e);
1808: Norman Maurer, warn, IfStmt, logger.warn("{} Last write attempt timed out; force-closing the connection.", ctx.channel());
1842: Norman Maurer, debug, IfStmt, logger.debug("{} did not receive close_notify in {}ms; force-closing the connection.", ctx.channel(), closeNotifyReadTimeout);
47: Trustin Lee, debug, MethodDeclaration, logger.debug("Accepting a client certificate: " + chain[0].getSubjectDN());
52: Trustin Lee, debug, MethodDeclaration, logger.debug("Accepting a server certificate: " + chain[0].getSubjectDN());
151: Trustin Lee, debug, CatchClause, logger.debug("Failed to generate a self-signed X.509 certificate using sun.security.x509:", t);
156: Trustin Lee, debug, CatchClause, logger.debug("Failed to generate a self-signed X.509 certificate using Bouncy Castle:", t2);
178: Xiaoyan Lin, warn, CatchClause, logger.warn("Failed to close a file: " + certificate, e);
291: Trustin Lee, warn, IfStmt, logger.warn("Failed to delete a file: " + certFile);
299: Trustin Lee, warn, CatchClause, logger.warn("Failed to close a file: " + keyFile, e);
123: Norman Maurer, warn, IfStmt, logger.warn("Unexpected exception while sending chunks.", e);
181: Trustin Lee, warn, CatchClause, logger.warn(ChunkedInput.class.getSimpleName() + ".isEndOfInput() failed", e);
323: norman, warn, IfStmt, logger.warn("Failed to close a chunked input.", t);
447: Trustin Lee, debug, IfStmt, logger.debug("Normal unsuspend: " + config.isAutoRead() + ':' + isHandlerActive(ctx));
444: Trustin Lee, debug, IfStmt, logger.debug("Unsuspend: " + config.isAutoRead() + ':' + isHandlerActive(ctx));
436: Trustin Lee, debug, IfStmt, logger.debug("Not unsuspend: " + config.isAutoRead() + ':' + isHandlerActive(ctx));
456: Nikolay Fedorovskikh, debug, IfStmt, logger.debug("Unsuspend final status => " + config.isAutoRead() + ':' + isHandlerActive(ctx));
485: Trustin Lee, debug, IfStmt, logger.debug("Read suspend: " + wait + ':' + config.isAutoRead() + ':' + isHandlerActive(ctx));
501: Trustin Lee, debug, IfStmt, logger.debug("Suspend final status => " + config.isAutoRead() + ':' + isHandlerActive(ctx) + " will reopened at: " + wait);
553: Trustin Lee, debug, IfStmt, logger.debug("Write suspend: " + wait + ':' + ctx.channel().config().isAutoRead() + ':' + isHandlerActive(ctx));
553: Trustin Lee, debug, IfStmt, logger.debug("Read Suspend: " + wait + ':' + config.isAutoRead() + ':' + isHandlerActive(ctx));
569: Trustin Lee, debug, IfStmt, logger.debug("Suspend final status => " + config.isAutoRead() + ':' + isHandlerActive(ctx) + " will reopened at: " + wait);
685: Trustin Lee, debug, IfStmt, logger.debug("Write suspend: " + wait + ':' + ctx.channel().config().isAutoRead() + ':' + isHandlerActive(ctx));
228: fbregier, debug, IfStmt, logger.debug("Acct schedule not ok: " + interval + " > 2*" + checkInterval() + " from " + name);
514: Trustin Lee, debug, IfStmt, logger.debug("Time: " + time + ':' + sum + ':' + interval + ':' + pastDelay);
531: Trustin Lee, debug, IfStmt, logger.debug("Time: " + time + ':' + lastsum + ':' + lastinterval + ':' + pastDelay);
589: Trustin Lee, debug, IfStmt, logger.debug("Time: " + time + ':' + sum + ':' + interval + ':' + pastDelay);
606: Trustin Lee, debug, IfStmt, logger.debug("Time: " + time + ':' + lastsum + ':' + lastinterval + ':' + pastDelay);
104: Trustin Lee, INFO, MethodDeclaration, LoggingHandler handler = new LoggingHandler(LogLevel.INFO);
105: Trustin Lee, INFO, MethodDeclaration, assertEquals(LogLevel.INFO, handler.level());
130: Trustin Lee, info, MethodDeclaration, logger.info("{} => {}", javaCipherSuite, actual);
287: Trustin Lee, info, MethodDeclaration, logger.info("{} => {}", openSslCipherSuite, actual);
319: Trustin Lee, warn, CatchClause, logger.warn("Failed to remove proxy decoders:", e);
330: Trustin Lee, warn, CatchClause, logger.warn("Failed to remove proxy encoders:", e);
495: Trustin Lee, debug, IfStmt, logger.debug("{}: failure", type, f.cause());
493: Trustin Lee, warn, IfStmt, logger.warn("{}: failure", type, f.cause());
489: Trustin Lee, warn, IfStmt, logger.warn("{}: success", type);
487: Trustin Lee, debug, IfStmt, logger.debug("{}: success", type);
484: Trustin Lee, warn, IfStmt, logger.warn("{}: not done", type);
552: Trustin Lee, debug, MethodDeclaration, logger.debug("Received messages: {}", testHandler.received);
558: Trustin Lee, debug, ForeachStmt, logger.debug("Recorded exception on the client side: {}", t);
555: Trustin Lee, debug, IfStmt, logger.debug("No recorded exceptions on the client side.");
601: Trustin Lee, debug, MethodDeclaration, logger.debug("Recorded exceptions: {}", testHandler.exceptions);
647: Trustin Lee, debug, MethodDeclaration, logger.debug("Recorded exceptions: {}", testHandler.exceptions);
119: Trustin Lee, warn, MethodDeclaration, logger.warn("Unexpected exception from proxy server:", t);
141: Trustin Lee, warn, ForStmt, logger.warn("Unexpected exception:", t);
44: Ade Setyawan Sajim, debug, ConstructorDeclaration, logger.debug("Using harness executor");
71: Ade Setyawan Sajim, debug, ConstructorDeclaration, logger.debug("Using DelegateHarnessExecutor executor {}", this);
113: Trustin Lee, warn, CatchClause, logger.warn("Failed to close a resolver:", t);
78: Stephane Landelle, warn, CatchClause, logger.warn("Failed to load and parse hosts file at " + hostsFile.getPath(), e);
183: Trustin Lee, warn, CatchClause, logger.warn("Failed to close a reader", e);
88: Norman Maurer, debug, CatchClause, logger.debug("Skipping a malformed nameserver URI: {}", server, e);
80: Norman Maurer, debug, IfStmt, logger.debug("Skipping a nameserver URI as host portion could not be extracted: {}", server);
139: Scott Mitchell, warn, IfStmt, logger.warn("Default DNS servers: {} (Google Public DNS as a fallback)", defaultNameServers);
118: Scott Mitchell, debug, IfStmt, logger.debug("Default DNS servers: {} (sun.net.dns.ResolverConfiguration)", defaultNameServers);
726: Trustin Lee, warn, IfStmt, logger.warn("Failed to notify success ({}) to a promise: {}", result, promise);
732: Norman Maurer, warn, IfStmt, logger.warn("Failed to notify failure to a promise: {}", promise, cause);
975: Trustin Lee, debug, IfStmt, logger.debug("{} RECEIVED: [{}: {}], {}", ch, queryId, res.sender(), res);
980: Stephane Landelle, warn, IfStmt, logger.warn("{} Received a DNS response with an unknown ID: {}", ch, queryId);
998: Trustin Lee, warn, MethodDeclaration, logger.warn("{} Unexpected exception: ", ch, cause);
106: Jay, debug, IfStmt, logger.debug("{} WRITE: [{}: {}], {}", parent.ch, id, nameServerAddr, question);
171: Trustin Lee, warn, IfStmt, logger.warn("Received a DNS response with invalid number of questions: {}", envelope);
176: Trustin Lee, warn, IfStmt, logger.warn("Received a mismatching DNS response: {}", envelope);
71: Scott Mitchell, debug, CatchClause, logger.debug("failed to parse {} and/or {}", ETC_RESOLV_CONF_FILE, ETC_RESOLVER_DIR, e);
207: Scott Mitchell, info, IfStmt, logger.info("row type {} not supported. ignoring line: {}", SORTLIST_ROW_LABEL, line);
237: Scott Mitchell, debug, IfStmt, logger.debug("Domain name {} already maps to addresses {} so new addresses {} will be discarded", domainName, existingAddresses, addresses);
552: Stephane Landelle, info, ForeachStmt, logger.info("{}: {}", unresolved, resolved.getHostAddress());
622: Stephane Landelle, info, ForeachStmt, logger.info("{} has the following MX records:{}", hostname, buf);
994: Trustin Lee, info, ForeachStmt, logger.info("{} has the following MX records:{}", hostname, buf);
61: Norman Maurer, info, ForeachStmt, logger.info(String.format("Running: %s %d of %d (%s + %s) with %s", testName.getMethodName(), ++i, combos.size(), sb, cb, StringUtil.simpleClassName(allocator)));
56: Norman Maurer, info, ForeachStmt, logger.info(String.format("Running: %s %d of %d with %s", testName.getMethodName(), ++i, combos.size(), StringUtil.simpleClassName(allocator)));
152: Norman Maurer, info, MethodDeclaration, logger.info("Testing against SPDY v3.1");
162: Norman Maurer, info, MethodDeclaration, logger.info("Testing against SPDY v3.1");
87: Norman Maurer, warn, IfStmt, logger.warn("OpenSSL is unavailable and thus will not be tested.", OpenSsl.unavailabilityCause());
224: Norman Maurer, warn, IfStmt, logger.warn("Handshake failed:", handshakeEvt.cause());
138: Trustin Lee, warn, IfStmt, logger.warn("OpenSSL is unavailable and thus will not be tested.", OpenSsl.unavailabilityCause());
412: Trustin Lee, debug, MethodDeclaration, logger.debug("{}:\n" + "\tclient { sent: {}, rcvd: {}, nego: {}, cipher: {} },\n" + "\tserver { rcvd: {}, nego: {}, cipher: {} }", message, clientSendCounter, clientRecvCounter, clientNegoCounter, clientSslHandler.engine().getSession().getCipherSuite(), serverRecvCounter, serverNegoCounter, serverSslHandler.engine().getSession().getCipherSuite());
462: Trustin Lee, warn, IfStmt, logger.warn("Handshake failed:", handshakeEvt.cause());
473: Trustin Lee, warn, IfStmt, logger.warn("Unexpected exception from the client side:", cause);
92: Trustin Lee, warn, IfStmt, logger.warn("OpenSSL is unavailable and thus will not be tested.", OpenSsl.unavailabilityCause());
182: Norman Maurer, warn, IfStmt, logger.warn("Unexpected exception from the client side", cause);
210: Norman Maurer, warn, IfStmt, logger.warn("Unexpected exception from the server side", cause);
207: Michael Bildner, warn, IfStmt, logger.warn("Unexpected exception from the " + (server ? "server" : "client") + " side", cause);
97: Trustin Lee, warn, IfStmt, logger.warn("OpenSSL is unavailable and thus will not be tested.", OpenSsl.unavailabilityCause());
274: Trustin Lee, warn, IfStmt, logger.warn("Unexpected exception from the client side", cause);
325: Trustin Lee, warn, IfStmt, logger.warn("Unexpected exception from the server side", cause);
52: Norman Maurer, debug, InitializerDeclaration, logger.debug("-Dio.netty.testsuite.badHost: {}", BAD_HOST);
53: Norman Maurer, debug, InitializerDeclaration, logger.debug("-Dio.netty.testsuite.badPort: {}", BAD_PORT);
75: Trustin Lee, info, MethodDeclaration, logger.info("Bandwidth: " + minfactor + " <= " + bandwidthFactor + " <= " + maxfactor + " StepMs: " + stepms + " MinMs: " + minimalms + " CheckMs: " + check);
282: Trustin Lee, info, MethodDeclaration, logger.info("TEST: " + currentTestName + " RUN: " + currentTestRun + " Exec: " + additionalExecutor + " Read: " + limitRead + " Write: " + limitWrite + " Global: " + globalLimit);
345: Trustin Lee, info, MethodDeclaration, logger.info("TEST: " + currentTestName + " RUN: " + currentTestRun + " Average of traffic: " + average + " compare to " + bandwidthFactor);
411: Trustin Lee, debug, MethodDeclaration, loggerClient.debug("Step: " + step + " Read: " + in.readableBytes() / 8 + " blocks");
427: Trustin Lee, info, MethodDeclaration, loggerClient.info("Step: " + step + " Interval: " + (lastTimestamp - currentLastTime) + " compareTo " + minimalWait + " (" + ar + ')');
475: Trustin Lee, info, MethodDeclaration, loggerServer.info("Step: " + step + " Read: " + nb + " blocks");
497: Trustin Lee, info, IfStmt, loggerServer.info("Step: " + step + " AutoRead: NO");
494: Trustin Lee, info, IfStmt, loggerServer.info("Step: " + step + " Set AutoRead: " + (isAutoRead > 0));
502: Trustin Lee, debug, MethodDeclaration, loggerServer.debug("Step: " + step + " Write: " + nb);
525: Trustin Lee, debug, IfStmt, loggerServer.debug("Step: " + step + " Will Set AutoRead: True");
530: Trustin Lee, info, MethodDeclaration, loggerServer.info("Step: " + exactStep + " Set AutoRead: True");
519: Trustin Lee, info, MethodDeclaration, loggerServer.info("Step: " + exactStep + " Reset AutoRead");
100: Andrei Pozolotin, error, CatchClause, log.error("Client failed.", e);
93: Andrei Pozolotin, info, TryStmt, log.info("Client ready.");
95: Andrei Pozolotin, info, TryStmt, log.info("Client closing...");
98: Andrei Pozolotin, info, TryStmt, log.info("Client is done.");
150: Andrei Pozolotin, info, MethodDeclaration, log.info("Client active {}", ctx.channel());
158: Andrei Pozolotin, info, MethodDeclaration, log.info("Client inactive {}", ctx.channel());
165: Andrei Pozolotin, warn, MethodDeclaration, log.warn("Client unexpected exception from downstream.", cause);
171: Norman Maurer, info, MethodDeclaration, log.info("Client received: " + msg);
230: Andrei Pozolotin, error, CatchClause, log.error("Server failure.", e);
221: Andrei Pozolotin, info, TryStmt, log.info("Server ready.");
223: Andrei Pozolotin, info, TryStmt, log.info("Server closing acceptor...");
225: Andrei Pozolotin, info, TryStmt, log.info("Server closing connectors...");
228: Andrei Pozolotin, info, TryStmt, log.info("Server is done.");
300: Andrei Pozolotin, info, MethodDeclaration, log.info("Server active  : {}", ctx.channel());
309: Andrei Pozolotin, info, MethodDeclaration, log.info("Server inactive: {}", ctx.channel());
316: Andrei Pozolotin, warn, MethodDeclaration, log.warn("Server close on exception.", cause);
322: Trustin Lee, info, MethodDeclaration, log.info("Server received: " + msg);
341: Andrei Pozolotin, info, MethodDeclaration, log.info("Starting server.");
349: Andrei Pozolotin, info, MethodDeclaration, log.info("Starting client.");
356: Andrei Pozolotin, info, MethodDeclaration, log.info("Wait till connection is active.");
360: Andrei Pozolotin, info, MethodDeclaration, log.info("Verify connection is active.");
363: Andrei Pozolotin, info, MethodDeclaration, log.info("Stopping client.");
368: Andrei Pozolotin, info, MethodDeclaration, log.info("Wait till connection is inactive.");
372: Andrei Pozolotin, info, MethodDeclaration, log.info("Verify connection is inactive.");
375: Andrei Pozolotin, info, MethodDeclaration, log.info("Stopping server.");
380: Andrei Pozolotin, info, MethodDeclaration, log.info("Finished server.");
154: Trustin Lee, info, ForeachStmt, logger.info("Compressing the heap dump: {}", xzFilename);
186: Trustin Lee, warn, CatchClause, logger.warn("Failed to compress the heap dump: {}", xzFilename, t);
178: Trustin Lee, info, IfStmt, logger.info("Compressing the heap dump: {} ({}%)", xzFilename, counter * 100 / fileLength);
206: Trustin Lee, warn, IfStmt, logger.warn("Failed to delete the uncompressed heap dump: {}", filename);
217: Trustin Lee, warn, IfStmt, logger.warn("Can't dump heap: HotSpotDiagnosticMXBean unavailable");
222: Trustin Lee, info, MethodDeclaration, logger.info("Dumping heap: {}", filename);
226: Trustin Lee, warn, CatchClause, logger.warn("Failed to dump heap: {}", filename, e);
249: Trustin Lee, warn, CatchClause, logger.warn("Failed to dump threads: {}", filename, e);
234: Trustin Lee, info, TryStmt, logger.info("Dumping threads: {}", filename);
242: Trustin Lee, warn, CatchClause, logger.warn("Can't dump threads: ThreadMXBean.dumpAllThreads() unsupported");
46: madgnome, INFO, TryStmt, b.group(group).channel(NioServerSocketChannel.class).handler(new LoggingHandler(LogLevel.INFO)).childHandler(new Http2ServerInitializer());
463: Norman Maurer, warn, CatchClause, logger.warn("Failed to set channel option '{}' with value '{}' for channel '{}'", option, value, channel, t);
460: Norman Maurer, warn, IfStmt, logger.warn("Unknown channel option '{}' for channel '{}'", option, channel);
196: Trustin Lee, warn, IfStmt, logger.warn("childGroup is not set. Using parentGroup instead.");
270: Scott Mitchell, warn, MethodDeclaration, logger.warn("Failed to register an accepted channel: {}", child, t);
486: Trustin Lee, warn, CatchClause, logger.warn("Force-closing a channel whose registration task was not accepted by an event loop: {}", AbstractChannel.this, t);
783: Trustin Lee, warn, CatchClause, logger.warn("Failed to close a channel.", e);
819: Norman Maurer, warn, CatchClause, logger.warn("Unexpected exception occurred while deregistering a channel.", t);
979: Trustin Lee, warn, IfStmt, logger.warn("Failed to mark a promise as success because it is done already: {}", promise);
988: Trustin Lee, warn, IfStmt, logger.warn("Failed to mark a promise as failure because it's done already: {}", promise, cause);
1014: Norman Maurer, warn, CatchClause, logger.warn("Can't invoke task later as EventLoop rejected it", e);
275: Norman Maurer, warn, IfStmt, logger.warn("Failed to submit an exceptionCaught() event.", t);
276: Norman Maurer, warn, IfStmt, logger.warn("The exceptionCaught() event that was failed to submit was:", cause);
294: Norman Maurer, warn, IfStmt, logger.warn("An exception '{}' [enable DEBUG level for full stacktrace] " + "was thrown by a user handler's exceptionCaught() " + "method while handling the following exception:", error, cause);
288: Dmitry Spikhalskiy, debug, IfStmt, logger.debug("An exception {}" + "was thrown by a user handler's exceptionCaught() " + "method while handling the following exception:", ThrowableUtil.stackTraceToString(error), cause);
843: Norman Maurer, warn, IfStmt, logger.warn("An exception was thrown by a user handler " + "while handling an exceptionCaught event", cause);
253: Scott Mitchell, info, IfStmt, logger.info("Throwable being suppressed because Throwable {} is already pending", pending, t);
346: Scott Mitchell, info, IfStmt, logger.info("Throwable being suppressed because Throwable {} is already pending", pending, t);
91: Norman Maurer, warn, MethodDeclaration, logger.warn("Failed to initialize a channel. Closing: " + ctx.channel(), cause);
156: Norman Maurer, warn, IfStmt, logger.warn("An exception '{}' [enable DEBUG level for full stacktrace] " + "was thrown by a user handler's exceptionCaught() " + "method while handling the following exception:", error, cause);
150: Dmitry Spikhalskiy, debug, IfStmt, logger.debug("An exception {}" + "was thrown by a user handler's exceptionCaught() " + "method while handling the following exception:", ThrowableUtil.stackTraceToString(error), cause);
72: Trustin Lee, debug, IfStmt, logger.debug("-Dio.netty.processId: {} (user-set)", processId);
70: Trustin Lee, warn, IfStmt, logger.warn("-Dio.netty.processId: {} (malformed)", customProcessId);
79: Trustin Lee, debug, IfStmt, logger.debug("-Dio.netty.processId: {} (auto-detected)", processId);
91: Scott Mitchell, warn, CatchClause, logger.warn("-Dio.netty.machineId: {} (malformed)", customMachineId, e);
94: Trustin Lee, debug, IfStmt, logger.debug("-Dio.netty.machineId: {} (user-set)", customMachineId);
101: Fabian Lange, debug, IfStmt, logger.debug("-Dio.netty.machineId: {} (auto-detected)", MacAddressUtil.formatAddress(machineId));
122: Scott Mitchell, debug, CatchClause, logger.debug("Could not invoke ManagementFactory.getRuntimeMXBean().getName(); Android?", t);
129: Scott Mitchell, debug, CatchClause, logger.debug("Could not invoke Process.myPid(); not Android?", t2);
149: Trustin Lee, warn, IfStmt, logger.warn("Failed to find the current process ID from '{}'; using a random value: {}", value, pid);
650: Trustin Lee, warn, IfStmt, logger.warn("Failed to remove a handler: " + ctx.name(), t2);
1188: Norman Maurer, warn, TryStmt, logger.warn("An exceptionCaught() event was fired, and it reached at the tail of the pipeline. " + "It usually means the last handler in the pipeline did not handle the exception.", cause);
1218: Norman Maurer, debug, TryStmt, logger.debug("Discarded inbound message {} that reached at the tail of the pipeline. " + "Please check your pipeline configuration.", msg);
1493: Norman Maurer, warn, IfStmt, logger.warn("Can't invoke handlerAdded() as the EventExecutor {} rejected it, removing handler {}.", executor, ctx.name(), e);
1525: Norman Maurer, warn, IfStmt, logger.warn("Can't invoke handlerRemoved() as the EventExecutor {} rejected it," + " removing handler {}.", executor, ctx.name(), e);
165: Norman Maurer, warn, IfStmt, logger.warn("Failed to close a file.", e);
44: Trustin Lee, debug, IfStmt, logger.debug("-Dio.netty.eventLoopThreads: {}", DEFAULT_EVENT_LOOP_THREADS);
287: Norman Maurer, warn, IfStmt, logger.warn("Failed to mark a promise as failure because it's done already: {}", promise, cause);
614: Trustin Lee, warn, IfStmt, logger.warn("More than one exception was raised. " + "Will report only the first one and log others.", cause);
257: louxiu, warn, CatchClause, logger.warn("Releasing Inbound Queues for channels {}-{} because exception occurred!", this, peer, cause);
335: Scott Mitchell, warn, CatchClause, logger.warn("Closing Local channels {}-{} because exception occurred!", this, peer, cause);
414: Scott Mitchell, warn, CatchClause, logger.warn("Closing Local channels {}-{} because exception occurred!", this, peer, cause);
94: Trustin Lee, warn, IfStmt, logger.warn("Failed to close a partially initialized socket.", e2);
99: Jason Tedor, debug, CatchClause, logger.debug("Unable to get/set System Property: " + key, e);
111: Trustin Lee, debug, IfStmt, logger.debug("-Dio.netty.noKeySetOptimization: {}", DISABLE_KEYSET_OPTIMIZATION);
112: Trustin Lee, debug, IfStmt, logger.debug("-Dio.netty.selectorAutoRebuildThreshold: {}", SELECTOR_AUTO_REBUILD_THRESHOLD);
205: Scott Mitchell, trace, IfStmt, logger.trace("failed to instrument a special java.util.Set into: {}", unwrappedSelector, t);
242: Scott Mitchell, trace, IfStmt, logger.trace("failed to instrument a special java.util.Set into: {}", unwrappedSelector, e);
246: Scott Mitchell, trace, MethodDeclaration, logger.trace("instrumented a special java.util.Set into: {}", unwrappedSelector);
354: Trustin Lee, warn, CatchClause, logger.warn("Failed to create a new Selector.", e);
376: Norman Maurer, warn, CatchClause, logger.warn("Failed to re-register a Channel to the new Selector.", e);
396: Trustin Lee, warn, IfStmt, logger.warn("Failed to close the old Selector.", t);
400: Trustin Lee, info, MethodDeclaration, logger.info("Migrated " + nChannels + " channel(s) to the new Selector.");
486: Norman Maurer, warn, MethodDeclaration, logger.warn("Unexpected exception in the selector loop.", t);
510: Trustin Lee, warn, CatchClause, logger.warn("Failed to close a selector.", e);
703: Trustin Lee, warn, CatchClause, logger.warn("Unexpected exception while running NioTask.channelUnregistered()", e);
813: Norman Maurer, debug, IfStmt, logger.debug(CancelledKeyException.class.getSimpleName() + " raised by a Selector {} - JDK bug?", selector, e);
773: Norman Maurer, debug, IfStmt, logger.debug("Selector.select() returned prematurely because " + "Thread.currentThread().interrupt() was called. Use " + "NioEventLoop.shutdownGracefully() to shutdown the NioEventLoop.");
807: Norman Maurer, debug, IfStmt, logger.debug("Selector.select() returned prematurely {} times in a row for Selector {}.", selectCnt - 1, selector);
825: Trustin Lee, warn, CatchClause, logger.warn("Failed to update SelectionKeys.", t);
149: Trustin Lee, warn, CatchClause, logger.warn("Failed to create a new channel from an accepted socket.", t);
154: Trustin Lee, warn, CatchClause, logger.warn("Failed to close a socket.", t2);
252: Norman Maurer, debug, IfStmt, logger.debug("Exception suppressed because a previous exception occurred.", shutdownInputCause);
190: Trustin Lee, warn, CatchClause, logger.warn("Failed to close a socket.", t);
93: Trustin Lee, warn, IfStmt, logger.warn("Failed to close a partially initialized socket.", e);
160: Norman Maurer, warn, CatchClause, logger.warn("Failed to create a new channel from an accepted socket.", t);
164: Idel Pivnitskiy, warn, CatchClause, logger.warn("Failed to close a socket.", t2);
92: Trustin Lee, warn, CatchClause, logger.warn("Failed to close a socket.", e);
257: Norman Maurer, debug, IfStmt, logger.debug("Exception suppressed because a previous exception occurred.", shutdownInputCause);
886: Nikolay Fedorovskikh, info, MethodDeclaration, logger.info(String.format("Received message: %s", msg));
678: Norman Maurer, debug, IfStmt, logger.debug("Exception suppressed because a previous exception occurred.", shutdownInputCause);
720: Norman Maurer, Error, IfStmt, logger.warn("Error while closing a pipe", e);
338: Norman Maurer, warn, MethodDeclaration, logger.warn("Unexpected exception in the selector loop.", t);
438: Norman Maurer, warn, CatchClause, logger.warn("Failed to close the epoll fd.", e);
443: Norman Maurer, warn, CatchClause, logger.warn("Failed to close the event fd.", e);
448: Scott Mitchell, warn, CatchClause, logger.warn("Failed to close the timer fd.", e);
83: Norman Maurer, debug, IfStmt, logger.debug("Failed to delete a domain socket file: {}", local.path());
187: Carl Mastrangelo, debug, TryStmt, logger.debug("Failed to load {}", sharedLibName, e1);
221: Peeyush Aggarwal, debug, IfStmt, logger.debug("{}: {} (non-existent)", file, fastopen);
209: Peeyush Aggarwal, debug, CatchClause, logger.debug("Failed to get TCP_FASTOPEN from: {}", file, e);
206: Peeyush Aggarwal, debug, IfStmt, logger.debug("{}: {}", file, fastopen);
500: Norman Maurer, debug, IfStmt, logger.debug("Exception suppressed because a previous exception occurred.", shutdownInputCause);
339: Scott Mitchell, warn, CatchClause, logger.warn("Failed to close the kqueue fd.", e);
363: Scott Mitchell, warn, MethodDeclaration, logger.warn("Unexpected exception in the selector loop.", t);
80: Scott Mitchell, debug, IfStmt, logger.debug("Failed to delete a domain socket file: {}", local.path());
129: Carl Mastrangelo, debug, TryStmt, logger.debug("Failed to load {}", sharedLibName, e1);
111: Jestan Nirojan, warn, IfStmt, logger.warn("Failed to close a partially initialized sctp channel.", e2);
135: Jestan Nirojan, warn, CatchClause, logger.warn("Failed to close a sctp channel.", e);
405: Jestan Nirojan, warn, CatchClause, logger.warn("Failed to close a " + selectorName + " selector.", e);
103: Jestan Nirojan, warn, CatchClause, logger.warn("Failed to close a sctp server channel.", e);
176: Jestan Nirojan, warn, CatchClause, logger.warn("Failed to close a selector.", e);
209: Jestan Nirojan, warn, CatchClause, logger.warn("Failed to create a new channel from an accepted sctp channel.", t);
214: Jestan Nirojan, warn, CatchClause, logger.warn("Failed to close a sctp channel.", t2);
64: Andrei.Pozolotin, warn, IfStmt, logger.warn("Failed to close channel.", e2);
78: Andrei.Pozolotin, warn, IfStmt, logger.warn("Failed to close channel.", e2);
83: Andrei.Pozolotin, warn, IfStmt, logger.warn("Failed to close channel.", e2);
54: Andrei.Pozolotin, info, MethodDeclaration, log.info("init");
60: Andrei.Pozolotin, info, MethodDeclaration, log.info("done");
69: Andrei.Pozolotin, info, MethodDeclaration, log.info("init");
118: Andrei.Pozolotin, info, MethodDeclaration, log.info("done");
139: Andrei.Pozolotin, error, CatchClause, log.error("", e);
169: Andrei.Pozolotin, error, CatchClause, log.error("", e);
198: Andrei.Pozolotin, error, CatchClause, log.error("", e);
229: Andrei.Pozolotin, error, CatchClause, log.error("", e);
76: Andrei.Pozolotin, error, CatchClause, log.error("", e);
84: Andrei.Pozolotin, info, MethodDeclaration, log.info("init");
132: Andrei.Pozolotin, info, MethodDeclaration, log.info("done");
98: Trustin Lee, info, WhileStmt, log.info("progress : {} {}", handler1.meter().count(), handler2.meter().count());
107: Trustin Lee, info, MethodDeclaration, log.info("handler1 : {}", handler1.meter().count());
108: Trustin Lee, info, MethodDeclaration, log.info("handler2 : {}", handler2.meter().count());
97: Trustin Lee, info, WhileStmt, log.info("progress : {} {}", handler1.meter().count(), handler2.meter().count());
106: Trustin Lee, info, MethodDeclaration, log.info("handler1 : {}", handler1.meter().count());
107: Trustin Lee, info, MethodDeclaration, log.info("handler2 : {}", handler2.meter().count());
91: Andrei.Pozolotin, info, ForeachStmt, log.info("{} {}% {}", name, done, vars);
59: Trustin Lee, info, MethodDeclaration, log.info("ECHO active {}", NioUdtProvider.socketUDT(ctx.channel()).toStringOptions());
77: Andrei.Pozolotin, error, MethodDeclaration, log.error("exception : {}", e.getMessage());
59: Trustin Lee, info, MethodDeclaration, log.info("ECHO active {}", NioUdtProvider.socketUDT(ctx.channel()).toStringOptions());
65: Trustin Lee, error, MethodDeclaration, log.error("exception", e);
55: Andrei.Pozolotin, debug, CatchClause, log.debug("", e);
54: Andrei Pozolotin, warn, CatchClause, log.warn("Class load or init failure.", e);
51: Andrei Pozolotin, info, TryStmt, log.info("Class load and init success.");
114: Nikolay Fedorovskikh, error, CatchClause, log.error("Failed to find address.");
121: Andrei.Pozolotin, error, CatchClause, log.error("Failed to close socket.");
159: Andrei.Pozolotin, info, ForStmt, log.info(String.format("%s [id: 0x%08x]", title, value));
174: Andrei.Pozolotin, info, MethodDeclaration, log.info("\n\t[java.class.path]{}", text);
188: Andrei.Pozolotin, info, MethodDeclaration, log.info("\n\t[java.library.path]{}", text);
200: Andrei.Pozolotin, info, MethodDeclaration, log.info("\n\t[os/arch]{}", text);
210: Andrei.Pozolotin, info, ForeachStmt, log.info("-> {}", item);
217: Andrei.Pozolotin, error, IfStmt, log.error("property '{}' not defined; terminating", name);
