170: Daniel Wagner-Hall, info, MethodDeclaration, logger.info(new Date() + " - " + message);
149: Simon Stewart, warn, IfStmt, log.warning("You are using a Sizzle locator as a CSS Selector. " + "Please use the Sizzle library directly via the JavascriptExecutor or a plain CSS " + "selector. Your locator was: " + locator);
76: Simon Stewart, WARN, CatchClause, LOGGER.log(Level.WARNING, "Unable to close stream used for reading file: " + name, e);
65: Simon Stewart, warn, IfStmt, log.warning("You should be using attachFile to set the value of a file input element");
68: Simon Stewart, warn, CatchClause, log.warning("Cannot determine whether page supports ready state. Abandoning wait.");
65: Alexei Barantsev, WARN, CatchClause, Logger.getLogger(NetworkInterface.class.getName()).log(Level.WARNING, null, ex);
138: Simon Stewart, INFO, CatchClause, log.log(Level.INFO, "Unable to drain process streams. Ignoring but the exception being swallowed follows.", e);
169: Kristian Rosenvold, warn, MethodDeclaration, LOG.warning("Couldn't find taskkill! Hope it's on the path...");
76: Ahmed Ashour, warn, MethodDeclaration, logger.warning("Augmenter should be applied to the instances of @Augmentable classes " + "or previously augmented instances only (instance class was: " + driver.getClass() + ")");
116: Simon Stewart, info, MethodDeclaration, LOG.info("Using `new ChromeOptions()` is preferred to `DesiredCapabilities.chrome()`");
121: Simon Stewart, info, MethodDeclaration, LOG.info("Using `new FirefoxOptions()` is preferred to `DesiredCapabilities.firefox()`");
136: Simon Stewart, info, MethodDeclaration, LOG.info("Using `new EdgeOptions()` is preferred to `DesiredCapabilities.edge()`");
164: Simon Stewart, info, MethodDeclaration, LOG.info("Using `new OperaOptions()` is preferred to `DesiredCapabilities.operaBlink()`");
169: Simon Stewart, info, MethodDeclaration, LOG.info("Using `new SafariOptions()` is preferred to `DesiredCapabilities.safari()`");
143: Simon Stewart, info, IfStmt, log.info(String.format("HTTP Status: '%d' -> incorrect JSON status mapping for '%s' (%d expected)", httpStatus.get(), webdriverState, error.getW3cHttpStatus()));
77: Simon Stewart, info, IfStmt, LOG.info(String.format("Detected dialect: %s", toReturn.dialect));
900: Simon Stewart, WARN, CatchClause, log.log(Level.WARNING, String.format("WebDriverException thrown by findElement(%s)", by), e);
916: Simon Stewart, WARN, CatchClause, log.log(Level.WARNING, String.format("WebDriverException thrown by findElements(%s)", by), e);
38: Alexei Barantsev, info, MethodDeclaration, log.info("Preparing test environment");
44: Alexei Barantsev, info, MethodDeclaration, log.info("Cleaning test environment");
56: Alexei Barantsev, info, MethodDeclaration, log.info("Stopping browser");
92: Simon Stewart, info, MethodDeclaration, log.info("In dev mode. Copying required files in case we're using a WebDriver-backed Selenium");
127: Alexei Barantsev, info, MethodDeclaration, log.info(">>> Starting " + description);
133: Alexei Barantsev, info, MethodDeclaration, log.info("<<< Finished " + description);
28: Kristian Rosenvold, DEBUG, MethodDeclaration, selenium.setBrowserLogLevel(SeleniumLogLevels.DEBUG);
155: Simon Stewart, warn, IfStmt, log.warning("Downloading PEX");
274: Alexei Barantsev, DEBUG, MethodDeclaration, assertEquals(FirefoxDriverLogLevel.DEBUG.toString(), "debug");
279: Alexei Barantsev, warn, MethodDeclaration, assertEquals(FirefoxDriverLogLevel.fromString("warn"), FirefoxDriverLogLevel.WARN);
280: Alexei Barantsev, ERROR, MethodDeclaration, assertEquals(FirefoxDriverLogLevel.fromString("ERROR"), FirefoxDriverLogLevel.ERROR);
61: Jason Leyba, info, MethodDeclaration, LOG.info("Running: " + testUrl);
481: Daniel Wagner-Hall, WARN, MethodDeclaration, final LogEntry entry2 = new LogEntry(Level.WARNING, timestamp, "entry2");
35: Eran Messeri, DEBUG, MethodDeclaration, assertEquals(Level.FINE, LogLevelMapping.toLevel("DEBUG"));
36: Eran Messeri, INFO, MethodDeclaration, assertEquals(Level.INFO, LogLevelMapping.toLevel("INFO"));
37: Eran Messeri, WARN, MethodDeclaration, assertEquals(Level.WARNING, LogLevelMapping.toLevel("WARNING"));
54: Daniel Wagner-Hall, INFO, MethodDeclaration, localLogs.addEntry(LogType.PROFILER, new LogEntry(Level.INFO, 0, "first"));
55: Daniel Wagner-Hall, INFO, MethodDeclaration, localLogs.addEntry(LogType.PROFILER, new LogEntry(Level.INFO, 2, "third"));
67: Joshua Bruning, INFO, MethodDeclaration, entries.add(new LogEntry(Level.INFO, 0, "hello"));
86: Joshua Bruning, INFO, MethodDeclaration, entries.add(new LogEntry(Level.INFO, 0, "hello"));
133: Jason Juang, trace, MethodDeclaration, when(executeMethod.execute(DriverCommand.GET_LOG, ImmutableMap.of(RemoteLogs.TYPE_KEY, LogType.BROWSER))).thenReturn(new ImmutableMap.Builder<>().put("error", "unknown method").put("message", "Command not found: POST /session/11037/log").put("stacktrace", "").build());
96: Alexei Barantsev, info, MethodDeclaration, logger.info(">>> Starting " + description);
102: Alexei Barantsev, info, MethodDeclaration, logger.info("<<< Finished " + description);
39: Simon Stewart, info, IfStmt, log.info("No browser detected, returning null");
52: Simon Stewart, info, MethodDeclaration, log.info("Providing default driver instance");
86: Jason Leyba, info, IfStmt, logger.info("Using external WebDriver server: " + externalUrl);
105: Jason Leyba, info, IfStmt, logger.info("Using delegate supplier: " + clazz.getName());
125: Jason Leyba, info, TryStmt, logger.info("Loading custom supplier: " + delegateClassName);
154: Jason Leyba, info, TryStmt, logger.info("Waiting for server to be ready at " + serverUrl);
156: Jason Leyba, info, TryStmt, logger.info("Server is ready");
57: Alexei Barantsev, info, MethodDeclaration, log.info("Got a request to start a new selenium server");
59: Alexei Barantsev, info, IfStmt, log.info("Server already started");
83: Alexei Barantsev, info, MethodDeclaration, log.info("Starting selenium server: " + command.toString());
88: Alexei Barantsev, info, TryStmt, log.info("Waiting for server status on URL " + url);
90: Alexei Barantsev, info, TryStmt, log.info("Server is ready");
108: Alexei Barantsev, info, MethodDeclaration, log.info("Stopping selenium server");
110: Alexei Barantsev, info, MethodDeclaration, log.info("Selenium server stopped");
67: Simon Stewart, info, IfStmt, LOG.info("chromedriver will log to " + logFile);
59: Kristian Rosenvold, Error, IfStmt, log.severe("Error adding session : " + testSession);
79: Kristian Rosenvold, info, IfStmt, log.info("Removed a session that had not yet assigned an external key " + o.getInternalKey() + ", indicates failure in session creation " + reason);
152: Kevin Menard, warn, IfStmt, log.warning("Max instance not specified. Using default = 1 instance");
227: Kevin Menard, Error, CatchClause, log.warning("Error executing the timeout when cleaning up slot " + slot + t.getMessage());
240: Kevin Menard, WARN, IfStmt, log.logp(Level.WARNING, "SessionCleanup", null, "session " + session + " has TIMED OUT due to client inactivity and will be released.");
246: Alexei Barantsev, WARN, CatchClause, log.log(Level.WARNING, ignore.getMessage());
253: Kevin Menard, WARN, IfStmt, log.logp(Level.WARNING, "SessionCleanup", null, "session " + session + " has been ORPHANED and will be released");
258: Alexei Barantsev, WARN, CatchClause, log.log(Level.WARNING, ignore.getMessage());
49: Doug Simmons, SEVERE, MethodDeclaration, LOG.log(Level.SEVERE, "Matcher thread dying due to unhandled exception.", e);
155: Doug Simmons, warn, IfStmt, LOG.warning(String.format("Cleaning up stale test sessions on the unregistered node %s", proxy));
242: Doug Simmons, info, CatchClause, LOG.info("Shutting down registry.");
244: Doug Simmons, SEVERE, CatchClause, LOG.log(Level.SEVERE, "Unhandled exception in Matcher thread.", t);
288: Doug Simmons, warn, MethodDeclaration, LOG.warning("Tried to release session with internal key " + internalKey + " but couldn't find it.");
299: Doug Simmons, info, MethodDeclaration, LOG.info("Registered a node " + proxy);
306: Doug Simmons, warn, IfStmt, LOG.warning(String.format("Proxy '%s' is already queued for registration.", proxy));
323: Doug Simmons, Error, CatchClause, LOG.severe("Error running the registration listener on " + proxy + ", " + t.getMessage());
149: Ahmed Ashour, warn, IfStmt, log.warning("Empty pool of nodes.");
155: Ahmed Ashour, warn, IfStmt, log.warning("grid doesn't contain " + new DesiredCapabilities(desiredCapabilities) + " at the moment.");
135: Ahmed Ashour, info, IfStmt, log.info("Trying to create a new session on test slot " + this.capabilities);
250: Kristian Rosenvold, WARN, IfStmt, log.warning("WARNING : using a afterSession on a proxy that can support multiple tests is risky.");
195: Alexei Barantsev, info, MethodDeclaration, LOG.info("Starting auto registration thread. Will try to register every " + registerCycleInterval + " ms.");
206: Alexei Barantsev, info, CatchClause, LOG.info("Couldn't register this node: " + e.getMessage());
186: Luke Inman-Semerau, info, IfStmt, LOG.info("No registration sent ( register = false )");
260: Alexei Barantsev, info, TryStmt, LOG.info("Registering the node to the hub: " + registration);
284: Alexei Barantsev, error, CatchClause, LOG.warning("error getting the parameters from the hub. The node may end up with wrong timeouts." + e.getMessage());
274: Alexei Barantsev, info, TryStmt, LOG.info("Updating the node configuration from the hub");
289: Alexei Barantsev, info, TryStmt, LOG.info("The node is registered to the hub and ready to use");
308: Doug Simmons, info, IfStmt, LOG.info("binding " + servletClass.getCanonicalName() + " to " + path);
116: Simon Stewart, info, MethodDeclaration, log.info(String.format("Selenium build info: version: '%s', revision: '%s'", buildInfo.getReleaseLabel(), buildInfo.getBuildRevision()));
306: Alexei Barantsev, info, MethodDeclaration, log.info(String.format("Launching a Selenium Grid node on port %s", configuration.port));
312: Alexei Barantsev, info, IfStmt, log.info("Selenium Grid node is up and ready to register to the hub");
288: Alexei Barantsev, info, MethodDeclaration, log.info(String.format("Launching Selenium Grid hub on port %s", configuration.port));
266: Alexei Barantsev, info, MethodDeclaration, log.info(String.format("Launching a standalone Selenium Server on port %s", configuration.port));
90: Alexei Barantsev, Error, IfStmt, LOG.warning("Error releasing the resources on timeout for session " + session);
186: Alexei Barantsev, info, IfStmt, LOG.info(e.getMessage());
191: Alexei Barantsev, info, IfStmt, LOG.info(e.getMessage());
113: Luke Inman-Semerau, info, IfStmt, log.info("binding " + servletClass.getCanonicalName() + " to " + path);
258: Alexei Barantsev, info, MethodDeclaration, log.info("Selenium Grid hub is up and running");
259: Alexei Barantsev, info, MethodDeclaration, log.info(String.format("Nodes should register to %s", getRegistrationURL()));
260: Alexei Barantsev, info, MethodDeclaration, log.info(String.format("Clients should connect to %s", getWebDriverHubRequestURL()));
108: Alexei Barantsev, info, SwitchStmt, log.info("Got a request to create a new session: " + new DesiredCapabilities(request.getDesiredCapabilities()));
117: Simon Stewart, INFO, CatchClause, log.log(Level.INFO, "Error forwarding the new session " + e.getMessage(), e);
135: Kristian Rosenvold, WARN, CatchClause, log.log(Level.WARNING, "The client is gone for session " + session + ", terminating");
138: Jari Bakken, SEVERE, CatchClause, log.log(Level.SEVERE, "Socket timed out for session " + session + ", " + e.getMessage());
141: Kristian Rosenvold, SEVERE, CatchClause, log.log(Level.SEVERE, "cannot forward the request " + t.getMessage(), t);
175: Kristian Rosenvold, Error, CatchClause, log.severe("Error running the beforeSessionListener : " + e.getMessage());
40: Kevin Menard, warn, CatchClause, log.warning("The specified class : " + className + " cannot be instantiated " + e.getMessage());
114: Simon Stewart, info, MethodDeclaration, LOG.info(String.format("Binding %s to respond to %s", useThis, onThis));
172: Simon Stewart, info, MethodDeclaration, LOG.info("Capabilities are: " + caps);
175: Alexei Barantsev, info, MethodCallExpr, LOG.info(String.format("Matched factory %s", factory));
52: Simon Stewart, WARN, CatchClause, LOG.log(Level.WARNING, "Caught exception closing session: " + session.getId(), e);
66: Alexei Barantsev, info, MethodDeclaration, LOG.info(String.format("Removing session %s", session));
127: Simon Stewart, info, IfStmt, LOG.info(String.format("Driver provider %s registration is skipped:%n" + " registration capabilities %s does not match the current platform %s", provider, caps, current));
72: Alexei Barantsev, INFO, CatchClause, LOG.log(Level.INFO, "Driver class not found: " + driverClassName);
75: Alexei Barantsev, INFO, CatchClause, LOG.log(Level.INFO, "Driver class is built for higher Java version: " + driverClassName);
82: Alexei Barantsev, info, MethodDeclaration, LOG.info("Creating a new session for " + capabilities);
176: Simon Stewart, WARN, CatchClause, log.log(Level.WARNING, e.getMessage(), e);
173: Alexei Barantsev, info, TryStmt, activeSession.ifPresent(session -> log.info("Started new session " + session));
103: Simon Stewart, info, TryStmt, LOG.info("Bound legacy RC support");
211: Alexei Barantsev, info, MethodDeclaration, LOG.info(String.format("Selenium Server is up and running on port %s", configuration.port));
161: Alexei Barantsev, WARN, CatchClause, log.log(Level.WARNING, e.getMessage(), e);
54: Simon Stewart, SEVERE, IfStmt, log.log(SEVERE, "Unexpected exception during findElement", e);
132: Simon Stewart, WARN, CatchClause, log.log(Level.WARNING, "Exception thrown", e);
136: Simon Stewart, warn, CatchClause, log.warning("Exception: " + toUse.getMessage());
143: Simon Stewart, Error, CatchClause, log.info("Error: " + e.getMessage());
110: Jason Leyba, info, IfStmt, log.info(String.format("Executing: %s)", handler));
125: Jason Leyba, info, IfStmt, log.info("Done: " + handler);
70: Simon Stewart, info, ForeachStmt, LOG.info(step.toString());
100: Simon Stewart, warn, IfStmt, log.warning("Looks like the timeout overflowed, so resetting it to the maximum.");
133: Simon Stewart, INFO, CatchClause, log.log(Level.INFO, "Exception shutting down server. You may ignore this.", e);
256: Simon Stewart, WARN, CatchClause, log.log(Level.WARNING, "Test of browser failed: " + browser, e);
109: Simon Stewart, info, LambdaExpr, LOG.info(locator);
47: Eran Messeri, INFO, MethodDeclaration, LogRecord firstRecord = new LogRecord(Level.INFO, "First Log Record");
60: Eran Messeri, INFO, MethodDeclaration, handler.publish(new LogRecord(Level.INFO, "First Log Record"));
70: Eran Messeri, INFO, MethodDeclaration, LogRecord firstRecord = new LogRecord(Level.INFO, "First Log Record");
85: Daniel Wagner-Hall, INFO, MethodDeclaration, LogRecord firstRecord = new LogRecord(Level.INFO, "First Log Record");
86: Daniel Wagner-Hall, INFO, MethodDeclaration, LogRecord secondRecord = new LogRecord(Level.INFO, "Second Log Record");
102: Daniel Wagner-Hall, INFO, MethodDeclaration, LogRecord firstRecord = new LogRecord(Level.INFO, "First Log Record");
103: Daniel Wagner-Hall, INFO, MethodDeclaration, LogRecord secondRecord = new LogRecord(Level.INFO, "Second Log Record");
105: Kristian Rosenvold, INFO, MethodDeclaration, LogRecord anotherRecord = new LogRecord(Level.INFO, "Another Log Record");
107: Kristian Rosenvold, INFO, MethodDeclaration, LogRecord oneMoreRecord = new LogRecord(Level.INFO, "One More Log Record");
130: Daniel Wagner-Hall, INFO, MethodDeclaration, LogRecord firstSessionLog = new LogRecord(Level.INFO, "First Session Related Log Record");
132: Daniel Wagner-Hall, INFO, MethodDeclaration, LogRecord secondSessionLog = new LogRecord(Level.INFO, "Second Session Related Log Record");
52: Daniel Wagner-Hall, INFO, MethodDeclaration, theLogRecord = new LogRecord(Level.INFO, "");
77: Daniel Wagner-Hall, INFO, MethodDeclaration, theLogRecord = new LogRecord(Level.INFO, "");
91: Daniel Wagner-Hall, INFO, MethodDeclaration, firstLogRecord = new LogRecord(Level.INFO, "");
92: Daniel Wagner-Hall, INFO, MethodDeclaration, secondLogRecord = new LogRecord(Level.INFO, "");
108: Daniel Wagner-Hall, INFO, MethodDeclaration, firstLogRecord = new LogRecord(Level.INFO, "");
109: Daniel Wagner-Hall, INFO, MethodDeclaration, secondLogRecord = new LogRecord(Level.INFO, "");
125: Daniel Wagner-Hall, INFO, MethodDeclaration, firstLogRecord = new LogRecord(Level.INFO, "");
126: Daniel Wagner-Hall, INFO, MethodDeclaration, secondLogRecord = new LogRecord(Level.INFO, "");
127: Daniel Wagner-Hall, INFO, MethodDeclaration, thirdLogRecord = new LogRecord(Level.INFO, "");
145: Daniel Wagner-Hall, INFO, MethodDeclaration, firstLogRecord = new LogRecord(Level.INFO, "");
146: Daniel Wagner-Hall, INFO, MethodDeclaration, secondLogRecord = new LogRecord(Level.INFO, "");
147: Daniel Wagner-Hall, INFO, MethodDeclaration, thirdLogRecord = new LogRecord(Level.INFO, "");
163: Daniel Wagner-Hall, INFO, MethodDeclaration, firstLogRecord = new LogRecord(Level.INFO, "");
164: Daniel Wagner-Hall, INFO, MethodDeclaration, secondLogRecord = new LogRecord(Level.INFO, "");
195: Daniel Wagner-Hall, INFO, MethodDeclaration, firstLogRecord = new LogRecord(Level.INFO, "First log message");
196: Daniel Wagner-Hall, INFO, MethodDeclaration, secondLogRecord = new LogRecord(Level.INFO, "Second log message");
