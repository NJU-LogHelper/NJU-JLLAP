413: Tom-Ski, debug, BlockStmt, getApplicationLogger().debug(tag, message);
418: Tom-Ski, debug, BlockStmt, getApplicationLogger().debug(tag, message, exception);
433: Tom-Ski, error, BlockStmt, getApplicationLogger().error(tag, message);
438: Tom-Ski, error, BlockStmt, getApplicationLogger().error(tag, message, exception);
339: Tom-Ski, debug, BlockStmt, getApplicationLogger().debug(tag, message);
344: Tom-Ski, debug, BlockStmt, getApplicationLogger().debug(tag, message, exception);
359: Tom-Ski, error, BlockStmt, getApplicationLogger().error(tag, message);
364: Tom-Ski, error, BlockStmt, getApplicationLogger().error(tag, message, exception);
266: Tom-Ski, debug, BlockStmt, getApplicationLogger().debug(tag, message);
271: Tom-Ski, debug, BlockStmt, getApplicationLogger().debug(tag, message, exception);
286: Tom-Ski, error, BlockStmt, getApplicationLogger().error(tag, message);
291: Tom-Ski, error, BlockStmt, getApplicationLogger().error(tag, message, exception);
237: Tom-Ski, debug, BlockStmt, getApplicationLogger().debug(tag, message);
242: Tom-Ski, debug, BlockStmt, getApplicationLogger().debug(tag, message, exception);
257: Tom-Ski, error, BlockStmt, getApplicationLogger().error(tag, message);
262: Tom-Ski, error, BlockStmt, getApplicationLogger().error(tag, message, exception);
350: Tom-Ski, debug, BlockStmt, getApplicationLogger().debug(tag, message);
355: Tom-Ski, debug, BlockStmt, getApplicationLogger().debug(tag, message, exception);
370: Tom-Ski, error, BlockStmt, getApplicationLogger().error(tag, message);
375: Tom-Ski, error, BlockStmt, getApplicationLogger().error(tag, message, exception);
402: Tom-Ski, debug, BlockStmt, getApplicationLogger().debug(tag, message);
407: Tom-Ski, debug, BlockStmt, getApplicationLogger().debug(tag, message, exception);
422: Tom-Ski, error, BlockStmt, getApplicationLogger().error(tag, message);
427: Tom-Ski, error, BlockStmt, getApplicationLogger().error(tag, message, exception);
356: Tom-Ski, debug, BlockStmt, getApplicationLogger().debug(tag, message);
361: Tom-Ski, debug, BlockStmt, getApplicationLogger().debug(tag, message, exception);
376: Tom-Ski, error, BlockStmt, getApplicationLogger().error(tag, message);
381: Tom-Ski, error, BlockStmt, getApplicationLogger().error(tag, message, exception);
252: Tom-Ski, debug, BlockStmt, getApplicationLogger().debug(tag, message);
257: Tom-Ski, debug, BlockStmt, getApplicationLogger().debug(tag, message, exception);
272: Tom-Ski, error, BlockStmt, getApplicationLogger().error(tag, message);
277: Tom-Ski, error, BlockStmt, getApplicationLogger().error(tag, message, exception);
338: Tom-Ski, debug, BlockStmt, getApplicationLogger().debug(tag, message);
343: Tom-Ski, debug, BlockStmt, getApplicationLogger().debug(tag, message, exception);
358: Tom-Ski, error, BlockStmt, getApplicationLogger().error(tag, message);
363: Tom-Ski, error, BlockStmt, getApplicationLogger().error(tag, message, exception);
333: Tom-Ski, debug, BlockStmt, getApplicationLogger().debug(tag, message);
338: Tom-Ski, debug, BlockStmt, getApplicationLogger().debug(tag, message, exception);
353: Tom-Ski, error, BlockStmt, getApplicationLogger().error(tag, message);
358: Tom-Ski, error, BlockStmt, getApplicationLogger().error(tag, message, exception);
348: Tom-Ski, error, BlockStmt, getApplicationLogger().error(tag, message);
353: Tom-Ski, error, BlockStmt, getApplicationLogger().error(tag, message, exception);
358: Tom-Ski, debug, BlockStmt, getApplicationLogger().debug(tag, message);
363: Tom-Ski, debug, BlockStmt, getApplicationLogger().debug(tag, message, exception);
34: badlogicgames, ERROR, IfStmt, logger.log(ERROR, "Couldn't find type '" + typeName + "'");
39: badlogicgames, ERROR, IfStmt, logger.log(ERROR, "Type '" + typeName + "' must be an interface");
96: Vincent Bousquet, INFO, ConstructorDeclaration, logger.log(Type.INFO, type.getQualifiedSourceName());
221: Vincent Bousquet, INFO, MethodDeclaration, logger.log(Type.INFO, types.size() + " types reflected");
331: Vincent Bousquet, INFO, IfStmt, logger.log(Type.INFO, "method '" + stub.name + "' of invisible class is not invokable");
336: Vincent Bousquet, INFO, IfStmt, logger.log(Type.INFO, "not emitting code for accessing method " + stub.name + " in class '" + stub.enclosingType + ", either in java.* or GWT related class");
342: Vincent Bousquet, INFO, IfStmt, logger.log(Type.INFO, "method '" + stub.name + "' of class '" + stub.enclosingType + "' is not invokable because the class is an array type");
354: Vincent Bousquet, INFO, IfStmt, logger.log(Type.INFO, "method '" + stub.name + "' of class '" + stub.enclosingType + " has long parameter, prohibited in JSNI");
350: Vincent Bousquet, INFO, IfStmt, logger.log(Type.INFO, "method '" + stub.name + "' of class '" + stub.enclosingType + "' is not invokable because one of its argument types is not visible");
362: Vincent Bousquet, INFO, IfStmt, logger.log(Type.INFO, "method '" + stub.name + "' of class '" + stub.enclosingType + "' is not invokable because its return type is not visible");
367: Vincent Bousquet, INFO, IfStmt, logger.log(Type.INFO, "method '" + stub.name + "' of class '" + stub.enclosingType + " has long return type, prohibited in JSNI");
426: Vincent Bousquet, INFO, IfStmt, logger.log(Type.INFO, "field '" + stub.name + "' in class '" + stub.enclosingType + "' is not accessible as its type '" + stub.type + "' is not public");
431: Vincent Bousquet, INFO, IfStmt, logger.log(Type.INFO, "not emitting code for accessing field " + stub.name + " in class '" + stub.enclosingType + ", either in java.* or GWT related class");
437: Vincent Bousquet, INFO, IfStmt, logger.log(Type.INFO, "not emitting code for accessing field " + stub.name + " in class '" + stub.enclosingType + " as its of type long which can't be used with JSNI");
590: anserran, INFO, IfStmt, logger.log(Type.INFO, c.getName() + " can't be instantiated. Constructors not generated");
648: hneuer, INFO, IfStmt, logger.log(Type.INFO, "Skipping non-visible constructor for class " + c.getName());
652: hneuer, INFO, IfStmt, logger.log(Type.INFO, "Skipping non-public constructor for final class" + c.getName());
756: Daniel Ludwig, ERROR, CatchClause, logger.log(Type.ERROR, "Error invoking annotation method.");
758: Daniel Ludwig, ERROR, CatchClause, logger.log(Type.ERROR, "Error invoking annotation method.");
808: Daniel Ludwig, ERROR, IfStmt, logger.log(Type.ERROR, "Return type not supported (or not yet implemented).");
56: badlogicgames, DEBUG, ConstructorDeclaration, startTime = manager.log.getLevel() == Logger.DEBUG ? TimeUtils.nanoTime() : 0;
186: NathanSweet, debug, IfStmt, log.debug("Unload (from tasks): " + fileName);
202: davebaol, debug, IfStmt, log.debug("Unload (from queue): " + fileName);
224: davebaol, debug, IfStmt, log.debug("Unload (decrement): " + fileName);
215: davebaol, debug, IfStmt, log.debug("Unload (dispose): " + fileName);
366: davebaol, debug, MethodDeclaration, log.debug("Queued: " + assetDesc);
409: davebaol, debug, MethodDeclaration, log.debug("Waiting for loading to complete...");
412: davebaol, debug, MethodDeclaration, log.debug("Loading complete.");
424: NathanSweet, debug, MethodDeclaration, log.debug("Waiting for asset to be loaded: " + fileName);
429: NathanSweet, debug, MethodDeclaration, log.debug("Asset loaded: " + fileName);
461: davebaol, info, IfStmt, log.info("Loading dependency: " + dependendAssetDesc);
453: davebaol, debug, IfStmt, log.debug("Dependency already loaded: " + dependendAssetDesc);
484: davebaol, info, IfStmt, log.info("Loading: " + assetDesc);
473: davebaol, debug, IfStmt, log.debug("Already loaded: " + assetDesc);
544: NathanSweet, debug, IfStmt, log.debug("Loaded: " + (endTime - task.startTime) / 1000000f + "ms " + task.assetDesc);
572: davebaol, Error, MethodDeclaration, log.error("Error loading asset.", t);
613: davebaol, debug, MethodDeclaration, log.debug("Loader set: " + ClassReflection.getSimpleName(type) + " -> " + ClassReflection.getSimpleName(loader.getClass()));
648: davebaol, debug, MethodDeclaration, log.debug("Disposing.");
85: cypherdare, error, IfStmt, manager.getLogger().error("ShaderProgram " + fileName + " failed to compile:\n" + shaderProgram.getLog());
54: davebaol, ERROR, MethodDeclaration, Gdx.app.setLogLevel(Application.LOG_ERROR);
129: davebaol, DEBUG, MethodDeclaration, Gdx.app.setLogLevel(Application.LOG_DEBUG);
