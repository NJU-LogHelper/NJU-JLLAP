199: cushon, warn, IfStmt, log.warning(diagnostic.pos(), "proc.messager", diagnostic.message());
197: cushon, error, IfStmt, log.error(diagnostic.pos(), "proc.messager", diagnostic.message());
166: Klaus Aehlig, INFO, CatchClause, logger.log(Level.INFO, "Could no compute commandline of reported action", e);
64: lberki, info, IfStmt, logger.info("Blaze version info: " + info.getSummary());
62: lberki, warn, IfStmt, logger.warning("Blaze release version information not available");
473: lberki, info, MethodDeclaration, logger.info("Starting analysis");
608: lberki, info, IfStmt, logger.info(msg);
627: lberki, info, MethodDeclaration, logger.info("Finished analysis");
398: Han-Wen Nienhuys, WARN, CatchClause, LoggingUtil.logToRemote(Level.WARNING, "Failed creating cached protocol buffer", e);
69: Klaus Aehlig, warn, CatchClause, logger.warning("IO Error writing to file " + resolvedFile + ": " + e);
285: Justine Tunney, WARN, CatchClause, logger.log(Level.WARNING, "close() failed in loser zombie thread", e);
205: buchgr, INFO, MethodDeclaration, logger.log(Level.INFO, "Closing the build event service transport.");
266: buchgr, INFO, IfStmt, logger.log(Level.INFO, "Forcefully closing the build event service transport.");
473: Googler, INFO, MethodDeclaration, logger.log(Level.INFO, String.format("Starting PublishBuildToolEventStream() RPC pendingSendCount=%s", pendingSend.size()));
479: Googler, INFO, MethodDeclaration, logger.log(Level.INFO, String.format("Started PublishBuildToolEventStream() RPC pendingSendCount=%s", pendingSend.size()));
508: Googler, WARN, CatchClause, logger.log(Level.WARNING, String.format("Aborting publishBuildToolEventStream RPC (status=%s): %s", status, additionalDetail), e);
493: Googler, INFO, TryStmt, logger.log(Level.INFO, String.format("Will end publishEventStream() isLastEvent: %s isStreamActive: %s", isLastEvent(event), besClient.isStreamActive()));
530: buchgr, WARN, CatchClause, logger.log(Level.WARNING, "Cancelling publishBuildToolEventStream RPC: " + additionalDetail);
520: Googler, INFO, TryStmt, logger.log(Level.INFO, "Done with publishEventStream(). Status: " + status);
560: Googler, INFO, IfStmt, logger.log(Level.INFO, "Last ACK received.");
602: buchgr, INFO, CatchClause, logger.log(Level.INFO, message, lastKnownError);
54: olaola, SEVERE, CatchClause, logger.log(Level.SEVERE, e.getMessage(), e);
62: lberki, SEVERE, CatchClause, logger.log(Level.SEVERE, e.getMessage(), e);
73: olaola, SEVERE, LambdaExpr, logger.log(Level.SEVERE, t.getMessage(), t);
425: janakr, warn, IfStmt, logger.warning("Detected " + jobs + " processors, which exceed the maximum allowed number of jobs of " + MAX_JOBS + "; something seems wrong");
436: janakr, info, IfStmt, logger.info("Flag \"jobs\" was set to \"auto\"; using " + jobs + " jobs");
151: Googler, info, TryStmt, logger.info("Build identifier: " + request.getId());
216: Googler, info, TryStmt, logger.info("Configurations created");
257: Googler, info, IfStmt, logger.info("No analysis requested, so finished");
569: janakr, WARN, IfStmt, logger.log(Level.WARNING, "Suppressed interrupted exception during stop request because already failing with exit" + " code " + exitCondition, ie);
273: Googler, WARN, SwitchStmt, logger.log(Level.WARNING, "Found critical error in queue visitor", e);
49: lberki, SEVERE, CatchClause, logger.log(Level.SEVERE, "Error thrown by runnable in " + name, error);
107: olaola, WARN, CatchClause, logger.log(Level.WARNING, "Error computing spawn inputs", e);
125: olaola, WARN, CatchClause, logger.log(Level.WARNING, "Error computing spawn event output properties", ex);
205: olaola, WARN, CatchClause, logger.log(Level.WARNING, "Error computing spawn event file properties", e);
198: jmmv, info, TryStmt, log.info("Queried Xcode SDK root with key " + key + " and got " + sdkRoot);
291: jmmv, info, TryStmt, log.info("Queried Xcode developer dir with key " + key + " and got " + developerDir);
206: ulfjack, info, MethodDeclaration, logger.info(String.format("Step #%d time: %.3f delta: %.3f state: %s --> %s", id, totalDelta / 1000f, stepDelta / 1000f, currentState, newState));
223: ulfjack, info, MethodDeclaration, logger.info(String.format("starting local subprocess #%d, argv: %s", id, debugCmdString()));
330: Janak Ramakrishnan, info, MethodDeclaration, logger.info(logMessage);
585: Han-Wen Nienhuys, INFO, MethodDeclaration, logEvent(ProfilerTask.INFO, "Finishing");
161: Janak Ramakrishnan, info, IfStmt, logger.info("Spent " + elapsedTime + " milliseconds evaluating query");
360: lberki, info, MethodDeclaration, logger.info(String.format("transformed query [%s] to [%s]", Ascii.truncate(queryExpression.toString(), MAX_QUERY_EXPRESSION_LOG_CHARS, "[truncated]"), Ascii.truncate(transformedQueryExpression.toString(), MAX_QUERY_EXPRESSION_LOG_CHARS, "[truncated]")));
392: lberki, INFO, IfStmt, logger.log(Level.INFO, "About to shutdown query threadpool because of throwable", throwableToThrow);
104: olaola, info, MethodDeclaration, logger.info("Command: buildRequestId = " + buildRequestId + ", commandId = " + commandId);
485: lberki, SEVERE, CatchClause, logger.log(Level.SEVERE, "Shutting down due to exception", e);
570: Han-Wen Nienhuys, WARN, CatchClause, LoggingUtil.logToRemote(Level.WARNING, "Unable to close command.log", e);
519: Han-Wen Nienhuys, info, MethodDeclaration, templateLogger.info("Log level: " + templateLogger.getLevel());
596: lberki, SEVERE, MethodDeclaration, logger.log(Level.SEVERE, "Failure in EventBus subscriber", exception);
624: lberki, info, MethodDeclaration, logger.info("Starting Blaze server with " + maybeGetPidString() + "args " + Arrays.toString(args));
762: lberki, warn, WhileStmt, logger.warning("Slow interrupt number " + count + " in batch mode");
770: lberki, info, MethodDeclaration, logger.info("User interrupt");
780: lberki, warn, IfStmt, logger.warning("Second --batch interrupt: Reverting to JVM SIGINT handler");
794: lberki, info, MethodDeclaration, logger.info("Running Blaze in batch mode with " + maybeGetPidString() + "startup args " + commandLineOptions.getStartupArgs());
825: lberki, info, TryStmt, logger.info(getRequestLogString(commandLineOptions.getOtherArgs()));
872: lberki, SEVERE, CatchClause, logger.log(Level.SEVERE, "Exception while executing binary from 'run' command", e);
247: lberki, WARN, CatchClause, logger.log(Level.WARNING, "Failed to load action cache: " + e.getMessage(), e);
248: Yun Peng, WARN, CatchClause, LoggingUtil.logToRemote(Level.WARNING, "Failed to load action cache: " + e.getMessage(), e);
292: lberki, warn, CatchClause, logger.warning("Couldn't write to '" + outputBaseReadmeFile + "': " + e.getMessage());
301: lberki, warn, CatchClause, logger.warning("Couldn't write to '" + filePath + "': " + e.getMessage());
319: lberki, warn, CatchClause, logger.warning("failed to create execution root '" + directories.getExecRoot() + "': " + e.getMessage());
69: lberki, info, IfStmt, logger.info("(Not a released binary; not logged.)");
144: lberki, SEVERE, MethodDeclaration, logger.log(Level.SEVERE, getProductName() + " crashed", e);
109: lberki, info, IfStmt, logger.info(criticalPath.toString());
110: lberki, info, IfStmt, logger.info("Slowest actions:\n  " + Joiner.on("\n  ").join(criticalPathComputer.getSlowestComponents()));
48: lberki, info, MethodDeclaration, logger.info(message + ": hit count=" + stats.hitCount() + ", miss count=" + stats.missCount() + ", hit rate=" + stats.hitRate() + ", eviction count=" + stats.evictionCount());
65: lberki, info, IfStmt, logger.info("Reconfiguring cache with size=" + options.cacheSizeForComputedFileDigests);
72: lberki, info, IfStmt, logger.info("Disabled cache");
52: ulfjack, WARN, CatchClause, LoggingUtil.logToRemote(Level.WARNING, "Unable to delete command.log", ioException);
61: ulfjack, WARN, CatchClause, LoggingUtil.logToRemote(Level.WARNING, "Unable to delete or open command.log", ioException);
294: lberki, warn, CatchClause, logger.warning("IO Error writing to output stream: " + e);
432: lberki, warn, CatchClause, logger.warning("IO Error writing to output stream: " + e);
550: Klaus Aehlig, warn, CatchClause, logger.warning("IO Error writing to output stream: " + e);
581: Klaus Aehlig, warn, CatchClause, logger.warning("IO Error writing to user terminal: " + e);
661: lberki, warn, CatchClause, logger.warning("IO Error writing to output stream: " + e);
738: lberki, warn, CatchClause, logger.warning("IO Error writing to output stream: " + e);
457: lberki, warn, CatchClause, logger.warning("IO Error writing to user terminal: " + e);
129: lberki, info, IfStmt, logger.info("Triggering a full GC with " + space.getUsed() + " out of " + space.getMax() + " used");
124: lberki, info, IfStmt, logger.info(exitMsg);
264: Han-Wen Nienhuys, Warn, MethodDeclaration, summaryBuilder.addTestTimes(result.getData().getTestTimesList()).addPassedLogs(passed).addFailedLogs(failed).addWarnings(result.getData().getWarningList()).collectFailedTests(result.getData().getTestCase()).setRanRemotely(result.getData().getIsRemoteStrategy());
65: Han-Wen Nienhuys, WARN, CatchClause, LoggingUtil.logToRemote(Level.WARNING, "Error while reading test log", e);
77: Han-Wen Nienhuys, WARN, CatchClause, LoggingUtil.logToRemote(Level.WARNING, "Error while reading test log", e);
168: Han-Wen Nienhuys, WARN, CatchClause, LoggingUtil.logToRemote(Level.WARNING, "Error while reading coverage data file size", e);
194: lberki, info, MethodDeclaration, logger.info("Executing shell commmand " + ShellEscaper.escapeString(command));
241: lberki, info, IfStmt, logger.info("Output cleaning...");
237: lberki, info, IfStmt, logger.info("Expunging asynchronously...");
215: lberki, info, IfStmt, logger.info("Expunging...");
88: jmmv, warn, CatchClause, log.warning("Failed to destroy running sandboxfs instance; mount point may have " + "been left behind: " + e);
112: jmmv, info, MethodDeclaration, log.info("Mounting sandboxfs (" + binary + ") onto " + mountPoint);
204: jmmv, warn, CatchClause, log.warning("Failed to close sandboxfs's stdin pipe: " + e);
213: jmmv, warn, CatchClause, log.warning("Failed to close sandboxfs's stdout pipe: " + e);
131: lberki, info, ConstructorDeclaration, logger.info(String.format("Starting command %s on thread %s", id, thread.getName()));
144: lberki, info, MethodDeclaration, logger.info(String.format("Finished command %s on thread %s", id, thread.getName()));
229: lberki, info, IfStmt, logger.info(String.format("Interrupting thread %s due to the streaming %s call being cancelled " + "(likely client hang up or explicit gRPC-level cancellation)", commandThread.getName(), rpcCommandName));
352: lberki, info, SwitchStmt, logger.info("Client disconnected for stream thread " + Thread.currentThread().getName());
469: lberki, info, CatchClause, logger.info("Cannot read PID file: " + e.getMessage());
476: lberki, warn, IfStmt, logger.warning("PID file deleted or overwritten but shutdown is already in progress");
646: nharmata, info, MethodDeclaration, logger.info("About to shutdown due to idleness");
796: lberki, info, CatchClause, logger.info("Client cancelled command while rejecting it: " + e.getMessage());
836: lberki, info, CatchClause, logger.info("The client cancelled the command before receiving the command id: " + e.getMessage());
853: lberki, info, TryStmt, logger.info(BlazeRuntime.getRequestLogString(args));
874: lberki, info, IfStmt, logger.info(String.format("Client disconnected before we could send exit code for command %s", commandId));
908: lberki, info, CatchClause, logger.info(String.format("Client cancelled command %s just right before its end: %s", commandId, e.getMessage()));
945: lberki, info, MethodDeclaration, logger.info(String.format("Got CancelRequest for command id %s", request.getCommandId()));
969: lberki, info, IfStmt, logger.info("Cannot find command " + request.getCommandId() + " to interrupt");
962: lberki, info, IfStmt, logger.info(String.format("Interrupting command %s on thread %s", request.getCommandId(), pendingCommand.thread.getName()));
978: lberki, info, CatchClause, logger.info("Client cancelled RPC of cancellation request for " + request.getCommandId());
417: lberki, Debug, MethodDeclaration, logger.fine(toDebugString());
328: lberki, WARN, CatchClause, logger.log(Level.WARNING, message, ioe);
100: lberki, info, IfStmt, logger.info("Initial baseline view for " + pathEntry + " is " + newView);
106: lberki, info, MethodDeclaration, logger.info("About to compute diff between " + baselineView + " and " + newView + " for " + pathEntry);
125: lberki, info, MethodDeclaration, logger.info("Broken diff awareness for " + pathEntry + ": " + e);
143: lberki, info, IfStmt, logger.info("Using " + newDiffAwareness.name() + " DiffAwareness strategy for " + pathEntry);
221: lberki, info, IfStmt, logger.info("Encountered an external path " + rootedPath);
165: lberki, info, IfStmt, logger.info("Not checking for dirty actions since nothing was modified");
168: lberki, info, MethodDeclaration, logger.info("Accumulating dirty actions");
182: lberki, info, MethodDeclaration, logger.info("Sharded action values for batching");
224: lberki, info, MethodDeclaration, logger.info("Completed output file stat checks");
270: Han-Wen Nienhuys, WARN, CatchClause, LoggingUtil.logToRemote(Level.WARNING, "Unable to process batch stat", e);
271: lberki, WARN, CatchClause, logger.log(Level.WARNING, "Unable to process batch stat", e);
482: felly, info, IfStmt, logger.info(String.format("Spent %d ms checking %d filesystem nodes (%d scanned)", TimeUnit.MILLISECONDS.convert(elapsedTimeNanos, TimeUnit.NANOSECONDS), numKeysChecked.get(), numKeysScanned.get()));
114: lberki, warn, IfStmt, logger.warning("Unable to find " + unknownKeys + " in the batch lookup of " + pkgKeys + ". Successfully looked up " + packages.keySet());
99: lberki, info, MethodDeclaration, logger.info("Starting pattern evaluation");
178: lberki, info, MethodDeclaration, logger.info("Starting test suite expansion");
235: lberki, info, MethodDeclaration, logger.info("Target pattern evaluation finished");
481: lberki, info, MethodDeclaration, logger.info("About to scan skyframe graph checking for filesystem nodes of types " + Iterables.toString(fileTypesToCheck));
553: lberki, info, MethodDeclaration, logger.info(result.toString());
612: ccalvarin, info, IfStmt, logger.info("Set incremental state to " + trackIncrementalState);
995: Janak Ramakrishnan, warn, MethodDeclaration, logger.warning(String.format("Error creating %s%s%s: %s", isSymlink ? "symlink " : "", prefix, genrule ? " by genrule" : "", exception.getMessage()));
973: lberki, info, MethodDeclaration, logger.info(String.format("Found %d modified files from last build", modifiedFiles));
184: shreyax, info, IfStmt, logger.info("Skylark inlining cache stats from earlier build: " + skylarkImportLookupValueCache.stats());
56: janakr, info, MethodDeclaration, log.info("Building ObjectCodecRegistry");
159: shahan, FINE, CatchClause, log.log(Level.FINE, "Skipping registration of " + codecType + " because it had no default constructor.");
104: shahan, INFO, MethodDeclaration, logger.log(Level.INFO, underTest.getEncodedClass().getSimpleName() + " total serialized bytes = " + totalBytes + ", " + timer);
182: shahan, INFO, MethodDeclaration, logger.log(Level.INFO, subjects.get(0).getClass().getSimpleName() + " total serialized bytes = " + totalBytes + ", " + timer);
597: Han-Wen Nienhuys, WARN, IfStmt, LoggingUtil.logToRemote(Level.WARNING, message, new ConversionException(message));
89: Han-Wen Nienhuys, trace, IfStmt, logRecord.setThrown(trace);
391: lberki, info, MethodDeclaration, logger.info(String.format("Loaded cache '%s' [%s bytes]", mapFile, fileSize));
31: lberki, warn, MethodDeclaration, logger.warning("Interrupt took too long. Dumping thread state.");
34: lberki, warn, ForeachStmt, logger.warning("\"" + t.getName() + "\"" + " " + " Thread id=" + t.getId() + " " + t.getState());
37: lberki, warn, ForeachStmt, logger.warning("\t" + line);
39: lberki, warn, ForeachStmt, logger.warning("");
41: Han-Wen Nienhuys, WARN, MethodDeclaration, LoggingUtil.logToRemote(Level.WARNING, "Slow interrupt", new SlowInterruptException());
131: Laszlo Csomor, info, IfStmt, logger.info("Will have to wait for a millisecond on completion because of " + path);
137: Laszlo Csomor, info, IfStmt, logger.info("Will have to wait for a second on completion because of " + path);
194: lberki, info, IfStmt, logger.info("Waited for " + (clock.currentTimeMillis() - before) + "ms for file system" + " to catch up");
399: mschaller, warn, IfStmt, logger.warning("Aborting evaluation due to " + builderException + " while evaluating " + skyKey);
183: Janak Ramakrishnan, info, IfStmt, logger.info("Found cycle : " + cycle + " from " + graphPath);
190: lberki, warn, SwitchStmt, logger.warning(String.format("Unknown operation '%s' from invocation policy for flag '%s'", flagPolicy.policy.getOperationCase(), flagName));
296: Adam Michael, warn, MethodDeclaration, assertThat(loggingHandler.warnings).containsExactly(MergeConflict.of(fqnFactory.parse("string/exit"), DataResourceXml.createWithNoNamespace(directRoot.resolve("res/values/strings.xml"), SimpleXmlResourceValue.createWithValue(SimpleXmlResourceValue.Type.STRING, "no way out")), DataResourceXml.createWithNoNamespace(directRoot.resolve("res/values/strings.xml"), SimpleXmlResourceValue.createWithValue(SimpleXmlResourceValue.Type.STRING, "wrong way out"))).toConflictMessage());
401: Googler, warn, MethodDeclaration, assertThat(loggingHandler.warnings).isEmpty();
486: Adam Michael, warn, MethodDeclaration, assertThat(loggingHandler.warnings).containsExactly(MergeConflict.of(fqnFactory.parse("string/exit"), DataResourceXml.createWithNoNamespace(transitiveRoot.resolve("res/values/strings.xml"), SimpleXmlResourceValue.createWithValue(SimpleXmlResourceValue.Type.STRING, "no way out")), DataResourceXml.createWithNoNamespace(transitiveRoot.resolve("res/values/strings.xml"), SimpleXmlResourceValue.createWithValue(SimpleXmlResourceValue.Type.STRING, "wrong way out"))).toConflictMessage());
588: Adam Michael, warn, MethodDeclaration, assertThat(loggingHandler.warnings).containsExactly(MergeConflict.of(fqnFactory.parse("string/exit"), DataResourceXml.createWithNoNamespace(directRoot.resolve("res/values/strings.xml"), SimpleXmlResourceValue.createWithValue(SimpleXmlResourceValue.Type.STRING, "no way out")), DataResourceXml.createWithNoNamespace(transitiveRoot.resolve("res/values/strings.xml"), SimpleXmlResourceValue.createWithValue(SimpleXmlResourceValue.Type.STRING, "wrong way out"))).toConflictMessage());
641: Adam Michael, warn, MethodDeclaration, assertThat(loggingHandler.warnings).containsExactly(MergeConflict.of(fullyQualifiedName, DataResourceXml.createWithNoNamespace(directRoot.resolve("res/values/strings.xml"), SimpleXmlResourceValue.createWithValue(SimpleXmlResourceValue.Type.STRING, "no way out")), DataResourceXml.createWithNoNamespace(transitiveRoot.resolve("res/values/strings.xml"), SimpleXmlResourceValue.createWithValue(SimpleXmlResourceValue.Type.STRING, "wrong way out"))).toConflictMessage());
780: Adam Michael, warn, MethodDeclaration, assertThat(loggingHandler.warnings).containsExactly(MergeConflict.of(fqnFactory.parse("drawable/rounded_corners"), DataValueFile.of(directRoot.resolve("res/drawable/rounded_corners.png")), DataValueFile.of(transitiveRoot.resolve("res/drawable/rounded_corners.9.png"))).toConflictMessage());
1146: Adam Michael, warn, MethodDeclaration, assertThat(loggingHandler.warnings).containsExactly(MergeConflict.of(RelativeAssetPath.Factory.of(directRootOne.resolve("assets")).create(directRootOne.resolve("assets/hunting/of/the/snark.txt")), DataValueFile.of(directRootOne.resolve("assets/hunting/of/the/snark.txt")), DataValueFile.of(directRootTwo.resolve("assets/hunting/of/the/snark.txt"))).toConflictMessage());
1221: Adam Michael, warn, MethodDeclaration, assertThat(loggingHandler.warnings).containsExactly(MergeConflict.of(RelativeAssetPath.Factory.of(transitiveRootOne.resolve("assets")).create(transitiveRootOne.resolve("assets/hunting/of/the/snark.txt")), DataValueFile.of(transitiveRootOne.resolve("assets/hunting/of/the/snark.txt")), DataValueFile.of(transitiveRootTwo.resolve("assets/hunting/of/the/snark.txt"))).toConflictMessage());
1286: Adam Michael, warn, MethodDeclaration, assertThat(loggingHandler.warnings).containsExactly(MergeConflict.of(RelativeAssetPath.Factory.of(directRoot.resolve("assets")).create(directRoot.resolve("assets/hunting/of/the/snark.txt")), DataValueFile.of(directRoot.resolve("assets/hunting/of/the/snark.txt")), DataValueFile.of(transitiveRoot.resolve("assets/hunting/of/the/snark.txt"))).toConflictMessage());
1321: Adam Michael, warn, MethodDeclaration, assertThat(loggingHandler.warnings).containsExactly(MergeConflict.of(RelativeAssetPath.Factory.of(directRoot.resolve("assets")).create(directRoot.resolve("assets/hunting/of/the/snark.txt")), DataValueFile.of(directRoot.resolve("assets/hunting/of/the/snark.txt")), DataValueFile.of(transitiveRoot.resolve("assets/hunting/of/the/snark.txt"))).toConflictMessage());
42: schmitt, WARN, MethodDeclaration, LogRecord logRecord = createLogRecord(Level.WARNING, TIMESTAMP);
206: Googler, SEVERE, CatchClause, logger.log(Level.SEVERE, e.getMessage());
209: Andrew Pellegrini, SEVERE, CatchClause, logger.log(Level.SEVERE, "Error during merging resources", e);
48: asteinb, SEVERE, CatchClause, getLogger().log(Level.SEVERE, "Unexpected", e);
110: Googler, SEVERE, CatchClause, logger.log(Level.SEVERE, e.getMessage());
113: Googler, SEVERE, CatchClause, logger.log(Level.SEVERE, "Error during merging resources", e);
118: Googler, SEVERE, CatchClause, logger.log(Level.SEVERE, "Unexpected", e);
407: corysmith, warn, IfStmt, logger.warning(Joiner.on("\n").join(messages));
320: Googler, SEVERE, CatchClause, logger.log(Level.SEVERE, e.getMessage());
323: Googler, SEVERE, CatchClause, logger.log(Level.SEVERE, "Error during merging resources", e);
328: Googler, SEVERE, CatchClause, logger.log(Level.SEVERE, "Unexpected", e);
480: Googler, SEVERE, IfStmt, logger.log(Level.SEVERE, "Android resources cannot be provided if the instrumentation package is the same as " + "the package under test, but the instrumentation package (in the manifest) and " + "the package under test both had the same package: " + options.packageUnderTest);
464: Googler, Error, CatchClause, stdLogger.error(formatError, "error during reading source %s", fileName);
206: corysmith, SEVERE, CatchClause, logger.log(Level.SEVERE, "Unexpected", e);
144: Googler, SEVERE, CatchClause, logger.log(Level.SEVERE, "Errors during R generation.", e);
233: Andrew Pellegrini, SEVERE, CatchClause, logger.log(SEVERE, "Error during merging manifests", e);
311: Googler, warn, CatchClause, logger.warning(String.format("%s is an invalid resource directory due to %s", dir, e.getMessage()));
139: corysmith, warn, IfStmt, logger.warning(String.format("Multiple entry names declared for public entry identifier 0x%x (%s and %s)", prevId, previousMapping, entry.getKey()));
214: corysmith, warn, IfStmt, logger.warning(String.format("resource %s/%s has conflicting public identifiers (0x%x vs 0x%x)", type, name, lower, higher));
321: corysmith, warn, IfStmt, logger.warning(String.format("%s has conflicting type codes for its public identifiers (%s=%s vs %s=%s)", currentType.getName(), previousResource, reservedTypeSlot, publicEntry.getKey(), typePortion));
335: corysmith, warn, IfStmt, logger.warning(String.format("Cannot force ATTR to have type code other than 0x%02x (got 0x%02x from %s)", ATTR_TYPE_ID, reservedTypeSlot, previousResource));
346: asteinb, warn, IfStmt, logger.warning(String.format("Multiple type names declared for public type identifier 0x%x (%s vs %s)", reservedTypeSlot, alreadyAssigned, currentType));
341: asteinb, warn, IfStmt, logger.warning(String.format("Invalid public resource of type %s - ignoring", currentType));
326: Andrew Pellegrini, SEVERE, CatchClause, logger.log(Level.SEVERE, "Error shrinking resources", e);
135: Googler, warn, IfStmt, logger.warning(String.format("%s has multiple namespaces: %s and %s. Using %s." + " This will be an error in the future.", prefix, namespaceUri, combinedNamespaces.get(prefix), namespaceUri));
35: carmi, info, MethodDeclaration, logger.info("Start of 'load'");
45: carmi, info, MethodDeclaration, logger.info("End of 'load'");
56: Philipp Wollermann, WARN, CatchClause, logger.log(WARNING, "getActionResult request failed.", e);
70: Philipp Wollermann, WARN, CatchClause, logger.log(WARNING, "updateActionResult request failed.", e);
92: Philipp Wollermann, WARN, CatchClause, logger.log(WARNING, "Read request failed.", e);
104: ulfjack, SEVERE, CatchClause, logger.log(SEVERE, "Failed to create temporary file for upload", e);
204: olaola, WARN, IfStmt, logger.log(WARNING, "Write request failed remotely.", t);
210: ulfjack, WARN, CatchClause, logger.log(WARNING, "Could not delete temp file.", e);
254: Philipp Wollermann, WARN, CatchClause, logger.log(WARNING, "Write request failed.", e);
239: ulfjack, WARN, CatchClause, logger.log(WARNING, "Could not delete temp file.", e);
157: olaola, SEVERE, CatchClause, logger.log(Level.SEVERE, "Work failed: {0} {1}.", new Object[] { workDetails, e });
166: ulfjack, SEVERE, CatchClause, logger.log(SEVERE, String.format("Failed to delete tmp directory %s: %s", tempRoot, Throwables.getStackTraceAsString(e)));
161: ulfjack, INFO, IfStmt, logger.log(INFO, "Preserving work directory {0}.", tempRoot);
152: olaola, FINE, TryStmt, logger.log(FINE, "Received work for: {0}", workDetails);
154: olaola, FINE, TryStmt, logger.log(FINE, "Completed {0}.", workDetails);
263: ulfjack, warn, IfStmt, logger.warning(errMessage);
340: ulfjack, WARN, CatchClause, logger.log(WARNING, "Could not get UID for passing to Docker container. Proceeding without it.", e);
156: Philipp Wollermann, info, IfStmt, logger.info("Execution disabled, only serving cache requests.");
160: Philipp Wollermann, INFO, MethodDeclaration, logger.log(INFO, "Starting gRPC server on port {0,number,#}.", workerOptions.listenPort);
241: Philipp Wollermann, info, MethodDeclaration, logger.info("Initializing in-memory cache server.");
244: Philipp Wollermann, warn, IfStmt, logger.warning("Not using remote cache. This should be used for testing only!");
311: Philipp Wollermann, SEVERE, CatchClause, logger.log(SEVERE, "Could not extract the bundled linux-sandbox binary to " + sandboxPath, e);
326: Philipp Wollermann, SEVERE, CatchClause, logger.log(SEVERE, "Sandboxing requested, but it failed to execute 'true' as a self-check: " + new String(cmdResult.getStderr(), UTF_8), e);
84: olaola, SEVERE, IfStmt, logger.log(Level.SEVERE, "Work failed: " + opName, e);
204: Andrew Pellegrini, warn, CatchClause, logger.warning(String.format("Unable to open '%s' to write log.", logFile));
1071: Adam Michael, INFO, MethodDeclaration, loggingManager.captureStandardOutput(LogLevel.INFO);
1072: Adam Michael, Error, MethodDeclaration, loggingManager.captureStandardError(LogLevel.WARN);
1020: Jakob Buchgraber, WARN, MethodDeclaration, logger.log(Level.WARNING, "Converting ill-formed UTF-16. Your Protocol Buffer will not round trip correctly!", cause);
2277: Jakob Buchgraber, warn, IfStmt, logger.warning("The descriptor for message type \"" + name + "\" can not be found and a placeholder is created for it");
1389: Jakob Buchgraber, warn, IfStmt, logger.warning(msg.toString());
336: Jakob Buchgraber, WARN, CatchClause, logger.log(Level.WARNING, "platform method missing - proto runtime falling back to safer methods: " + e);
363: Jakob Buchgraber, WARN, CatchClause, logger.log(Level.WARNING, "platform method missing - proto runtime falling back to safer methods: " + e);
322: Jakob Buchgraber, info, IfStmt, logger.info("Processed " + (byteChar / 1000000L) + " million characters");
325: Jakob Buchgraber, info, MethodDeclaration, logger.info("Round tripped " + countRoundTripped + " of " + count);
416: Jakob Buchgraber, info, IfStmt, logger.info("Processed " + (byteChar / 1000000) + " million characters");
419: Jakob Buchgraber, info, MethodDeclaration, logger.info("Round tripped " + countRoundTripped + " of " + count);
231: Jakob Buchgraber, warn, IfStmt, logger.warning("Cannot find field \"" + entry.getKey() + "\" in message type " + descriptor.getFullName());
240: Jakob Buchgraber, warn, IfStmt, logger.warning("Field \"" + field.getFullName() + "\" is not a " + "singluar message field and cannot have sub-fields.");
457: Jakob Buchgraber, warn, IfStmt, logger.warning("Type " + message.getFullName() + " is added multiple times.");
53: Yue Gan, SEVERE, IfStmt, logger.log(Level.SEVERE, "No lcov file found.");
57: Yue Gan, SEVERE, IfStmt, logger.log(Level.SEVERE, "Only one lcov file supported now, but found " + fileList.size());
64: Yue Gan, SEVERE, CatchClause, logger.log(Level.SEVERE, "Failed to copy file: " + e.getMessage());
77: Yue Gan, SEVERE, CatchClause, logger.log(Level.SEVERE, "error reading folder " + coverageDir + ": " + x.getMessage());
33: Yue Gan, SEVERE, CatchClause, logger.log(Level.SEVERE, e.getMessage());
