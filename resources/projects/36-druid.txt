56: lihengming, info, MethodDeclaration, LOGGER.info("Init DruidDataSource");
50: wenshao, error, CatchClause, LOG.error("load filter config error", e);
117: wenshao, error, IfStmt, LOG.error("load filter error, filter not found : " + filterClassName);
126: wenshao, error, CatchClause, LOG.error("load filter error.", e);
148: wenshao, error, IfStmt, LOG.error("load filter error, filter not found : " + filterName);
110: wenshao, error, IfStmt, LOG.error("ConfigLoader only support DruidDataSource");
163: wenshao, info, IfStmt, LOG.info("DruidDataSource Config File load from : " + configFile);
263: wenshao, error, CatchClause, LOG.error("load config file error, file : " + filePath, ex);
251: wenshao, error, IfStmt, LOG.error("load config file error, file : " + filePath);
140: xiusiyan, debug, MethodDeclaration, connectionLogger.debug(message);
145: xiusiyan, debug, MethodDeclaration, statementLogger.debug(message);
150: xiusiyan, debug, MethodDeclaration, resultSetLogger.debug(message);
155: xiusiyan, error, MethodDeclaration, resultSetLogger.error(message, error);
160: xiusiyan, error, MethodDeclaration, statementLogger.error(message, error);
132: wenshao, debug, MethodDeclaration, connectionLogger.debug(message);
137: wenshao, debug, MethodDeclaration, statementLogger.debug(message);
142: wenshao, debug, MethodDeclaration, resultSetLogger.debug(message);
147: wenshao, error, MethodDeclaration, resultSetLogger.error(message, error);
152: wenshao, error, MethodDeclaration, statementLogger.error(message, error);
132: xiusiyan, debug, MethodDeclaration, connectionLogger.debug(message);
137: xiusiyan, debug, MethodDeclaration, statementLogger.debug(message);
142: xiusiyan, debug, MethodDeclaration, resultSetLogger.debug(message);
147: xiusiyan, error, MethodDeclaration, resultSetLogger.error(message, error);
152: xiusiyan, error, MethodDeclaration, statementLogger.error(message, error);
129: xiusiyan, debug, MethodDeclaration, connectionLogger.debug(message);
134: xiusiyan, debug, MethodDeclaration, statementLogger.debug(message);
139: xiusiyan, debug, MethodDeclaration, resultSetLogger.debug(message);
144: xiusiyan, error, MethodDeclaration, resultSetLogger.error(message, error);
149: xiusiyan, error, MethodDeclaration, statementLogger.error(message, error);
149: wenshao, error, CatchClause, LOG.error("merge sql error, dbType " + dbType + ", druid-" + VERSION.getVersionNumber() + ", sql : " + sql, e);
191: wenshao, error, CatchClause, LOG.error("property 'druid.stat.slowSqlMillis' format error");
417: wenshao, error, CatchClause, LOG.error("getAutoCommit error", e);
461: wenshao, error, CatchClause, LOG.error("getUpdateCount error", e);
478: wenshao, error, IfStmt, LOG.error("slow sql " + millis + " millis. " + lastExecSql + "" + slowParameters);
131: wenshao, debug, IfStmt, getLog().debug("conn-" + conn.getId() + " close");
152: wenshao, error, CatchClause, getLog().error("registerDriver error", e);
147: wenshao, warn, CatchClause, getLog().warn("register druid-driver mbean error", ex);
187: wenshao, debug, IfStmt, getLog().debug("connect, url " + url + ", id " + conn.getId());
252: wenshao, debug, IfStmt, getLog().debug("executeQuery " + sql);
639: wenshao, error, IfStmt, LOG.error("load validConnectionCheckerClass error : " + validConnectionCheckerClass);
750: wenshao, error, IfStmt, LOG.error("minEvictableIdleTimeMillis should be greater than 30000");
763: 高铁, error, IfStmt, LOG.error("maxEvictableIdleTimeMillis should be greater than 30000");
823: wenshao, error, IfStmt, LOG.error("validationQueryTimeout should be >= 0");
905: wenshao, error, IfStmt, LOG.error("load passwordCallback error : " + passwordCallbackClassName);
1001: wenshao, error, IfStmt, LOG.error("maxWait changed : " + this.maxWait + " -> " + maxWaitMillis);
1042: wenshao, error, MethodDeclaration, LOG.error("maxIdle is deprecated");
1099: wenshao, info, IfStmt, LOG.info("password changed");
1176: sunrui849, warn, IfStmt, LOG.warn("oracle.jdbc.driver.OracleDriver is deprecated.Having use oracle.jdbc.OracleDriver.");
1277: wenshao, error, IfStmt, LOG.error("load exceptionSorter error : " + exceptionSorter);
1417: wenshao, error, IfStmt, LOG.error(errorMsg);
121: wenshao, warn, CatchClause, LOG.warn("getHoldability unsupported", e);
124: shaojin.wensj, warn, CatchClause, LOG.warn("getHoldability unsupported", e);
130: wenshao, warn, CatchClause, LOG.warn("getHoldability error", e);
247: wenshao, error, CatchClause, LOG.error("setFilters error", e);
258: wenshao, error, CatchClause, LOG.error("illegal property '" + Constants.DRUID_TIME_BETWEEN_LOG_STATS_MILLIS + "'", e);
271: wenshao, error, CatchClause, LOG.error("illegal property '" + Constants.DRUID_STAT_SQL_MAX_SIZE + "'", e);
294: wenshao, error, CatchClause, LOG.error("illegal property 'druid.notFullTimeoutRetryCount'", e);
305: wenshao, error, CatchClause, LOG.error("illegal property 'druid.timeBetweenEvictionRunsMillis'", e);
316: 高铁, error, CatchClause, LOG.error("illegal property 'druid.maxWaitThreadCount'", e);
333: 高铁, error, CatchClause, LOG.error("illegal property 'druid.phyTimeoutMillis'", e);
344: 高铁, error, CatchClause, LOG.error("illegal property 'druid.minEvictableIdleTimeMillis'", e);
355: 高铁, error, CatchClause, LOG.error("illegal property 'druid.maxEvictableIdleTimeMillis'", e);
402: wenshao, error, CatchClause, LOG.error("illegal property 'druid.initialSize'", e);
413: wenshao, error, CatchClause, LOG.error("illegal property 'druid.minIdle'", e);
424: wenshao, error, CatchClause, LOG.error("illegal property 'druid.maxActive'", e);
447: wenshao, error, CatchClause, LOG.error("illegal property 'druid.maxPoolPreparedStatementPerConnectionSize'", e);
458: wenshao, error, CatchClause, LOG.error("illegal property 'druid.initConnectionSqls'", e);
514: wenshao, info, IfStmt, LOG.info("{dataSource-" + this.getID() + "} restart");
610: wenshao, info, IfStmt, LOG.info("set poolPreparedStatements " + this.poolPreparedStatements + " -> " + value);
651: wenshao, info, IfStmt, LOG.info("maxActive changed : " + this.maxActive + " -> " + maxActive);
702: wenshao, info, IfStmt, LOG.info("connectProperties changed : " + this.connectProperties + " -> " + properties);
905: 高铁, error, CatchClause, LOG.error("{dataSource-" + this.getID() + "} init error", e);
910: wenshao, error, CatchClause, LOG.error("{dataSource-" + this.getID() + "} init error", e);
913: qihw, error, CatchClause, LOG.error("{dataSource-" + this.getID() + "} init error", e);
930: wenshao, info, IfStmt, LOG.info(msg);
872: wenshao, error, CatchClause, LOG.error("init datasource error, url: " + this.getUrl(), ex);
995: wenshao, info, IfStmt, LOG.info("load filter from spi :" + autoFilter.getClass().getName());
1010: wenshao, error, MethodDeclaration, LOG.error("error url : '" + jdbcUrl + "', it should be : '" + config.getRawUrl() + "'");
1070: wenshao, error, MethodDeclaration, LOG.error(errorMessage + "validationQuery not set");
1118: wenshao, error, IfStmt, LOG.error("invalid oracle validationQuery. " + validationQuery + ", may should be : " + validationQuery + " FROM DUAL");
1147: wenshao, error, IfStmt, LOG.error("invalid db2 validationQuery. " + validationQuery + ", may should be : " + validationQuery + " FROM SYSDUMMY");
1260: wenshao, warn, IfStmt, LOG.warn("get connection timeout retry : " + notFullTimeoutRetryCnt);
1302: wenshao, debug, IfStmt, LOG.debug("skip not validate connection.");
1271: wenshao, debug, IfStmt, LOG.debug("skip not validate connection.");
1382: wenshao, debug, IfStmt, LOG.debug("conn-direct_create ");
1602: wenshao, error, MethodDeclaration, LOG.error("discard connection", error);
1612: wenshao, warn, IfStmt, LOG.warn("connectionHolder is null");
1620: wenshao, warn, IfStmt, LOG.warn("get/close not same thread");
1638: wenshao, warn, IfStmt, LOG.warn("remove abandonded failed. activeConnections.size " + activeConnections.size());
1730: wenshao, error, CatchClause, LOG.error("recyle error", e);
1720: 高铁, info, IfStmt, LOG.info("connection recyle failed.");
1802: wenshao, warn, CatchClause, LOG.warn("close connection error", ex);
1825: wenshao, info, IfStmt, LOG.info("{dataSource-" + this.getID() + "} closed");
2201: wenshao, error, CatchClause, LOG.error("create connection holder error", ex);
2299: wenshao, error, CatchClause, LOG.error("create connection OutOfMemoryError, out memory. ", e);
2333: wenshao, error, CatchClause, LOG.error("create connection SQLException, url: " + jdbcUrl, e);
2367: wenshao, error, CatchClause, LOG.error("create connection RuntimeException", e);
2378: wenshao, error, CatchClause, LOG.error("create connection Error", e);
2383: wenshao, error, CatchClause, LOG.error("create connection unexecpted error.", e);
2394: 高铁, info, IfStmt, LOG.info("put physical connection to pool failed.");
2458: wenshao, error, IfStmt, LOG.error("create connection Thread Interrupted, url: " + jdbcUrl, e);
2471: wenshao, error, CatchClause, LOG.error("create connection SQLException, url: " + jdbcUrl + ", errorCode " + e.getErrorCode() + ", state " + e.getSQLState(), e);
2498: wenshao, error, CatchClause, LOG.error("create connection RuntimeException", e);
2502: wenshao, error, CatchClause, LOG.error("create connection Error", e);
2514: 高铁, info, IfStmt, LOG.info("put physical connection to pool failed.");
2584: wenshao, error, CatchClause, LOG.error("logStats error", e);
2666: wenshao, error, IfStmt, LOG.error(buf.toString());
2817: wenshao, debug, IfStmt, LOG.debug("keepAliveErr", error);
3049: wenshao, error, IfStmt, LOG.error(buf.toString(), new TransactionTimeoutException());
3394: Yako, error, CatchClause, LOG.error("fill connection error, url: " + this.jdbcUrl, e);
3409: 高铁, info, IfStmt, LOG.info("fill connections skip.");
3420: wenshao, info, IfStmt, LOG.info("fill " + fillCount + " connections");
3471: 高铁, warn, CatchClause, LOG.warn("DruidDataSource preRegister error", ex);
184: wenshao, error, CatchClause, LOG.error("Could not parse defaultTransactionIsolation: " + value);
185: wenshao, WARN, CatchClause, LOG.error("WARNING: defaultTransactionIsolation not set");
186: wenshao, error, CatchClause, LOG.error("using default value of database driver");
77: wenshao, info, MethodDeclaration, logger.info(value);
163: wenshao, error, CatchClause, LOG.error("clear parameter error", ex);
241: wenshao, error, IfStmt, LOG.error("dup close");
284: wenshao, error, IfStmt, LOG.error("dup close");
316: wenshao, error, IfStmt, LOG.error("dup close");
83: wenshao, error, CatchClause, LOG.error("getMaxFieldSize error", e);
89: wenshao, error, CatchClause, LOG.error("getMaxRows error", e);
95: wenshao, error, CatchClause, LOG.error("getMaxRows error", e);
101: wenshao, error, CatchClause, LOG.error("getFetchDirection error", e);
107: wenshao, error, CatchClause, LOG.error("getFetchSize error", e);
151: wenshao, warn, CatchClause, LOG.warn(killQuery + " error.", ex);
148: wenshao, debug, IfStmt, LOG.debug(killQuery + " success.");
192: wenshao, error, CatchClause, LOG.error("clearResultSet error", ex);
357: wenshao, error, IfStmt, LOG.error(errorMsg);
129: wenshao, debug, IfStmt, LOG.debug(message);
160: wenshao, debug, IfStmt, LOG.debug(message);
172: wenshao, error, CatchClause, LOG.error("exitImplicitCacheToClose error", ex);
63: iamaprin, warn, CatchClause, LOG.warn("Cannot resolve com.mysql.jdbc.Connection.ping method.  Will use 'SELECT 1' instead.", e);
54: wenshao, error, CatchClause, LOG.error("parse druid.oracle.fatalErrorCodes error", e);
66: wenshao, error, CatchClause, LOG.error("create xaConnection error", xae);
48: wenshao, error, CatchClause, LOG.error("getRmHost method error", e);
56: wenshao, error, CatchClause, LOG.error("getRmHost error", e);
114: wenshao, error, CatchClause, LOG.error("registerDriver error", e);
105: wenshao, warn, CatchClause, LOG.warn("register druid-driver mbean error", ex);
258: wenshao, warn, CatchClause, LOG.warn("format error, dbType : " + dbType, ex);
261: shrek.wang, warn, CatchClause, LOG.warn("format error", ex);
61: wenshao, warn, IfStmt, LOG.warn("SelectListCache is too large.");
689: wenshao, info, IfStmt, LOG.info("replaced table '" + name + "'");
86: wenshao, error, CatchClause, LOG.error(e.getMessage(), e);
152: wenshao, error, CatchClause, LOG.error("register mbean error", ex);
165: agapple, error, CatchClause, LOG.error("register mbean error", ex);
176: agapple, error, CatchClause, LOG.error("register mbean error", ex);
195: agapple, error, IfStmt, LOG.error("unregister mbean failed. url " + DruidDataSourceUtils.getUrl(dataSource));
204: agapple, error, CatchClause, LOG.error("unregister mbean error", ex);
211: Zhanhui Li, error, CatchClause, LOG.error("unregister mbean error", ex);
232: agapple, error, CatchClause, LOG.error("resetStat error", e);
247: agapple, error, CatchClause, LOG.error("resetStat error", e);
366: melin, error, CatchClause, LOG.error("register mbean error", ex);
376: melin, error, CatchClause, LOG.error("unregister mbean error", ex);
137: wenshao, error, CatchClause, LOG.error("maxSize parse error", ex);
160: wenshao, error, IfStmt, LOG.error("session.getAttribute error", ex);
97: wenshao, error, CatchClause, LOG.error(msg, e);
117: wenshao, error, CatchClause, LOG.error(msg, e);
76: melin, error, CatchClause, LOG.error(msg, e);
88: yunnysunny, error, CatchClause, LOG.error("init jmx connection error", e);
112: yunnysunny, warn, CatchClause, LOG.warn(msg, e);
185: yunnysunny, error, CatchClause, LOG.error("get jmx data error", e);
168: yunnysunny, error, CatchClause, LOG.error("init jmx connection error", e);
176: yunnysunny, error, CatchClause, LOG.error("get jmx data error", e);
246: wenshao, error, IfStmt, LOG.error("WebStatFilter Parameter '" + PARAM_NAME_SESSION_STAT_ENABLE + "' config error");
260: Zhanhui Li, error, IfStmt, LOG.error("WebStatFilter Parameter '" + PARAM_NAME_PROFILE_ENABLE + "' config error");
271: wenshao, error, CatchClause, LOG.error("WebStatFilter Parameter '" + PARAM_NAME_SESSION_STAT_ENABLE + "' config error", e);
277: wenshao, error, IfStmt, LOG.error("uriSessionMapFullCount is full");
338: wenshao, error, IfStmt, LOG.error("sessionStatMap is full");
40: wenshao, error, CatchClause, LOG.error("getStatData error", e);
56: wenshao, error, CatchClause, LOG.error("getURIStatDataList error", e);
72: wenshao, error, CatchClause, LOG.error("getSessionStatDataList error", e);
88: wenshao, error, CatchClause, LOG.error("getSessionStatData error", e);
104: wenshao, error, CatchClause, LOG.error("getURIStatData error", e);
119: wenshao, error, CatchClause, LOG.error("reset error", e);
265: Zhanhui Li, error, IfStmt, LOG.error("session ip change too many");
48: Zhanhui Li, Error, CatchClause, LOG.error("Error while initializing", e);
89: wenshao, Error, CatchClause, LOG.error("createIdError", ex);
139: wenshao, error, CatchClause, LOG.error(e.getMessage(), e);
63: wenshao, error, CatchClause, LOG.error(ex.getMessage(), ex);
84: wenshao, error, CatchClause, LOG.error(ex.getMessage(), ex);
170: yunnysunny, warn, IfStmt, LOG.warn("url不存在");
160: yunnysunny, debug, IfStmt, LOG.debug("refresh" + timeNow);
182: yunnysunny, warn, IfStmt, LOG.warn("MBeanServerConnection is null");
189: yunnysunny, warn, CatchClause, LOG.warn("", e);
331: yunnysunny, warn, CatchClause, LOG.warn("获取数据时异常", e);
327: yunnysunny, warn, IfStmt, LOG.warn("错误的json格式");
185: yunnysunny, debug, IfStmt, LOG.debug(o.toString());
47: wenshao, error, MethodDeclaration, log.error(s, e);
52: wenshao, error, MethodDeclaration, log.error(s);
58: wenshao, debug, MethodDeclaration, log.debug(s);
63: wenshao, debug, MethodDeclaration, log.debug(s, e);
67: wenshao, warn, MethodDeclaration, log.warn(s);
73: wenshao, warn, MethodDeclaration, log.warn(s, e);
101: wenshao, info, MethodDeclaration, log.info(msg);
62: wenshao, WARN, MethodDeclaration, log.logp(Level.WARNING, loggerName, Thread.currentThread().getStackTrace()[1].getMethodName(), s);
68: wenshao, WARN, MethodDeclaration, log.logp(Level.WARNING, loggerName, Thread.currentThread().getStackTrace()[1].getMethodName(), s, e);
96: wenshao, INFO, MethodDeclaration, log.logp(Level.INFO, loggerName, Thread.currentThread().getStackTrace()[1].getMethodName(), msg);
53: wenshao, error, MethodDeclaration, log.error(s, e);
58: wenshao, error, MethodDeclaration, log.error(s);
63: wenshao, debug, MethodDeclaration, log.debug(s);
68: wenshao, debug, MethodDeclaration, log.debug(s, e);
72: wenshao, warn, MethodDeclaration, log.warn(s);
77: wenshao, warn, MethodDeclaration, log.warn(s, e);
106: wenshao, info, MethodDeclaration, log.info(msg);
54: wenshao, ERROR, MethodDeclaration, log.log(null, callerFQCN, LocationAwareLogger.ERROR_INT, msg, null, e);
60: wenshao, ERROR, MethodDeclaration, log.log(null, callerFQCN, LocationAwareLogger.ERROR_INT, msg, null, null);
72: wenshao, INFO, MethodDeclaration, log.log(null, callerFQCN, LocationAwareLogger.INFO_INT, msg, null, null);
78: wenshao, DEBUG, MethodDeclaration, log.log(null, callerFQCN, LocationAwareLogger.DEBUG_INT, msg, null, null);
84: wenshao, ERROR, MethodDeclaration, log.log(null, callerFQCN, LocationAwareLogger.ERROR_INT, msg, null, e);
99: wenshao, WARN, MethodDeclaration, log.log(null, callerFQCN, LocationAwareLogger.WARN_INT, msg, null, null);
105: wenshao, WARN, MethodDeclaration, log.log(null, callerFQCN, LocationAwareLogger.WARN_INT, msg, null, e);
229: wenshao, error, CatchClause, LOG.error("checkInst error", ex);
498: wenshao, error, CatchClause, LOG.error("getLocalIP error", e);
108: wenshao, error, CatchClause, LOG.error("create table error", ex);
214: wenshao, error, CatchClause, LOG.error("parse filter error", e);
363: wenshao, error, CatchClause, LOG.error("save sql error", ex);
450: wenshao, error, CatchClause, LOG.error("save const error error", ex);
525: wenshao, error, CatchClause, LOG.error("save sql error", ex);
67: 马进举, error, CatchClause, LOG.error("properties:" + properties, e);
145: wenshao, Info, CatchClause, LOG.error("getMethodInfo error", ex);
40: wenshao, error, CatchClause, LOG.error("getMethodStatDataList error", e);
56: wenshao, error, CatchClause, LOG.error("getMethodStatDataList error", e);
71: wenshao, error, CatchClause, LOG.error("reset error", e);
41: wenshao, error, CatchClause, LOG.error("getUrl error", e);
56: wenshao, error, CatchClause, LOG.error("getID error", e);
71: wenshao, error, CatchClause, LOG.error("getUrl error", e);
86: wenshao, error, CatchClause, LOG.error("getObjectName error", e);
100: wenshao, error, CatchClause, LOG.error("getSqlStat error", e);
115: wenshao, error, CatchClause, LOG.error("isRemoveAbandoned error", e);
131: wenshao, error, CatchClause, LOG.error("getStatDataForMBean error", e);
147: wenshao, error, CatchClause, LOG.error("getStatData error", e);
163: wenshao, error, CatchClause, LOG.error("getSqlStatMap error", e);
179: wenshao, error, CatchClause, LOG.error("getWallStatMap error", e);
195: wenshao, Info, CatchClause, LOG.error("getPoolingConnectionInfo error", e);
211: wenshao, Trace, CatchClause, LOG.error("getActiveConnectionStackTrace error", e);
61: sandzhang, error, CatchClause, LOG.error("", e);
68: sandzhang, error, CatchClause, LOG.error("close error", e);
76: sandzhang, error, CatchClause, LOG.error("close error", e);
58: sandzhang, debug, IfStmt, LOG.debug(responseBuilder.toString());
45: wenshao, error, CatchClause, LOG.error("getData error", e);
64: wenshao, error, CatchClause, LOG.error("load druid-driver.properties error", e);
75: wenshao, debug, CatchClause, LOG.debug("close connection error", e);
86: wenshao, debug, CatchClause, LOG.debug("close statement error", e);
97: Zhanhui Li, debug, CatchClause, LOG.debug("close result set error", e);
109: wenshao, debug, CatchClause, LOG.debug("close error", e);
121: wenshao, debug, CatchClause, LOG.debug("close error", e);
133: wenshao, debug, CatchClause, LOG.debug("close error", e);
92: wenshao, error, IfStmt, LOG.error("can not unwrap statement : " + stmt.getClass());
106: sand, warn, CatchClause, LOG.warn("stringToInteger fail,string=" + in, e);
109: Zhanhui Li, error, IfStmt, LOG.error("dataSource should not be null");
791: wenshao, error, IfStmt, LOG.error("sql injection violation, " + firstViolation.getMessage() + " : " + sql);
838: Zhanhui Li, error, IfStmt, LOG.error("not support method : Connection.getMetaData");
56: wenshao, info, MethodDeclaration, logger.info(value);
2453: wenshao, error, CatchClause, LOG.error("load oracle deny tables errror", e);
78: yinheli, debug, MethodDeclaration, log.debug("**sample:{}", sample);
53: wenshao, Error, MethodDeclaration, Assert.assertEquals(0, LOG.getErrorCount());
58: wenshao, Error, MethodDeclaration, Assert.assertEquals(1, LOG.getErrorCount());
55: wenshao, Error, MethodDeclaration, Assert.assertEquals(0, LOG.getErrorCount());
60: wenshao, Error, MethodDeclaration, Assert.assertEquals(1, LOG.getErrorCount());
57: wenshao, Error, MethodDeclaration, Assert.assertEquals(0, LOG.getErrorCount());
59: wenshao, Error, MethodDeclaration, Assert.assertEquals(0, LOG.getErrorCount());
54: sandzhang, Warn, MethodDeclaration, Assert.assertEquals(0, LOG.getWarnCount());
56: sandzhang, Warn, MethodDeclaration, Assert.assertEquals(0, LOG.getWarnCount());
68: sandzhang, Warn, MethodDeclaration, Assert.assertEquals(0, LOG.getWarnCount());
70: wenshao, Warn, MethodDeclaration, Assert.assertEquals(0, LOG.getWarnCount());
50: wenshao, Error, MethodDeclaration, Assert.assertEquals(1, log.getErrorCount());
49: wenshao, Error, MethodDeclaration, Assert.assertEquals(1, log.getErrorCount());
52: wenshao, Info, MethodDeclaration, Assert.assertEquals(1, dataSourceLog.getInfoCount());
71: wenshao, Info, MethodDeclaration, Assert.assertEquals(1, dataSourceLog.getInfoCount());
74: wenshao, Info, MethodDeclaration, Assert.assertEquals(2, dataSourceLog.getInfoCount());
51: wenshao, Info, MethodDeclaration, Assert.assertEquals(1, dataSourceLog.getInfoCount());
50: wenshao, Info, MethodDeclaration, Assert.assertEquals(1, dataSourceLog.getInfoCount());
37: wenshao, Info, MethodDeclaration, Assert.assertEquals(1, dataSourceLog.getInfoCount());
254: xiusiyan, Error, MethodDeclaration, logFilter.setConnectionLogErrorEnabled(enable);
262: xiusiyan, Error, MethodDeclaration, logFilter.setStatementLogErrorEnabled(enable);
276: xiusiyan, Error, MethodDeclaration, logFilter.setResultSetLogErrorEnabled(enable);
211: wenshao, Error, MethodDeclaration, logFilter.setConnectionLogErrorEnabled(enable);
219: wenshao, Error, MethodDeclaration, logFilter.setStatementLogErrorEnabled(enable);
232: wenshao, Error, MethodDeclaration, logFilter.setResultSetLogErrorEnabled(enable);
204: xiusiyan, Error, MethodDeclaration, logFilter.setConnectionLogErrorEnabled(enable);
212: xiusiyan, Error, MethodDeclaration, logFilter.setStatementLogErrorEnabled(enable);
225: xiusiyan, Error, MethodDeclaration, logFilter.setResultSetLogErrorEnabled(enable);
347: xiusiyan, Error, MethodDeclaration, logFilter.setConnectionLogErrorEnabled(enable);
355: xiusiyan, Error, MethodDeclaration, logFilter.setStatementLogErrorEnabled(enable);
369: xiusiyan, Error, MethodDeclaration, logFilter.setResultSetLogErrorEnabled(enable);
112: wenshao, error, CatchClause, logger.error("parser sql error : " + sql);
180: wenshao, error, CatchClause, logger.error("get statement error", ex);
208: wenshao, error, CatchClause, logger.error("parseSql error ", ex);
37: qxo, info, ForeachStmt, LOG.info("from_sql:{}", sql);
40: qxo, info, ForeachStmt, LOG.info("to_sql:{} ==> plist:{}", sql, plist);
45: 高铁, Error, IfStmt, noLoggingImpl.setErrorEnabled(false);
64: 高铁, Error, IfStmt, noLoggingImpl.setErrorEnabled(true);
50: 高铁, Error, IfStmt, noLoggingImpl.setErrorEnabled(false);
82: 高铁, Error, IfStmt, noLoggingImpl.setErrorEnabled(true);
58: 高铁, Error, IfStmt, noLoggingImpl.setErrorEnabled(false);
90: 高铁, Error, IfStmt, noLoggingImpl.setErrorEnabled(true);
