16: shuzheng, info, MethodDeclaration, LOGGER.info("ApiServiceMock => hello");
16: shuzheng, info, MethodDeclaration, LOGGER.info(">>>>> zheng-api-rpc-service 正在启动 <<<<<");
18: shuzheng, info, MethodDeclaration, LOGGER.info(">>>>> zheng-api-rpc-service 启动完成 <<<<<");
32: shuzheng, info, TryStmt, LOGGER.info("消费：{}", textMessage.getText());
32: shuzheng, info, TryStmt, LOGGER.info("消费消息：{}", textMessage.getText());
32: shuzheng, info, TryStmt, LOGGER.info("消费：{}", text);
22: shuzheng, info, MethodDeclaration, LOGGER.info("CmsArticleServiceMock => getCmsArticlesByCategoryId");
28: shuzheng, info, MethodDeclaration, LOGGER.info("CmsArticleServiceMock => countByCategoryId");
34: shuzheng, info, MethodDeclaration, LOGGER.info("CmsArticleServiceMock => getCmsArticlesByCategoryId");
40: shuzheng, info, MethodDeclaration, LOGGER.info("CmsArticleServiceMock => countByTagId");
16: shuzheng, info, MethodDeclaration, LOGGER.info(">>>>> zheng-cms-rpc-service 正在启动 <<<<<");
18: shuzheng, info, MethodDeclaration, LOGGER.info(">>>>> zheng-cms-rpc-service 启动完成 <<<<<");
32: shuzheng, info, TryStmt, LOGGER.info("消费：{}", text);
28: shuzheng, info, MethodDeclaration, LOGGER.info("执行任务：{}", item);
26: shuzheng, info, MethodDeclaration, LOGGER.info("执行任务：{}", item);
27: shuzheng, debug, MethodDeclaration, LOGGER.debug("doBeforeInServiceLayer");
33: shuzheng, debug, MethodDeclaration, LOGGER.debug("doAfterInServiceLayer");
45: shuzheng, info, MethodDeclaration, LOGGER.info("consumerSide={}, ip={}, url={}", consumerSide, ip, rpcUrl);
29: shuzheng, error, MethodDeclaration, LOGGER.error("统一异常处理：", exception);
20: shuzheng, info, MethodDeclaration, LOGGER.info("当前操作使用的数据源：{}", dataSource);
25: shuzheng, debug, IfStmt, LOGGER.debug(">>>>> spring初始化完毕 <<<<<");
29: shuzheng, debug, ForeachStmt, LOGGER.debug(">>>>> {}.initMapper()", service.getClass().getName());
34: shuzheng, error, CatchClause, LOGGER.error("初始化BaseService的initMapper方法异常", e);
42: shuzheng, debug, ForeachStmt, LOGGER.debug(">>>>> {}.init()", service.getClass().getName());
47: shuzheng, error, CatchClause, LOGGER.error("初始化BaseInterface的init方法异常", e);
71: shuzheng, error, CatchClause, LOGGER.error("First create JedisPool error : " + e);
102: shuzheng, error, CatchClause, LOGGER.error("Get jedis error : " + e);
119: shuzheng, error, CatchClause, LOGGER.error("Set key error : " + e);
134: shuzheng, error, CatchClause, LOGGER.error("Set key error : " + e);
151: shuzheng, error, CatchClause, LOGGER.error("Set keyex error : " + e);
168: shuzheng, error, CatchClause, LOGGER.error("Set key error : " + e);
212: shuzheng, error, CatchClause, LOGGER.error("Remove keyex error : " + e);
226: shuzheng, error, CatchClause, LOGGER.error("Remove keyex error : " + e);
241: shuzheng, error, CatchClause, LOGGER.error("lpush error : " + e);
257: shuzheng, error, CatchClause, LOGGER.error("lpush error : " + e);
274: shuzheng, error, CatchClause, LOGGER.error("sadd error : " + e);
25: shuzheng, info, MethodDeclaration, LOGGER.info("===== 开始解压zheng-admin =====");
27: shuzheng, info, MethodDeclaration, LOGGER.info("zheng-admin.jar 版本: {}", version);
29: shuzheng, info, MethodDeclaration, LOGGER.info("zheng-admin.jar 包路径: {}", jarPath);
31: shuzheng, info, MethodDeclaration, LOGGER.info("zheng-admin.jar 解压到: {}", resources);
33: shuzheng, info, MethodDeclaration, LOGGER.info("===== 解压zheng-admin完成 =====");
77: shuzheng, info, MethodDeclaration, LOGGER.info("policy={}", policy);
67: shuzheng, error, CatchClause, LOGGER.error("签名生成失败", e);
16: shuzheng, info, MethodDeclaration, LOGGER.info(">>>>> zheng-pay-rpc-service 正在启动 <<<<<");
18: shuzheng, info, MethodDeclaration, LOGGER.info(">>>>> zheng-pay-rpc-service 启动完成 <<<<<");
16: shuzheng, info, MethodDeclaration, LOGGER.info(">>>>> zheng-ucenter-rpc-service 正在启动 <<<<<");
18: shuzheng, info, MethodDeclaration, LOGGER.info(">>>>> zheng-ucenter-rpc-service 启动完成 <<<<<");
47: shuzheng, debug, MethodDeclaration, LOGGER.debug("doBeforeInServiceLayer");
53: shuzheng, debug, MethodDeclaration, LOGGER.debug("doAfterInServiceLayer");
81: shuzheng, debug, MethodDeclaration, LOGGER.debug("doAround>>>result={},耗时：{}", result, endTime - startTime);
117: shuzheng, error, CatchClause, LOGGER.error("局部会话已登录，移除code参数跳转出错：", e);
165: shuzheng, error, CatchClause, LOGGER.error("验证token失败：", e);
161: shuzheng, warn, IfStmt, LOGGER.warn(result.getString("data"));
146: shuzheng, debug, IfStmt, LOGGER.debug("当前code={}，对应的注册系统个数：{}个", code, RedisUtil.getJedis().scard(ZHENG_UPMS_CLIENT_SESSION_IDS + "_" + code));
158: shuzheng, error, CatchClause, LOGGER.error("已拿到code，移除code参数跳转出错：", e);
17: shuzheng, debug, MethodDeclaration, LOGGER.debug("会话创建：" + session.getId());
22: shuzheng, debug, MethodDeclaration, LOGGER.debug("会话停止：" + session.getId());
27: shuzheng, debug, MethodDeclaration, LOGGER.debug("会话过期：" + session.getId());
42: shuzheng, debug, MethodDeclaration, LOGGER.debug("doCreate >>>>> sessionId={}", sessionId);
49: shuzheng, debug, MethodDeclaration, LOGGER.debug("doReadSession >>>>> sessionId={}", sessionId);
68: shuzheng, debug, MethodDeclaration, LOGGER.debug("doUpdate >>>>> sessionId={}", session.getId());
97: shuzheng, debug, IfStmt, LOGGER.debug("当前code={}，对应的注册系统个数：{}个", code, jedis.scard(ZHENG_UPMS_CLIENT_SESSION_IDS + "_" + code));
104: shuzheng, debug, MethodDeclaration, LOGGER.debug("doUpdate >>>>> sessionId={}", sessionId);
19: shuzheng, info, MethodDeclaration, LOGGER.info("UpmsApiServiceMock => selectUpmsPermissionByUpmsUserId");
25: shuzheng, info, MethodDeclaration, LOGGER.info("UpmsApiServiceMock => selectUpmsPermissionByUpmsUserIdByCache");
31: shuzheng, info, MethodDeclaration, LOGGER.info("UpmsApiServiceMock => selectUpmsRoleByUpmsUserId");
37: shuzheng, info, MethodDeclaration, LOGGER.info("UpmsApiServiceMock => selectUpmsRoleByUpmsUserIdByCache");
43: shuzheng, info, MethodDeclaration, LOGGER.info("UpmsApiServiceMock => selectUpmsRolePermisstionByUpmsRoleId");
49: shuzheng, info, MethodDeclaration, LOGGER.info("UpmsApiServiceMock => selectUpmsUserPermissionByUpmsUserId");
55: shuzheng, info, MethodDeclaration, LOGGER.info("UpmsApiServiceMock => selectUpmsSystemByExample");
61: shuzheng, info, MethodDeclaration, LOGGER.info("UpmsApiServiceMock => selectUpmsOrganizationByExample");
67: shuzheng, info, MethodDeclaration, LOGGER.info("UpmsApiServiceMock => selectUpmsUserByUsername");
73: shuzheng, info, MethodDeclaration, LOGGER.info("UpmsApiServiceMock => insertSelective");
21: shuzheng, info, MethodDeclaration, LOGGER.info("UpmsPermissionServiceMock => getTreeByRoleId");
27: shuzheng, info, MethodDeclaration, LOGGER.info("UpmsPermissionServiceMock => getTreeByUserId");
21: shuzheng, info, MethodDeclaration, LOGGER.info("UpmsRolePermissionServiceMock => rolePermission");
20: shuzheng, info, MethodDeclaration, LOGGER.info("UpmsUserOrganizationServiceMock => organization");
21: shuzheng, info, MethodDeclaration, LOGGER.info("UpmsUserPermissionServiceMock => permission");
20: shuzheng, info, MethodDeclaration, LOGGER.info("UpmsUserRoleServiceMock => role");
16: shuzheng, info, MethodDeclaration, LOGGER.info(">>>>> zheng-upms-rpc-service 正在启动 <<<<<");
18: shuzheng, info, MethodDeclaration, LOGGER.info(">>>>> zheng-upms-rpc-service 启动完成 <<<<<");
57: shuzheng, info, IfStmt, LOGGER.info("selectUpmsPermissionByUpmsUserId : upmsUserId={}", upmsUserId);
85: shuzheng, info, IfStmt, LOGGER.info("selectUpmsRoleByUpmsUserId : upmsUserId={}", upmsUserId);
17: shuzheng, info, MethodDeclaration, LOGGER.info(">>>>> 系统初始化");
106: shuzheng, debug, IfStmt, LOGGER.debug("认证中心帐号通过，带code回跳：{}", backurl);
197: shuzheng, info, MethodDeclaration, LOGGER.info("新增用户，主键：userId={}", upmsUser.getUserId());
