103: lee, debug, MethodDeclaration, LOGGER.debug("开始下载：" + chunkInfo);
144: lee, debug, IfStmt, LOGGER.debug("下载连接失败：" + chunkInfo);
127: lee, debug, SynchronizedStmt, LOGGER.debug("下载连接成功：channelId[" + future.channel().id() + "]\t" + chunkInfo);
278: lee, error, CatchClause, LOGGER.error("closeChunk error", e);
269: monkeyWie, debug, TryStmt, LOGGER.debug("下载连接关闭：channelId[" + (channel != null ? channel.id() : "null") + "]\t" + chunkInfo);
60: monkeyWie, error, CatchClause, LOGGER.error("checkTask:" + e);
46: monkeyWie, debug, IfStmt, LOGGER.debug(seconds + "秒内无响应重试：" + chunkInfo);
134: monkeyWie, warn, IfStmt, LOGGER.warn("响应状态码异常：" + responseCode + "\t" + chunkInfo);
147: lee, debug, IfStmt, LOGGER.debug("下载响应：channelId[" + ctx.channel().id() + "]\t contentSize[" + realContentSize + "]" + chunkInfo);
123: monkeyWie, debug, IfStmt, LOGGER.debug("分段下载异常：channelId[" + ctx.channel().id() + "]\t" + chunkInfo);
93: monkeyWie, debug, IfStmt, LOGGER.debug("分段下载完成：channelId[" + ctx.channel().id() + "]\t" + chunkInfo);
111: lee, debug, IfStmt, LOGGER.debug("下载完成：channelId[" + ctx.channel().id() + "]\t" + chunkInfo);
172: lee, error, MethodDeclaration, LOGGER.error("down onChunkError:", cause);
193: lee, error, CatchClause, LOGGER.error("safeClose fail:", e);
214: monkeyWie, error, MethodDeclaration, LOGGER.error("down onInit:", cause);
40: monkeyWie, debug, MethodDeclaration, LOGGER.debug("HttpDownProxyServer listen " + port + "\tproxyConfig:" + proxyConfig);
57: monkeyWie, warn, MethodDeclaration, LOGGER.warn("beforeCatch:", cause);
63: monkeyWie, warn, MethodDeclaration, LOGGER.warn("afterCatch:", cause);
80: monkeyWie, debug, IfStmt, LOGGER.debug("=====================下载===========================\n" + pipeline.getHttpRequest().toString() + "\n" + "------------------------------------------------" + httpResponse.toString() + "\n" + "================================================");
50: monkeyWie, error, CatchClause, LOGGER.error("plugin content init error", e);
41: monkeyWie, error, CatchClause, LOGGER.error("写入配置文件失败：", e);
60: monkeyWie, error, CatchClause, LOGGER.error("加载配置文件失败：", e);
172: monkeyWie, error, CatchClause, LOGGER.error("写入配置文件失败：", e);
189: monkeyWie, warn, CatchClause, LOGGER.warn("写入配置文件失败：", e);
240: monkeyWie, warn, CatchClause, LOGGER.warn("加载配置文件失败：", e);
48: monkeyWie, warn, CatchClause, LOGGER.warn("sendMsg", e);
97: monkeyWie, error, CatchClause, LOGGER.error("getFreePort:", e);
128: monkeyWie, error, CatchClause, LOGGER.error("disabledProxy error", e);
172: lee, error, CatchClause, LOGGER.error("cert handle error", e);
196: monkeyWie, error, CatchClause, LOGGER.error("auto start error", e);
265: monkeyWie, error, CatchClause, LOGGER.error("openBrowse error:", e);
449: monkeyWie, error, CatchClause, LOGGER.error("addTray error:", e);
320: monkeyWie, error, CatchClause, LOGGER.error("open cert dir error", e);
355: lee, error, CatchClause, LOGGER.error("set proxy error", e);
374: monkeyWie, error, CatchClause, LOGGER.error("proxy switch error", e);
304: monkeyWie, error, CatchClause, LOGGER.error("unzip error:", e);
33: monkeyWie, warn, CatchClause, LOGGER.warn("res error:", e);
24: monkeyWie, error, MethodDeclaration, LOGGER.error("rest error:", e);
51: monkeyWie, error, CatchClause, LOGGER.error("eventTask:", e);
39: monkeyWie, error, CatchClause, LOGGER.error("plugin set error", e);
