62: Eduardo Macarron, debug, IfStmt, log.debug("Cache Hit Ratio [" + getId() + "]: " + getHitRatio());
136: Eduardo Macarron, warn, CatchClause, log.warn("Unexpected exception while notifiying a rollback to the cache adapter." + "Consider upgrading your cache adapter to the latest version.  Cause: " + e);
335: Eduardo Macarron, debug, IfStmt, log.debug("PooledDataSource forcefully closed/removed all connections.");
379: Eduardo Macarron, debug, IfStmt, log.debug("A bad connection (" + conn.getRealHashCode() + ") attempted to return to the pool, discarding connection.");
373: Eduardo Macarron, debug, IfStmt, log.debug("Closed connection " + conn.getRealHashCode() + ".");
363: Eduardo Macarron, debug, IfStmt, log.debug("Returned connection " + newConn.getRealHashCode() + " to pool.");
448: Eduardo Macarron, debug, IfStmt, log.debug("Waiting as long as " + poolTimeToWait + " milliseconds for connection.");
430: SmiNatalia, debug, CatchClause, log.debug("Bad connection. Could not roll back");
438: Eduardo Macarron, debug, IfStmt, log.debug("Claimed overdue connection " + conn.getRealHashCode() + ".");
406: Eduardo Macarron, debug, IfStmt, log.debug("Created connection " + conn.getRealHashCode() + ".");
398: Eduardo Macarron, debug, IfStmt, log.debug("Checked out connection " + conn.getRealHashCode() + " from pool.");
473: Eduardo Macarron, debug, IfStmt, log.debug("A bad connection (" + conn.getRealHashCode() + ") was returned from the pool, getting another connection.");
480: Eduardo Macarron, debug, IfStmt, log.debug("PooledDataSource: Could not get a good connection to the database.");
492: Eduardo Macarron, debug, IfStmt, log.debug("PooledDataSource: Unknown severe error condition.  The connection pool returned a null connection.");
513: Eduardo Macarron, debug, IfStmt, log.debug("Connection " + conn.getRealHashCode() + " is BAD: " + e.getMessage());
538: Eduardo Macarron, warn, CatchClause, log.warn("Execution of ping query '" + poolPingQuery + "' failed: " + e.getMessage());
546: Eduardo Macarron, debug, IfStmt, log.debug("Connection " + conn.getRealHashCode() + " is BAD: " + e.getMessage());
523: Eduardo Macarron, debug, IfStmt, log.debug("Testing connection " + conn.getRealHashCode() + " ...");
535: Eduardo Macarron, debug, IfStmt, log.debug("Connection " + conn.getRealHashCode() + " is GOOD!");
95: Eduardo Macarron, warn, CatchClause, log.warn("Unexpected exception on closing transaction.  Cause: " + e);
165: Kazuki Shimizu, debug, IfStmt, log.debug("Property [" + this.property + "] of [" + metaResultObject.getOriginalObject().getClass() + "] cannot be loaded " + "after deserialization. Make sure it's loaded before serializing " + "forenamed object.");
82: Kazuki Shimizu, debug, IfStmt, log.debug(WRITE_REPLACE_METHOD + " method was found on bean " + type + ", make sure it returns this");
82: Kazuki Shimizu, debug, IfStmt, log.debug(WRITE_REPLACE_METHOD + " method was found on bean " + type + ", make sure it returns this");
127: Kazuki Shimizu, debug, IfStmt, log.debug("Listing directory " + file.getAbsolutePath());
131: Kazuki Shimizu, debug, IfStmt, log.debug("Listing " + url);
102: Kazuki Shimizu, debug, IfStmt, log.debug("Reader entry: " + line);
113: Kazuki Shimizu, debug, IfStmt, log.debug("Listing " + url);
78: Kazuki Shimizu, debug, IfStmt, log.debug("Listing " + url);
82: Kazuki Shimizu, debug, IfStmt, log.debug("Jar entry: " + entry.getName());
65: Kazuki Shimizu, debug, IfStmt, log.debug("Listing " + url);
200: Kazuki Shimizu, debug, IfStmt, log.debug("Found resource: " + name);
222: Kazuki Shimizu, debug, IfStmt, log.debug("Find JAR URL: " + url);
230: Kazuki Shimizu, debug, IfStmt, log.debug("Inner URL: " + url);
248: Kazuki Shimizu, debug, IfStmt, log.debug("Not a JAR: " + jarUrl);
243: Kazuki Shimizu, debug, IfStmt, log.debug("Extracted JAR URL: " + jarUrl);
287: Eduardo Macarron, warn, CatchClause, log.warn("Invalid JAR URL: " + jarUrl);
262: Kazuki Shimizu, debug, IfStmt, log.debug("Not a JAR: " + jarUrl);
278: Kazuki Shimizu, debug, IfStmt, log.debug("Trying real file: " + file.getAbsolutePath());
291: Kazuki Shimizu, debug, IfStmt, log.debug("Not a JAR: " + jarUrl);
330: Kazuki Shimizu, debug, IfStmt, log.debug("Found JAR: " + url);
80: Jeremy Landis, error, CatchClause, log.error("", e);
52: Eduardo Macarron, error, CatchClause, log.error("This should not be possible. VirtualFile.getPathNameRelativeTo() threw IOException.");
132: Eduardo Macarron, error, IfStmt, log.error("Method " + method.getClass().getName() + "." + method.getName() + "(..) should return " + expected.getName() + " but returns " + method.getReturnType().getName() + " instead.");
142: Eduardo Macarron, debug, IfStmt, log.debug("JBoss 6 VFS API is not available in this environment.");
227: Eduardo Macarron, error, CatchClause, log.error("Could not read package: " + packageName, ioe);
264: Eduardo Macarron, warn, CatchClause, log.warn("Could not examine class '" + fqn + "'" + " due to a " + t.getClass().getName() + " with message: " + t.getMessage());
256: Kazuki Shimizu, debug, IfStmt, log.debug("Checking to see if class " + externalName + " matches criteria [" + test + "]");
68: jasonleaster, error, CatchClause, log.error("Failed to instantiate " + impl, e);
71: jasonleaster, error, CatchClause, log.error("Failed to instantiate " + impl, e);
63: jasonleaster, debug, IfStmt, log.debug("VFS implementation " + impl.getName() + " is not valid in this environment.");
77: jasonleaster, debug, IfStmt, log.debug("Using VFS adapter " + vfs.getClass().getName());
111: Kazuki Shimizu, debug, IfStmt, log.debug("Class not found: " + className);
131: Eduardo Macarron, error, CatchClause, log.error("Security exception looking for method " + clazz.getName() + "." + methodName + ".  Cause: " + e);
134: Eduardo Macarron, error, CatchClause, log.error("Method not found " + clazz.getName() + "." + methodName + "." + methodName + ".  Cause: " + e);
135: Kazuki Shimizu, debug, IfStmt, log.debug("Logging initialized using '" + implClass + "' adapter.");
44: Eduardo Macarron, error, MethodDeclaration, log.error(s, e);
49: Eduardo Macarron, error, MethodDeclaration, log.error(s);
54: Eduardo Macarron, debug, MethodDeclaration, log.debug(s);
59: Eduardo Macarron, trace, MethodDeclaration, log.trace(s);
64: Eduardo Macarron, warn, MethodDeclaration, log.warn(s);
159: Eduardo Macarron, debug, IfStmt, statementLog.debug(prefix(input) + text);
165: Eduardo Macarron, trace, IfStmt, statementLog.trace(prefix(input) + text);
46: Eduardo Macarron, SEVERE, MethodDeclaration, log.log(Level.SEVERE, s, e);
51: Eduardo Macarron, SEVERE, MethodDeclaration, log.log(Level.SEVERE, s);
56: Eduardo Macarron, FINE, MethodDeclaration, log.log(Level.FINE, s);
61: Eduardo Macarron, FINE, MethodDeclaration, log.log(Level.FINER, s);
66: Eduardo Macarron, WARN, MethodDeclaration, log.log(Level.WARNING, s);
52: Iwao AVE!, error, MethodDeclaration, log.error(s, e);
57: Iwao AVE!, error, MethodDeclaration, log.error(s);
62: Iwao AVE!, debug, MethodDeclaration, log.debug(s);
67: Iwao AVE!, trace, MethodDeclaration, log.trace(s);
72: Iwao AVE!, warn, MethodDeclaration, log.warn(s);
49: Iwao AVE!, error, MethodDeclaration, log.error(MARKER, s, e);
54: Iwao AVE!, error, MethodDeclaration, log.error(MARKER, s);
59: Iwao AVE!, debug, MethodDeclaration, log.debug(MARKER, s);
64: Iwao AVE!, trace, MethodDeclaration, log.trace(MARKER, s);
69: Iwao AVE!, warn, MethodDeclaration, log.warn(MARKER, s);
64: Eduardo Macarron, error, MethodDeclaration, log.error(s, e);
69: Eduardo Macarron, error, MethodDeclaration, log.error(s);
74: Eduardo Macarron, debug, MethodDeclaration, log.debug(s);
79: Eduardo Macarron, trace, MethodDeclaration, log.trace(s);
84: Eduardo Macarron, warn, MethodDeclaration, log.warn(s);
51: Eduardo Macarron, ERROR, MethodDeclaration, logger.log(MARKER, FQCN, LocationAwareLogger.ERROR_INT, s, null, e);
56: Eduardo Macarron, ERROR, MethodDeclaration, logger.log(MARKER, FQCN, LocationAwareLogger.ERROR_INT, s, null, null);
61: Eduardo Macarron, DEBUG, MethodDeclaration, logger.log(MARKER, FQCN, LocationAwareLogger.DEBUG_INT, s, null, null);
66: Eduardo Macarron, TRACE, MethodDeclaration, logger.log(MARKER, FQCN, LocationAwareLogger.TRACE_INT, s, null, null);
71: Eduardo Macarron, WARN, MethodDeclaration, logger.log(MARKER, FQCN, LocationAwareLogger.WARN_INT, s, null, null);
44: Eduardo Macarron, error, MethodDeclaration, log.error(s, e);
49: Eduardo Macarron, error, MethodDeclaration, log.error(s);
54: Eduardo Macarron, debug, MethodDeclaration, log.debug(s);
59: Eduardo Macarron, trace, MethodDeclaration, log.trace(s);
64: Eduardo Macarron, warn, MethodDeclaration, log.warn(s);
175: Iwao AVE!, debug, IfStmt, log.debug("While building result map '" + resultMap.id + "', found a constructor with arg names " + constructorArgNames + ", but the type of '" + constructorArgNames.get(i) + "' did not match. Specified: [" + specifiedType.getName() + "] Declared: [" + actualType.getName() + "]");
54: Eduardo Macarron, error, CatchClause, log.error("Could not get a databaseId from dataSource", e);
47: Kazuki Shimizu, warn, MethodDeclaration, log.warn(buildMessage(mappedStatement, columnName, property, propertyType));
69: Eduardo Macarron, debug, IfStmt, log.debug("Committing JDBC Connection [" + connection + "]");
79: Eduardo Macarron, debug, IfStmt, log.debug("Rolling back JDBC Connection [" + connection + "]");
90: Eduardo Macarron, debug, IfStmt, log.debug("Closing JDBC Connection [" + connection + "]");
100: Eduardo Macarron, debug, IfStmt, log.debug("Setting autocommit to " + desiredAutoCommit + " on JDBC Connection [" + connection + "]");
128: Kazuki Shimizu, Error, IfStmt, log.debug("Error resetting autocommit to true " + "before closing the connection.  Cause: " + e);
122: Eduardo Macarron, debug, IfStmt, log.debug("Resetting autocommit to true on JDBC Connection [" + connection + "]");
136: Iwao AVE!, debug, IfStmt, log.debug("Opening JDBC Connection");
79: Eduardo Macarron, debug, IfStmt, log.debug("Closing JDBC Connection [" + this.connection + "]");
87: Iwao AVE!, debug, IfStmt, log.debug("Opening JDBC Connection");
98: Eduardo Macarron, Debug, MethodDeclaration, log.debug("Debug message.");
103: Eduardo Macarron, Warn, MethodDeclaration, log.warn("Warning message.");
104: Eduardo Macarron, Debug, MethodDeclaration, log.debug("Debug message.");
105: Eduardo Macarron, Error, MethodDeclaration, log.error("Error message.");
106: Eduardo Macarron, Error, MethodDeclaration, log.error("Error with Exception.", new Exception("Test exception."));
48: wuwen, Debug, MethodDeclaration, when(log.isDebugEnabled()).thenReturn(true);
55: wuwen, debug, MethodDeclaration, verify(log).debug(contains("Preparing: select 1"));
61: wuwen, debug, MethodDeclaration, verify(log).debug(contains("Preparing: { call test() }"));
46: wuwen, Debug, MethodDeclaration, when(log.isDebugEnabled()).thenReturn(true);
58: wuwen, debug, MethodDeclaration, verify(log).debug(contains("Parameters: 10(Integer)"));
68: wuwen, debug, MethodDeclaration, verify(log).debug(contains("Parameters: null"));
85: wuwen, debug, MethodDeclaration, verify(log).debug(contains("Updates: 1"));
52: Eduardo Macarron, Trace, MethodDeclaration, when(log.isTraceEnabled()).thenReturn(true);
60: Eduardo Macarron, trace, MethodDeclaration, verify(log).trace("<==    Columns: ColumnName");
61: Eduardo Macarron, trace, MethodDeclaration, verify(log).trace("<==        Row: <<BLOB>>");
67: Eduardo Macarron, trace, MethodDeclaration, verify(log).trace("<==    Columns: ColumnName");
68: Eduardo Macarron, trace, MethodDeclaration, verify(log).trace("<==        Row: value");
48: wuwen, Debug, MethodDeclaration, when(log.isDebugEnabled()).thenReturn(true);
57: wuwen, debug, MethodDeclaration, verify(log).debug(contains("Executing: select 1"));
65: wuwen, debug, MethodDeclaration, verify(log).debug(contains(sql));
