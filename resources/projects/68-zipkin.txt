50: Adrian Cole, FINE, MethodDeclaration, logger.log(FINE, message, e);
52: Adrian Cole, INFO, IfStmt, log.log(Level.INFO, "first error", throwable);
59: Adrian Cole, INFO, MethodDeclaration, verify(log).log(Level.INFO, "first error", throwable);
78: Adrian Cole, INFO, MethodDeclaration, verify(log).log(Level.INFO, "first error", exception1);
71: Adrian Cole, warn, IfStmt, log.warning(format("Expected exactly one of hosts or domain: instead saw hosts '%s' and domain '%s'." + " Ignoring hosts and proceeding to look for domain. Either unset ES_HOSTS or " + "ES_AWS_DOMAIN to suppress this message.", hosts, domain));
87: Adrian Cole, warn, IfStmt, log.warning("Native transport no longer supported. Changing " + host + " to http port 9200");
200: Adrian Cole, error, CatchClause, LOG.error("Kafka worker exited with exception", e);
203: Adrian Cole, error, CatchClause, LOG.error("Kafka worker exited with error", e);
98: Adrian Cole, warn, CatchClause, LOG.warn("Unexpected error in polling loop spans", e);
101: Dan Grabowski, info, TryStmt, LOG.info("Kafka consumer polling loop stopped.");
102: Dan Grabowski, info, TryStmt, LOG.info("Closing Kafka consumer...");
104: Dan Grabowski, info, TryStmt, LOG.info("Kafka consumer closed.");
69: Dan Grabowski, info, TryStmt, LOG.info("Kafka consumer starting polling loop.");
72: Dan Grabowski, debug, WhileStmt, LOG.debug("Kafka polling returned batch of {} messages.", consumerRecords.count());
52: Tommy Ludwig, warn, CatchClause, LOGGER.warn("Couldn't start docker image " + image + ": " + e.getMessage(), e);
48: Tommy Ludwig, info, TryStmt, LOGGER.info("Starting docker image " + image);
59: Tommy Ludwig, warn, CatchClause, LOGGER.warn("Couldn't connect to docker image " + image + ": " + e.getMessage(), e);
109: Tommy Ludwig, error, CatchClause, LOGGER.warn("error closing collector " + e.getMessage(), e);
112: Tommy Ludwig, info, IfStmt, LOGGER.info("Stopping docker image " + image);
146: Adrian Cole, warn, IfStmt, LOG.warn("Span {} in trace {} had no timestamp. " + "If this happens a lot consider switching back to SizeTieredCompactionStrategy for " + "{}.traces", key, traceId, session.getLoggedKeyspace());
157: Adrian Cole, warn, IfStmt, LOG.warn("Please update Cassandra to 2.2 or later, as some features may fail");
109: Adrian Cole, debug, IfStmt, LOG.debug("optimized out {}/{} inserts into {}", delta, maybeInsert.size(), index.table());
45: Adrian Cole, warn, IfStmt, LOG.warn("running with RF=1, this is not suitable for production. Optimal is 3+");
51: mck, warn, IfStmt, LOG.warn("schema lacks default ttls: apply {}, or set CassandraStorage.ensureSchema=true", UPGRADE_1);
83: mck, info, IfStmt, LOG.info("Installing schema {}", SCHEMA);
89: Adrian Cole, info, IfStmt, LOG.info("Upgrading schema {}", UPGRADE_1);
110: Adrian Cole, error, CatchClause, LOG.error(ex.getMessage(), ex);
117: Adrian Cole, info, TryStmt, logger().info("Obtained a connection to container ({})", cluster.getClusterName());
148: Adrian Cole, FINE, IfStmt, LOG.log(Level.FINE, "Error indexing query for span: " + span, e);
168: Adrian Cole, warn, IfStmt, LOG.warning("Please upgrade to Elasticsearch 2 or later. version=" + versionString);
58: Adrian Cole, warn, CatchClause, LOGGER.warn("Couldn't start docker image " + image + ": " + e.getMessage(), e);
48: Adrian Cole, info, TryStmt, LOGGER.info("Starting docker image " + image);
65: Adrian Cole, warn, CatchClause, LOGGER.warn("Couldn't connect to docker image " + image + ": " + e.getMessage(), e);
109: Adrian Cole, error, CatchClause, LOGGER.warn("error closing session " + e.getMessage(), e);
112: Adrian Cole, info, IfStmt, LOGGER.info("Stopping docker image " + image);
36: Adrian Cole, warn, IfStmt, LOG.warning("zipkin_dependencies.error_count doesn't exist, so DependencyLink.errorCount is not supported. " + "Execute: alter table zipkin_dependencies add `error_count` BIGINT");
48: Adrian Cole, WARN, MethodDeclaration, LOG.log(Level.WARNING, "problem reading zipkin_dependencies.error_count", e);
36: Adrian Cole, warn, IfStmt, LOG.warning("zipkin_annotations.ipv6 doesn't exist, so Endpoint.ipv6 is not supported. " + "Execute: alter table zipkin_annotations add `endpoint_ipv6` BINARY(16)");
48: Adrian Cole, WARN, MethodDeclaration, LOG.log(Level.WARNING, "problem reading zipkin_annotations.ipv6", e);
40: Adrian Cole, warn, IfStmt, LOG.warning("zipkin_dependencies doesn't exist, so pre-aggregated dependencies are not " + "supported. Execute mysql.sql located in this jar to add the table");
52: Adrian Cole, WARN, MethodDeclaration, LOG.log(Level.WARNING, "problem reading zipkin_dependencies", e);
46: Adrian Cole, warn, IfStmt, LOG.warning(MESSAGE);
57: Adrian Cole, WARN, MethodDeclaration, LOG.log(Level.WARNING, "problem reading zipkin_spans.trace_id_high", e);
87: mck, warn, CatchClause, LOG.warn("failed to prepare annotation_query index statements: " + ex.getMessage());
63: Adrian Cole, debug, IfStmt, LOG.debug("Skipping schema check on keyspace {} as ensureSchema was false", keyspace);
82: Adrian Cole, debug, MethodDeclaration, LOG.debug("Registering endpoint and annotation UDTs to keyspace {}", keyspace);
64: mck, warn, IfStmt, LOG.warn("running with RF=1, this is not suitable for production. Optimal is 3+");
104: Adrian Cole, info, IfStmt, LOG.info("Installing schema {} for keyspace {}", SCHEMA_RESOURCE, keyspace);
107: Adrian Cole, info, IfStmt, LOG.info("Installing indexes {} for keyspace {}", INDEX_RESOURCE, keyspace);
125: mck, error, CatchClause, LOG.error(ex.getMessage(), ex);
132: Adrian Cole, INFO, IfStmt, log.log(Level.INFO, "error from " + call, throwable);
59: mck, warn, CatchClause, LOGGER.warn("Couldn't start docker image " + image + ": " + e.getMessage(), e);
55: Adrian Cole, info, TryStmt, LOGGER.info("Starting docker image " + image);
66: mck, warn, CatchClause, LOGGER.warn("Couldn't connect to docker image " + image + ": " + e.getMessage(), e);
108: Adrian Cole, error, CatchClause, LOGGER.warn("error closing session " + e.getMessage(), e);
111: mck, info, IfStmt, LOGGER.info("Stopping docker image " + image);
135: Lance Linder, info, TryStmt, logger().info("Obtained a connection to container ({})", cluster.getClusterName());
92: Adrian Cole, TRACE, MethodDeclaration, new DependencyLinker(logger).putTrace(TRACE.iterator());
104: Adrian Cole, trace, MethodDeclaration, assertThat(new DependencyLinker(logger).putTrace(trace.iterator()).link()).isEmpty();
324: Adrian Cole, trace, MethodDeclaration, assertThat(new DependencyLinker(logger).putTrace(trace.iterator()).link()).containsOnly(DependencyLink.newBuilder().parent("client").child("server").callCount(1L).build());
358: Adrian Cole, trace, MethodDeclaration, assertThat(new DependencyLinker(logger).putTrace(trace.iterator()).link()).containsOnly(DependencyLink.newBuilder().parent("client").child("server").callCount(2L).build());
419: Adrian Cole, trace, MethodDeclaration, new DependencyLinker(logger).putTrace(trace.iterator()).link();
497: Adrian Cole, Trace, ForeachStmt, assertThat(new DependencyLinker(logger).putTrace(asList(span).iterator()).link()).isEmpty();
511: Adrian Cole, trace, MethodDeclaration, assertThat(new DependencyLinker(logger).putTrace(trace.iterator()).link()).isEmpty();
528: Adrian Cole, trace, MethodDeclaration, assertThat(new DependencyLinker(logger).putTrace(trace.iterator()).link()).containsOnly(DependencyLink.newBuilder().parent("service1").child("service2").callCount(1L).build());
570: Adrian Cole, Trace, MethodDeclaration, assertThat(new DependencyLinker(logger).putTrace(singleHostSpans.iterator()).link()).containsOnly(DependencyLink.newBuilder().parent("web").child("app").callCount(1L).build());
